/*

   This header file belongs to the

            Hamburg University of Technology (TUHH)
              WCC Intermediate Representation Framework

   and is property of its respective copyright holder. It must neither be used
   nor published even in parts without explicit written permission.

   Copyright 2015 - 2022, Heiko Falk.

   Hamburg University of Technology (TUHH)
   Institute of Embedded Systems
   21071 Hamburg
   Germany

   http://www.tuhh.de/es/esd/research/wcc

*/

/*!
  @file wirlistapi.h
  @brief This file provides the API for managing generic lists of %WIR objects
         within %WIR classes.

  @author Heiko Falk <Heiko.Falk@tuhh.de>
*/


#ifndef _WIR_LIST_API_H
#define _WIR_LIST_API_H


//
// Include section
//

// Include standard headers
#include <functional>
#include <list>

// Include WIR headers
#include <wir/wirmisc.h>


//
// Preprocessor macros
//

/*!
  @brief Preprocessor macro WIR_LIST_DECL declares the %WIR list API.

  @param[in] CLASSNAME Specify here the name of some actual C++ %WIR class that
                       you need to organize in a list (e.g., WIR_BasicBlock).
                       This macro assumes that the class specified here is
                       inherited from WIR_ID_API.
  @param[in] CLEARNAME Specify here some concise clear-text name of the data
                       organized in this list (e.g., BasicBlock). This
                       clear-text name will be used as suffix of the method
                       names generated by this macro.
  @param[in] PROTECTION Specify here whether the list API shall be declared as
                        public or protected.

  @author Heiko Falk <Heiko.Falk@tuhh.de>
*/
#define WIR_LIST_DECL( CLASSNAME, CLEARNAME, PROTECTION ) \
  PROTECTION: \
    /*!
      @brief pushBack##CLEARNAME adds a new CLASSNAME at the end of list
      m##CLEARNAME##s, after its current last element.

      @param[in] o A const reference to the CLASSNAME to be copy-added.
      @return A reference to the newly inserted element.

      @details The content of o is copied to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    CLASSNAME & pushBack##CLEARNAME( const CLASSNAME &o ); \
    \
    /*!
      @brief pushBack##CLEARNAME adds a new CLASSNAME at the end of list
             m##CLEARNAME##s, after its current last element.

      @param[in] o An R-value reference to the CLASSNAME to be move-added.
      @return A reference to the newly inserted element.

      @details The content of o is moved to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    CLASSNAME & pushBack##CLEARNAME( CLASSNAME &&o ); \
    \
    /*!
      @brief pushFront##CLEARNAME adds a new CLASSNAME at the beginning of list
             m##CLEARNAME##s, right before its current first element.

      @param[in] o A const reference to the CLASSNAME to be copy-added.
      @return A reference to the newly inserted element.

      @details The content of o is copied to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    CLASSNAME & pushFront##CLEARNAME( const CLASSNAME &o ); \
    \
    /*!
      @brief pushFront##CLEARNAME adds a new CLASSNAME at the beginning of list
             m##CLEARNAME##s, right before its current first element.

      @param[in] o An R-value reference to the CLASSNAME to be move-added.
      @return A reference to the newly inserted element.

      @details The content of o is moved to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    CLASSNAME & pushFront##CLEARNAME( CLASSNAME &&o ); \
    \
    /*!
      @brief insert##CLEARNAME inserts a new CLASSNAME before the element at the
             specified position.

      @param[in] pos An iterator denoting the position where the new element is
                     inserted.
      @param[in] o A const reference to the CLASSNAME to be copy-added.
      @return An iterator pointing to the newly inserted element.

      @details The content of o is copied to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::iterator insert##CLEARNAME( std::list<std::reference_wrapper<CLASSNAME>>::const_iterator pos, \
                                                                              const CLASSNAME &o ); \
    \
    /*!
      @brief insert##CLEARNAME inserts a new CLASSNAME before the element at the
             specified position.

      @param[in] pos An iterator denoting the position where the new element is
                     inserted.
      @param[in] o An R-value reference to the CLASSNAME to be move-added.
      @return An iterator pointing to the newly inserted element.

      @details The content of o is moved to the new list element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::iterator insert##CLEARNAME( std::list<std::reference_wrapper<CLASSNAME>>::const_iterator pos, \
                                                                              CLASSNAME &&o ); \
    \
    /*!
      @brief replace##CLEARNAME replaces the list element at the specified
             position by a new CLASSNAME##.

      @param[in] pos An iterator pointing to the position to be replaced.
      @param[in] o A const reference to the CLASSNAME to be copy-inserted.
      @return An iterator pointing to the newly inserted element.

      @details The content of o is copied into the list. The replaced element is
               immediately destroyed.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::iterator replace##CLEARNAME( std::list<std::reference_wrapper<CLASSNAME>>::const_iterator pos, \
                                                                               const CLASSNAME &o ); \
    \
    /*!
      @brief replace##CLEARNAME replaces the list element at the specified
             position by a new CLASSNAME##.

      @param[in] pos An iterator pointing to the position to be replaced.
      @param[in] o An R-value reference to the CLASSNAME to be move-inserted.
      @return An iterator pointing to the newly inserted element.

      @details The content of o is moved into the list. The replaced element is
               immediately destroyed.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::iterator replace##CLEARNAME( std::list<std::reference_wrapper<CLASSNAME>>::const_iterator pos, \
                                                                               CLASSNAME &&o ); \
    \
    /*!
      @brief popBack##CLEARNAME removes the last CLASSNAME from list
             m##CLEARNAME##s.

      @details This destroys the removed element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    void popBack##CLEARNAME( void ); \
    \
    /*!
      @brief popFront##CLEARNAME removes the first CLASSNAME from list
             m##CLEARNAME##s.

      @details This destroys the removed element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    void popFront##CLEARNAME( void ); \
    \
    /*!
      @brief erase##CLEARNAME removes a single CLASSNAME from the specified
             position.

      @param[in] pos An iterator denoting the position where the element is
                     removed.
      @return An iterator pointing to the element following the erased element.

      @details This destroys the removed element.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::iterator erase##CLEARNAME( std::list<std::reference_wrapper<CLASSNAME>>::const_iterator pos ); \
    \
    /*!
      @brief clear##CLEARNAME##s removes all elements from list m##CLEARNAME##s.

      @details This destroys all removed elements.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    void clear##CLEARNAME##s( void ); \
    \
    /*!
      @brief get##CLEARNAME##s returns the list m##CLEARNAME##s.

      @return A const reference to the list m##CLEARNAME##s.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    const std::list<std::reference_wrapper<CLASSNAME>> &get##CLEARNAME##s( void ) const; \
    \
    /*!
      @brief contains##CLEARNAME returns whether list m##CLEARNAME##s contains a
             CLASSNAME with the specified ID.

      @param[in] id An object's ID to be found.
      @return true if m##CLEARNAME##s contains an object with the given ID,
              false otherwise.

      @note This function is rather inefficient: Its complexity is linear in the
            list's length. Thus, this method should be used with care.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    bool contains##CLEARNAME( WIR_id_t id ) const; \
    \
    /*!
      @brief contains##CLEARNAME returns whether list m##CLEARNAME##s contains
             the specified CLASSNAME##.

      @param[in] o A const reference to the CLASSNAME to be found.
      @return true if m##CLEARNAME##s contains the specified object, false
              otherwise.

      @note This function is rather inefficient: Its complexity is linear in the
            list's length. Thus, this method should be used with care.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    bool contains##CLEARNAME( const CLASSNAME &o ) const; \
    \
    /*!
      @brief find##CLEARNAME finds a CLASSNAME with the specified ID in list
             m##CLEARNAME##s.

      @param[in] id An object's ID to be found.
      @return An iterator pointing to the found element with the specified ID,
              or the end() iterator otherwise.

      @note This function is rather inefficient: Its complexity is linear in the
            list's length. Thus, this method should be used with care.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::const_iterator find##CLEARNAME( WIR_id_t id ) const; \
    \
    /*!
      @brief find##CLEARNAME finds the specified CLASSNAME in list
             m##CLEARNAME##s.

      @param[in] o A const reference to the CLASSNAME to be found.
      @return An iterator pointing to the found element, or the end() iterator
              otherwise.

      @note This function is rather inefficient: Its complexity is linear in the
            list's length. Thus, this method should be used with care.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    std::list<std::reference_wrapper<CLASSNAME>>::const_iterator find##CLEARNAME( const CLASSNAME &o ) const; \
    \
    \
  private: \
    \
    /*! @brief m##CLEARNAME##s holds all stored %WIR CLEARNAME##s. */ \
    std::list<CLASSNAME> m##CLEARNAME##s; \
    \
    /*!
      @brief m##CLEARNAME##References holds (wrapped) references to all stored
             %WIR CLEARNAME##s.
    */ \
    std::list<std::reference_wrapper<CLASSNAME>> m##CLEARNAME##References; \
    \
    \
  PROTECTION:

#endif  // _WIR_LIST_API_H
