/*

   This header file belongs to the

            Hamburg University of Technology (TUHH)
              WCC Intermediate Representation Framework

   and is property of its respective copyright holder. It must neither be used
   nor published even in parts without explicit written permission.

   Copyright 2015 - 2022, Heiko Falk.

   Hamburg University of Technology (TUHH)
   Institute of Embedded Systems
   21071 Hamburg
   Germany

   http://www.tuhh.de/es/esd/research/wcc

*/

/*!
  @file wirinsertionapi.h
  @brief This file provides the API for managing %WIR objects that can be
         inserted into some other %WIR classes and thus have some kind of
         "parent" property.

  @author Heiko Falk <Heiko.Falk@tuhh.de>
*/


#ifndef _WIR_INSERTION_API_H
#define _WIR_INSERTION_API_H


//
// Preprocessor macros
//

/*!
  @brief Preprocessor macro WIR_INSERTION_DECL declares the %WIR insertion API.

  @param[in] CLASSNAME Specify here the name of some actual C++ %WIR class that
                       acts as parent. This macro assumes that the class
                       specified here is inherited from WIR_ID_API.
  @param[in] CLEARNAME Specify here some concise clear-text name of the parent
                       class name. This clear-text name will be used as suffix
                       of the method names generated by this macro.

  @author Heiko Falk <Heiko.Falk@tuhh.de>
*/
#define WIR_INSERTION_DECL( CLASSNAME, CLEARNAME ) \
  public: \
    \
    /*!
      @brief isInserted returns whether this object is inserted into some
             CLASSNAME##.

      @return true if the object is inserted, false otherwise.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    bool isInserted( void ) const; \
    \
    /*!
      @brief get##CLEARNAME returns the CLASSNAME to which this object is
             assigned.

      @return A reference to the assigned CLASSNAME.

      If this object has not been assigned to a CLASSNAME before, get##CLEARNAME
      will fail with an assertion.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    CLASSNAME &get##CLEARNAME( void ) const; \
    \
    \
  private: \
    \
    friend class CLASSNAME; \
    \
    /*!
      @brief onInsert is called whenever this object is added to a CLASSNAME##.

      @param[in] p A pointer to the CLASSNAME to which this object is added. If
                   no pointer is specified, this object is marked as not to be
                   assigned to any CLASSNAME at all.

      @author Heiko Falk <Heiko.Falk@tuhh.de>
    */ \
    void onInsert( CLASSNAME * = nullptr ); \
    \
    /*!
      @brief m##CLEARNAMEPointer points to that %WIR object to which this object
             belongs.
    */ \
    CLASSNAME *m##CLEARNAME##Pointer; \
    \
    \
  public:


/*!
  @brief Preprocessor macro WIR_INSERTION_IMPL implements the %WIR insertion
         API.

  @param[in] CLASSNAME Specify here the name of some actual C++ %WIR class that
                       acts as parent. This macro assumes that the class
                       specified here is inherited from WIR_ID_API.
  @param[in] CLEARNAME Specify here some concise clear-text name of the parent
                       class name. This clear-text name will be used as suffix
                       of the method names generated by this macro.
  @param[in] BASECLASS Specify here the name of the %WIR class that uses this
                       API.

  @author Heiko Falk <Heiko.Falk@tuhh.de>
*/
#define WIR_INSERTION_IMPL( CLASSNAME, CLEARNAME, BASECLASS ) \
  bool BASECLASS::isInserted( void ) const \
  { \
    DSTART( "bool "#BASECLASS"::isInserted() const" ); \
    \
    DACTION( \
      DOUT( "myID = " << getID() << "; m"#CLEARNAME" = " ); \
      if ( m##CLEARNAME##Pointer == nullptr ) \
        DOUT( "<nullptr>" << endl ); \
      else \
        DOUT( m##CLEARNAME##Pointer->getID() << endl ); ); \
    \
    return( m##CLEARNAME##Pointer != nullptr ); \
  }; \
  \
  \
  CLASSNAME &BASECLASS::get##CLEARNAME( void ) const \
  { \
    DSTART( #CLASSNAME"& "#BASECLASS"::get"#CLEARNAME"() const" ); \
    \
    DACTION( \
      DOUT( "myID = " << getID() << "; m"#CLEARNAME" = " ); \
      if ( m##CLEARNAME##Pointer == nullptr ) \
        DOUT( "<nullptr>" << endl ); \
      else \
        DOUT( m##CLEARNAME##Pointer->getID() << endl ); ); \
    \
    return( *m##CLEARNAME##Pointer ); \
  }; \
  \
  \
  void BASECLASS::onInsert( CLASSNAME *p ) \
  { \
    DSTART( "void "#BASECLASS"::onInsert("#CLASSNAME"*)" ); \
    \
    m##CLEARNAME##Pointer = p; \
    \
    DACTION( \
      DOUT( "myID = " << getID() << "; setting m"#CLEARNAME" = " ); \
      if ( m##CLEARNAME##Pointer == nullptr ) \
        DOUT( "<nullptr>" << endl ); \
      else \
        DOUT( m##CLEARNAME##Pointer->getID() << endl ); ); \
  };

#endif  // _WIR_INSERTION_API_H
