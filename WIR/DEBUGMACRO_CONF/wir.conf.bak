#
# WIR Core Library
#

WIR_AddressingModeParameter::WIR_AddressingModeParameter(const WIR_BaseProcessor::AddressingMode&)
WIR_AddressingModeParameter::WIR_AddressingModeParameter(const WIR_AddressingModeParameter&)
WIR_AddressingModeParameter::WIR_AddressingModeParameter(WIR_AddressingModeParameter&&)
virtual WIR_AddressingModeParameter::~WIR_AddressingModeParameter()
WIR_AddressingModeParameter& WIR_AddressingModeParameter::operator=(const WIR_AddressingModeParameter&)
WIR_AddressingModeParameter& WIR_AddressingModeParameter::operator=(WIR_AddressingModeParameter&&)
virtual WIR_ParameterType WIR_AddressingModeParameter::getType() const
void WIR_AddressingModeParameter::setAddressingMode(const WIR_BaseProcessor::AddressingMode&)
WIR_BaseProcessor::AddressingMode& WIR_AddressingModeParameter::getAddressingMode() const
ostream& operator<<(ostream&, const WIR_AddressingModeParameter&)
virtual WIR_Parameter* WIR_AddressingModeParameter::clone() const

WIR_AvailableDefinitions::WIR_AvailableDefinitions()
virtual WIR_AvailableDefinitions::~WIR_AvailableDefinitions()
virtual bool WIR_AvailableDefinitions::isUnique() const
void WIR_AvailableDefinitions::insertAvailableDefinition(const WIR_RegisterParameter&)
const WIR_RegisterParameterSet& WIR_AvailableDefinitions::getAvailableDefinitions() const
void WIR_AvailableDefinitions::insertAvailableInput(const WIR_PhysicalRegister&)
const WIR_PhysicalRegisterSet& WIR_AvailableDefinitions::getAvailableInputs() const

WIR_BaseContainer::WIR_BaseContainer()
WIR_BaseContainer::WIR_BaseContainer(const WIR_BaseContainer&)
WIR_BaseContainer::WIR_BaseContainer(WIR_BaseContainer&&)
virtual WIR_BaseContainer::~WIR_BaseContainer()
WIR_BaseContainer& WIR_BaseContainer::operator=(const WIR_BaseContainer&)
WIR_BaseContainer& WIR_BaseContainer::operator=(WIR_BaseContainer&&)
WIR_BaseContainer::Registrator::Registrator(WIR_id_t&)
void WIR_BaseContainer::Registrator::touch()
static void WIR_BaseContainer::registerNewContainerType(WIR_id_t&)

WIR_BaseImmediateParameter::WIR_BaseImmediateParameter(unsigned int)
WIR_BaseImmediateParameter::WIR_BaseImmediateParameter(const WIR_BaseImmediateParameter&)
WIR_BaseImmediateParameter::WIR_BaseImmediateParameter(WIR_BaseImmediateParameter&&)
virtual WIR_BaseImmediateParameter::~WIR_BaseImmediateParameter()
WIR_BaseImmediateParameter& WIR_BaseImmediateParameter::operator=(const WIR_BaseImmediateParameter&)
WIR_BaseImmediateParameter& WIR_BaseImmediateParameter::operator=(WIR_BaseImmediateParameter&&)
virtual WIR_ParameterType WIR_BaseImmediateParameter::getType() const
unsigned int WIR_BaseImmediateParameter::getBitWidth() const
bool WIR_BaseImmediateParameter::isUnsigned() const
ostream& operator<<(ostream&, const WIR_BaseImmediateParameter&)
WIR_BaseImmediateParameter::Registrator::Registrator(WIR_id_t&)
void WIR_BaseImmediateParameter::Registrator::touch()
static void WIR_BaseImmediateParameter::registerNewImmediateType(WIR_id_t&)

WIR_BaseProcessor::WIR_BaseProcessor()
WIR_BaseProcessor::WIR_BaseProcessor(const WIR_BaseProcessor&)
virtual WIR_BaseProcessor::~WIR_BaseProcessor()
virtual WIR_SystemComponentType WIR_BaseProcessor::getType() const
string WIR_BaseProcessor::getProcessorName() const
string WIR_BaseProcessor::getISAName() const
long long unsigned int WIR_BaseProcessor::getClockFrequency() const
float WIR_BaseProcessor::getVoltage() const
WIR_BaseProcessor::AddressingMode::AddressingMode(const string&)
virtual WIR_BaseProcessor::AddressingMode::~AddressingMode()
string WIR_BaseProcessor::AddressingMode::getName() const
virtual bool WIR_BaseProcessor::AddressingMode::isCompatible(const WIR_BaseProcessor::AddressingMode&, const WIR_BaseProcessor::OperationFormat&, const WIR_BaseProcessor::OpCode&) const
WIR_BaseProcessor::Condition::Condition(const string&)
string WIR_BaseProcessor::Condition::getName() const
WIR_BaseProcessor::OpCode::OpCode(const string&, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool)
virtual WIR_BaseProcessor::OpCode::~OpCode()
string WIR_BaseProcessor::OpCode::getName() const
virtual bool WIR_BaseProcessor::OpCode::isMemoryAccess(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isMemoryStore(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isMemoryLoad(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isMove(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isCall(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isIndirectCall(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isReturn(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isConditionalJump(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isUnconditionalJump(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isIndirectJump(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::isAsmDataDirective(const WIR_Operation&) const
virtual bool WIR_BaseProcessor::OpCode::hasSideEffects(const WIR_Operation&) const
WIR_BaseProcessor::RegisterType::RegisterType(const string&, const string&, const string&, const string&, unsigned int)
const string (& WIR_BaseProcessor::RegisterType::getPrefixes() const)[2]
const string (& WIR_BaseProcessor::RegisterType::getSuffixes() const)[2]
unsigned int WIR_BaseProcessor::RegisterType::getBitWidth() const
virtual bool WIR_BaseProcessor::RegisterType::isCompatible(const WIR_BaseProcessor::RegisterType&, const WIR_BaseRegister&, const WIR_BaseRegister&) const
WIR_BaseProcessor::OperationFormat::OperationFormat(unsigned int, const string&)
unsigned int WIR_BaseProcessor::OperationFormat::getBitWidth() const
unsigned int WIR_BaseProcessor::OperationFormat::getSize() const
string WIR_BaseProcessor::OperationFormat::getName() const
const vector<reference_wrapper<const WIR_PhysicalRegister> > WIR_BaseProcessor::getPhRegs() const
const vector<reference_wrapper<const WIR_PhysicalRegister> > WIR_BaseProcessor::getPhRegs(const WIR_BaseProcessor::RegisterType&) const
const WIR_SectionSet& WIR_BaseProcessor::getSections() const
WIR_SectionSet::const_iterator WIR_BaseProcessor::begin() const
WIR_SectionSet::const_iterator WIR_BaseProcessor::end() const
WIR_SectionSet::const_iterator WIR_BaseProcessor::findSection(const string&) const
WIR_Section& WIR_BaseProcessor::getTextSection() const
WIR_Section& WIR_BaseProcessor::getDataSection() const
WIR_Section& WIR_BaseProcessor::getBssSection() const
WIR_Section& WIR_BaseProcessor::getRODataSection() const
bool WIR_BaseProcessor::containsSection(const string&) const
WIR_BaseProcessor::Registrator::Registrator(WIR_id_t&)
void WIR_BaseProcessor::Registrator::touch()
void WIR_BaseProcessor::setProcessorName(string&&)
void WIR_BaseProcessor::setISAName(string&&)
void WIR_BaseProcessor::setClockFrequency(long long unsigned int)
void WIR_BaseProcessor::setVoltage(float)
virtual unsigned int WIR_BaseProcessor::getMaxDelay(unsigned int) const
static void WIR_BaseProcessor::registerNewProcessorType(WIR_id_t&)
void WIR_BaseProcessor::copyProcessor(const WIR_BaseProcessor&)
WIR_Section& WIR_BaseProcessor::insertSection(WIR_Section&&)
void WIR_BaseProcessor::clearSections()

WIR_BaseRegister::WIR_BaseRegister(const WIR_BaseProcessor::RegisterType&)
WIR_BaseRegister::WIR_BaseRegister(const WIR_BaseRegister&)
WIR_BaseRegister::WIR_BaseRegister(WIR_BaseRegister&&)
virtual WIR_BaseRegister::~WIR_BaseRegister()
WIR_BaseRegister& WIR_BaseRegister::operator=(const WIR_BaseRegister&)
WIR_BaseRegister& WIR_BaseRegister::operator=(WIR_BaseRegister&&)
WIR_BaseProcessor::RegisterType& WIR_BaseRegister::getType() const
unsigned int WIR_BaseRegister::getBitWidth() const
bool WIR_BaseRegister::isInserted() const
bool WIR_BaseRegister::isPhysical() const
string WIR_BaseRegister::getName() const
bool WIR_BaseRegister::isChild() const
bool WIR_BaseRegister::isChildOf(const WIR_BaseRegister&) const
bool WIR_BaseRegister::isHierarchical() const
WIR_BaseRegister& WIR_BaseRegister::getParent() const
WIR_BaseRegister& WIR_BaseRegister::getRoot() const
const vector<reference_wrapper<WIR_BaseRegister> > WIR_BaseRegister::getLeafs() const

WIR_BasicBlock::WIR_BasicBlock()
WIR_BasicBlock::WIR_BasicBlock(WIR_Instruction&&, Args&& ...)
WIR_BasicBlock::WIR_BasicBlock(const WIR_BasicBlock&)
WIR_BasicBlock::WIR_BasicBlock(WIR_BasicBlock&&)
virtual WIR_BasicBlock::~WIR_BasicBlock()
WIR_BasicBlock& WIR_BasicBlock::operator=(const WIR_BasicBlock&)
WIR_BasicBlock& WIR_BasicBlock::operator=(WIR_BasicBlock&&)
WIR_Instruction& WIR_BasicBlock::pushBackInstruction(const WIR_Instruction&)
WIR_Instruction& WIR_BasicBlock::pushBackInstruction(WIR_Instruction&&)
WIR_Instruction& WIR_BasicBlock::moveInstruction(WIR_Instruction&)
WIR_Instruction& WIR_BasicBlock::pushFrontInstruction(const WIR_Instruction&)
WIR_Instruction& WIR_BasicBlock::pushFrontInstruction(WIR_Instruction&&)
list<reference_wrapper<WIR_Instruction> >::iterator WIR_BasicBlock::insertInstruction(list<reference_wrapper<WIR_Instruction> >::const_iterator, const WIR_Instruction&)
list<reference_wrapper<WIR_Instruction> >::iterator WIR_BasicBlock::insertInstruction(list<reference_wrapper<WIR_Instruction> >::const_iterator, WIR_Instruction&&)
list<reference_wrapper<WIR_Instruction> >::iterator WIR_BasicBlock::replaceInstruction(list<reference_wrapper<WIR_Instruction> >::const_iterator, const WIR_Instruction&)
list<reference_wrapper<WIR_Instruction> >::iterator WIR_BasicBlock::replaceInstruction(list<reference_wrapper<WIR_Instruction> >::const_iterator, WIR_Instruction&&)
void WIR_BasicBlock::popBackInstruction()
void WIR_BasicBlock::popFrontInstruction()
list<reference_wrapper<WIR_Instruction> >::iterator WIR_BasicBlock::eraseInstruction(list<reference_wrapper<WIR_Instruction> >::const_iterator)
void WIR_BasicBlock::clearInstructions()
const list<reference_wrapper<WIR_Instruction> >& WIR_BasicBlock::getInstructions() const
list<reference_wrapper<WIR_Instruction> >::const_iterator WIR_BasicBlock::begin() const
list<reference_wrapper<WIR_Instruction> >::const_iterator WIR_BasicBlock::end() const
list<reference_wrapper<WIR_Instruction> >::const_reverse_iterator WIR_BasicBlock::rbegin() const
list<reference_wrapper<WIR_Instruction> >::const_reverse_iterator WIR_BasicBlock::rend() const
bool WIR_BasicBlock::containsInstruction(WIR_id_t) const
bool WIR_BasicBlock::containsInstruction(const WIR_Instruction&) const
list<reference_wrapper<WIR_Instruction> >::const_iterator WIR_BasicBlock::findInstruction(WIR_id_t) const
list<reference_wrapper<WIR_Instruction> >::const_iterator WIR_BasicBlock::findInstruction(const WIR_Instruction&) const
bool WIR_BasicBlock::isInserted() const
WIR_Function& WIR_BasicBlock::getFunction() const
void WIR_BasicBlock::onInsert(WIR_Function*)
string WIR_BasicBlock::getName() const
long long unsigned int WIR_BasicBlock::getSize() const
WIR_BasicBlockSet WIR_BasicBlock::getSuccessors() const
WIR_BasicBlockSet WIR_BasicBlock::getPredecessors() const
WIR_VirtualRegisterSet WIR_BasicBlock::getVREGs() const
void WIR_BasicBlock::setDontOptimize(bool)
bool WIR_BasicBlock::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_BasicBlock&)
void WIR_BasicBlock::addInstructions(WIR_Instruction&&, Args&& ...)
void WIR_BasicBlock::addInstructions() const
void WIR_BasicBlock::copyBasicBlock(const WIR_BasicBlock&)
void WIR_BasicBlock::checkDontOptimize() const
void WIR_BasicBlock::checkVREGs(const WIR_Instruction&) const
void WIR_BasicBlock::invalidateSymbols() const

WIR_BitValues::WIR_BitValues()
WIR_BitValues::WIR_BitValues(const WIR_BitValues&)
virtual WIR_BitValues::~WIR_BitValues()
virtual bool WIR_BitValues::isUnique() const
void WIR_BitValues::insertInValues(WIR_Parameter&, WIR_UpDownValue&&, WIR_UpDownValue&&)
void WIR_BitValues::eraseInValues(const WIR_Parameter&)
void WIR_BitValues::eraseInValues(list<WIR_BitValues::edge>::iterator)
void WIR_BitValues::clearInValues()
list<WIR_BitValues::edge>& WIR_BitValues::getInValues()
list<WIR_BitValues::edge>::iterator WIR_BitValues::findInValues(const WIR_Parameter&)
void WIR_BitValues::insertOutValues(WIR_Parameter&, WIR_UpDownValue&&, WIR_UpDownValue&&)
void WIR_BitValues::eraseOutValues(const WIR_Parameter&)
void WIR_BitValues::clearOutValues()
list<WIR_BitValues::edge>& WIR_BitValues::getOutValues()
list<WIR_BitValues::edge>::iterator WIR_BitValues::findOutValues(const WIR_Parameter&)

WIR_Break::WIR_Break()
virtual WIR_Break::~WIR_Break()
virtual bool WIR_Break::isUnique() const

WIR_Bus::WIR_Bus(const WIR_Bus&)
virtual WIR_Bus::~WIR_Bus()
virtual WIR_SystemComponentType WIR_Bus::getType() const
const WIR_BusArbitration& WIR_Bus::getBusArbitration() const
WIR_BusArbitrationType WIR_Bus::getArbitrationType() const
virtual unsigned int WIR_Bus::getMaxDelay(unsigned int) const
WIR_Bus::WIR_Bus(string&&, const WIR_BusArbitration&)
virtual WIR_Bus* WIR_Bus::clone() const
void WIR_Bus::setMaxAccessTime(unsigned int)

virtual WIR_BusArbitration::~WIR_BusArbitration()

WIR_Cache::WIR_Cache(const WIR_Cache&)
virtual WIR_Cache::~WIR_Cache()
virtual WIR_MemoryType WIR_Cache::getType() const
bool WIR_Cache::isEnabled() const
bool WIR_Cache::isShared() const
bool WIR_Cache::isSizedInPercent() const
WIR_Cache::CacheLevel WIR_Cache::getLevel() const
WIR_Cache::CacheType WIR_Cache::getCacheType() const
unsigned int WIR_Cache::getAssociativity() const
unsigned int WIR_Cache::getNumberOfSets() const
unsigned int WIR_Cache::getSize() const
unsigned int WIR_Cache::getLineSize() const
bool WIR_Cache::isWriteThrough() const
bool WIR_Cache::isWriteAllocate() const
int WIR_Cache::getOffsetBits() const
int WIR_Cache::getIndexBits() const
int WIR_Cache::getTagBits() const
unsigned int WIR_Cache::getHitDelay() const
unsigned int WIR_Cache::getMissDelay() const
virtual unsigned int WIR_Cache::getMaxDelay(unsigned int) const
long unsigned int WIR_Cache::getBusWidth() const
virtual bool WIR_Cache::isActiveInRange(const WIR_AddressRange&) const
WIR_Cache::WIR_Cache(string&&, unsigned int, unsigned int, unsigned int)
virtual WIR_Cache* WIR_Cache::clone() const
void WIR_Cache::setEnabled(bool)
void WIR_Cache::setShared(bool)
void WIR_Cache::setSizeInPercent(unsigned int)
void WIR_Cache::setLevel(WIR_Cache::CacheLevel)
void WIR_Cache::setCacheType(WIR_Cache::CacheType)
void WIR_Cache::setWriteThrough(bool)
void WIR_Cache::setWriteAllocate(bool)
void WIR_Cache::setHitDelay(unsigned int)
void WIR_Cache::setMissDelay(unsigned int)
void WIR_Cache::setBusWidth(long unsigned int)
void WIR_Cache::checkParameters()

WIR_Comment::WIR_Comment(const string&)
WIR_Comment::WIR_Comment(string&&)
WIR_Comment::WIR_Comment(const WIR_Comment&)
WIR_Comment::WIR_Comment(WIR_Comment&&)
virtual WIR_Comment::~WIR_Comment()
WIR_Comment& WIR_Comment::operator=(const WIR_Comment&)
WIR_Comment& WIR_Comment::operator=(WIR_Comment&&)
virtual bool WIR_Comment::isUnique() const
void WIR_Comment::setText(const string&)
void WIR_Comment::setText(string&&)
string WIR_Comment::getText() const
ostream& operator<<(ostream&, const WIR_Comment&)

WIR_CompilationUnit::WIR_CompilationUnit()
WIR_CompilationUnit::WIR_CompilationUnit(const WIR_CompilationUnit&)
WIR_CompilationUnit::WIR_CompilationUnit(WIR_CompilationUnit&&)
virtual WIR_CompilationUnit::~WIR_CompilationUnit()
WIR_CompilationUnit& WIR_CompilationUnit::operator=(const WIR_CompilationUnit&)
WIR_CompilationUnit& WIR_CompilationUnit::operator=(WIR_CompilationUnit&&)
WIR_Function& WIR_CompilationUnit::pushBackFunction(const WIR_Function&)
WIR_Function& WIR_CompilationUnit::pushBackFunction(WIR_Function&&)
WIR_Function& WIR_CompilationUnit::pushFrontFunction(const WIR_Function&)
WIR_Function& WIR_CompilationUnit::pushFrontFunction(WIR_Function&&)
list<reference_wrapper<WIR_Function> >::iterator WIR_CompilationUnit::insertFunction(list<reference_wrapper<WIR_Function> >::const_iterator, const WIR_Function&)
list<reference_wrapper<WIR_Function> >::iterator WIR_CompilationUnit::insertFunction(list<reference_wrapper<WIR_Function> >::const_iterator, WIR_Function&&)
list<reference_wrapper<WIR_Function> >::iterator WIR_CompilationUnit::replaceFunction(list<reference_wrapper<WIR_Function> >::const_iterator, const WIR_Function&)
list<reference_wrapper<WIR_Function> >::iterator WIR_CompilationUnit::replaceFunction(list<reference_wrapper<WIR_Function> >::const_iterator, WIR_Function&&)
void WIR_CompilationUnit::popBackFunction()
void WIR_CompilationUnit::popFrontFunction()
list<reference_wrapper<WIR_Function> >::iterator WIR_CompilationUnit::eraseFunction(list<reference_wrapper<WIR_Function> >::const_iterator)
void WIR_CompilationUnit::clearFunctions()
const list<reference_wrapper<WIR_Function> >& WIR_CompilationUnit::getFunctions() const
list<reference_wrapper<WIR_Function> >::const_iterator WIR_CompilationUnit::begin() const
list<reference_wrapper<WIR_Function> >::const_iterator WIR_CompilationUnit::end() const
bool WIR_CompilationUnit::containsFunction(WIR_id_t) const
bool WIR_CompilationUnit::containsFunction(const WIR_Function&) const
list<reference_wrapper<WIR_Function> >::const_iterator WIR_CompilationUnit::findFunction(WIR_id_t) const
list<reference_wrapper<WIR_Function> >::const_iterator WIR_CompilationUnit::findFunction(const WIR_Function&) const
bool WIR_CompilationUnit::isInserted() const
WIR_System& WIR_CompilationUnit::getSystem() const
WIR_Data& WIR_CompilationUnit::pushBackData(const WIR_Data&)
WIR_Data& WIR_CompilationUnit::pushBackData(WIR_Data&&)
WIR_Data& WIR_CompilationUnit::pushFrontData(WIR_Data&&)
list<reference_wrapper<WIR_Data> >::iterator WIR_CompilationUnit::insertData(list<reference_wrapper<WIR_Data> >::const_iterator, WIR_Data&&)
list<reference_wrapper<WIR_Data> >::iterator WIR_CompilationUnit::replaceData(list<reference_wrapper<WIR_Data> >::const_iterator, WIR_Data&&)
void WIR_CompilationUnit::popBackData()
void WIR_CompilationUnit::popFrontData()
list<reference_wrapper<WIR_Data> >::iterator WIR_CompilationUnit::eraseData(list<reference_wrapper<WIR_Data> >::const_iterator)
void WIR_CompilationUnit::clearData()
const list<reference_wrapper<WIR_Data> >& WIR_CompilationUnit::getData() const
void WIR_CompilationUnit::setDontOptimize(bool)
bool WIR_CompilationUnit::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_CompilationUnit&)
void WIR_CompilationUnit::onInsert(WIR_System*)
void WIR_CompilationUnit::copyCompilationUnit(const WIR_CompilationUnit&)
void WIR_CompilationUnit::checkDontOptimize() const
void WIR_CompilationUnit::insertSymbols(const WIR_Function&)
void WIR_CompilationUnit::insertSymbol(const WIR_Data&)

WIR_ConditionFieldParameter::WIR_ConditionFieldParameter(const WIR_BaseProcessor::Condition&)
WIR_ConditionFieldParameter::WIR_ConditionFieldParameter(const WIR_ConditionFieldParameter&)
WIR_ConditionFieldParameter::WIR_ConditionFieldParameter(WIR_ConditionFieldParameter&&)
virtual WIR_ConditionFieldParameter::~WIR_ConditionFieldParameter()
WIR_ConditionFieldParameter& WIR_ConditionFieldParameter::operator=(const WIR_ConditionFieldParameter&)
WIR_ConditionFieldParameter& WIR_ConditionFieldParameter::operator=(WIR_ConditionFieldParameter&&)
virtual WIR_ParameterType WIR_ConditionFieldParameter::getType() const
void WIR_ConditionFieldParameter::setCondition(const WIR_BaseProcessor::Condition&)
WIR_BaseProcessor::Condition& WIR_ConditionFieldParameter::getCondition() const
ostream& operator<<(ostream&, const WIR_ConditionFieldParameter&)
virtual WIR_Parameter* WIR_ConditionFieldParameter::clone() const

WIR_Container<DerivedContainerClass>::WIR_Container()
WIR_Container<DerivedContainerClass>::WIR_Container(const WIR_Container<DerivedContainerClass>&)
WIR_Container<DerivedContainerClass>::WIR_Container(WIR_Container<DerivedContainerClass>&&)
WIR_Container<DerivedContainerClass>::~WIR_Container()
WIR_Container<DerivedContainerClass>& WIR_Container<DerivedContainerClass>::operator=(const WIR_Container<DerivedContainerClass>&)
WIR_Container<DerivedContainerClass>& WIR_Container<DerivedContainerClass>::operator=(WIR_Container<DerivedContainerClass>&&)
static WIR_id_t WIR_Container<DerivedContainerClass>::getContainerTypeID()
WIR_id_t WIR_Container<DerivedContainerClass>::getContainerType() const
WIR_BaseContainer* WIR_Container<DerivedContainerClass>::clone()

WIR_ControlTree::WIR_ControlTree(WIR_BasicBlockTreeNode&)
virtual WIR_ControlTree::~WIR_ControlTree()
virtual bool WIR_ControlTree::isUnique() const
WIR_BasicBlockTreeNode& WIR_ControlTree::getBasicBlockTreeNode() const
WIR_ControlTree::WIR_ControlTree()
void WIR_ControlTree::pushBackRootNode(WIR_ControlTreeNode&)

WIR_Data::WIR_Data(const string&)
WIR_Data::WIR_Data(string&&)
WIR_Data::WIR_Data(const WIR_Data&)
WIR_Data::WIR_Data(WIR_Data&&)
virtual WIR_Data::~WIR_Data()
string WIR_Data::getName() const
void WIR_Data::setSize(size_t)
size_t WIR_Data::getSize() const
bool WIR_Data::isInitialized() const
WIR_DataInit& WIR_Data::pushBackInitData(const WIR_DataInit&)
WIR_DataInit& WIR_Data::pushBackInitData(WIR_DataInit&&)
void WIR_Data::clearInitData()
const list<reference_wrapper<WIR_DataInit> >& WIR_Data::getInitData() const
list<reference_wrapper<WIR_DataInit> >::const_iterator WIR_Data::begin() const
void WIR_Data::foldSpaces()
void WIR_Data::setDontOptimize(bool)
bool WIR_Data::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_Data&)
void WIR_Data::onInsert(WIR_System*)
void WIR_Data::checkDontOptimize() const

WIR_DataAccess::WIR_DataAccess(WIR_DataSet&&)
virtual WIR_DataAccess::~WIR_DataAccess()
virtual bool WIR_DataAccess::isUnique() const
const WIR_DataSet& WIR_DataAccess::getData() const

WIR_DataInit::WIR_DataInit(WIR_DataInitType, const string&, const Args& ...)
WIR_DataInit::WIR_DataInit(size_t)
WIR_DataInit::WIR_DataInit(const WIR_DataInit&)
WIR_DataInit::WIR_DataInit(WIR_DataInit&&)
WIR_DataInit::~WIR_DataInit()
WIR_DataInitType WIR_DataInit::getType() const
const list<string>& WIR_DataInit::getValues() const
size_t WIR_DataInit::getSpace() const
static string WIR_DataInit::escapeString(const string&)
void WIR_DataInit::addInitializers(const string&, const Args& ...)
void WIR_DataInit::addInitializers() const

WIR_Domination::WIR_Domination()
virtual WIR_Domination::~WIR_Domination()
virtual bool WIR_Domination::isUnique() const
void WIR_Domination::insertDominator(const WIR_BasicBlock&)
const WIR_BasicBlockSet& WIR_Domination::getDominatorBlocks() const

WIR_DUUDChain::WIR_DUUDChain()
virtual WIR_DUUDChain::~WIR_DUUDChain()
virtual bool WIR_DUUDChain::isUnique() const
void WIR_DUUDChain::insertDUChain(const WIR_RegisterParameter&)
const WIR_RegisterParameterSet& WIR_DUUDChain::getDUChains() const
void WIR_DUUDChain::insertUDChain(const WIR_RegisterParameter&)
const WIR_RegisterParameterSet& WIR_DUUDChain::getUDChains() const
void WIR_DUUDChain::insertUDInput(const WIR_PhysicalRegister&)
const WIR_PhysicalRegisterSet& WIR_DUUDChain::getUDInputs() const

WIR_EntryPoint::WIR_EntryPoint()
WIR_EntryPoint::WIR_EntryPoint(WIR_Function&, const map<string, string >&)
WIR_EntryPoint::WIR_EntryPoint(const WIR_EntryPoint&)
virtual WIR_EntryPoint::~WIR_EntryPoint()
virtual WIR_FlowFactType WIR_EntryPoint::getType() const
ostream& WIR::operator<<(ostream&, const WIR_EntryPoint&)
WIR_Function& WIR_EntryPoint::getFunction() const
virtual void WIR_EntryPoint::onInsert(WIR_System*)
virtual WIR_FlowFact* WIR_EntryPoint::clone() const

WIR_FileInfo::WIR_FileInfo(const string&, long long unsigned int)
WIR_FileInfo::WIR_FileInfo(string&&, long long unsigned int)
WIR_FileInfo::WIR_FileInfo(const WIR_FileInfo&)
virtual WIR_FileInfo::~WIR_FileInfo()
virtual bool WIR_FileInfo::isUnique() const
string WIR_FileInfo::getFileName() const
long long unsigned int WIR_FileInfo::getLineNumber() const
ostream& operator<<(ostream&, const WIR_FileInfo&)

WIR_FixedPriorityBusArbitration::WIR_FixedPriorityBusArbitration(unsigned int)
virtual WIR_FixedPriorityBusArbitration::~WIR_FixedPriorityBusArbitration()
const map<WIR_id_t, unsigned int>& WIR_FixedPriorityBusArbitration::getPriorities() const
unsigned int WIR_FixedPriorityBusArbitration::getNumberOfCores() const
virtual unsigned int WIR_FixedPriorityBusArbitration::getNumberOfArbitratedCores() const
const vector<WIR_id_t>& WIR_FixedPriorityBusArbitration::getCoreOrder() const
virtual WIR_FixedPriorityBusArbitration* WIR_FixedPriorityBusArbitration::clone() const
void WIR_FixedPriorityBusArbitration::setPriority(const WIR_BaseProcessor&, ::WIR_FixedPriorityBusArbitration::Priority)

WIR_FlowFact::WIR_FlowFact()
WIR_FlowFact::WIR_FlowFact(const WIR_FlowFact&)
virtual WIR_FlowFact::~WIR_FlowFact()
WIR_FlowFact& WIR_FlowFact::operator=(const WIR_FlowFact&)
ostream& operator<<(ostream&, const WIR_FlowFact&)
bool WIR_FlowFact::isInserted() const
WIR_System& WIR_FlowFact::getSystem() const
bool WIR_FlowFact::isSignificant() const
void WIR_FlowFact::addReference(const WIR_BasicBlock&)
void WIR_FlowFact::eraseReference(const WIR_BasicBlock&)
void WIR_FlowFact::onInsert(WIR_System*)

WIR_FlowFactRef::WIR_FlowFactRef(const WIR_FlowFactRef&)
virtual WIR_FlowFactRef::~WIR_FlowFactRef()
WIR_FlowFactRef& WIR_FlowFactRef::operator=(const WIR_FlowFactRef&)
virtual bool WIR_FlowFactRef::isUnique() const
static WIR_FlowFactRef& WIR_FlowFactRef::get(WIR_BasicBlock&)
const list<reference_wrapper<WIR_FlowFact> >& WIR_FlowFactRef::getFlowFacts() const
const list<reference_wrapper<DerivedFlowFactClass> > WIR_FlowFactRef::getFlowFacts() const
ostream& operator<<(ostream&, const WIR_FlowFactRef&)
WIR_FlowFactRef::WIR_FlowFactRef(WIR_BasicBlock&)
void WIR_FlowFactRef::pushBackFlowFact(const WIR_FlowFact&)
void WIR_FlowFactRef::eraseFlowFact(WIR_FlowFact&)

WIR_FlowFactUpdater::replaceBasicBlock(WIR::WIR_BasicBlock&, WIR::WIR_BasicBlock&)
WIR_FlowFactUpdater::eraseUnreachableBasicBlock(WIR::WIR_BasicBlock&)
WIR_FlowFactUpdater::eraseLoopBound(WIR::WIR_BasicBlock&)

WIR_FlowRestriction::WIR_FlowRestriction()
WIR_FlowRestriction::WIR_FlowRestriction(const WIR_FlowRestriction&)
WIR_FlowRestriction::WIR_FlowRestriction(const list<pair<int, reference_wrapper<const WIR_BasicBlock> > >&, const list<pair<int, reference_wrapper<const WIR_BasicBlock> > >&)
WIR_FlowRestriction::WIR_FlowRestriction(list<pair<int, reference_wrapper<const WIR_BasicBlock> > >&&, list<pair<int, reference_wrapper<const WIR_BasicBlock> > >&&)
virtual WIR_FlowRestriction::~WIR_FlowRestriction()
WIR_FlowRestriction& WIR_FlowRestriction::operator=(const WIR_FlowRestriction&)
virtual WIR_FlowFactType WIR_FlowRestriction::getType() const
ostream& operator<<(ostream&, const WIR_FlowRestriction&)
void WIR_FlowRestriction::addToLeq(int, const WIR_BasicBlock&)
void WIR_FlowRestriction::addToGeq(int, const WIR_BasicBlock&)
int WIR_FlowRestriction::eraseSummand(const WIR_BasicBlock&)
void WIR_FlowRestriction::replaceSummand(const WIR_BasicBlock&, const WIR_BasicBlock&)
const list<pair<int, reference_wrapper<const WIR_BasicBlock> > >& WIR_FlowRestriction::getLeq() const
const list<pair<int, reference_wrapper<const WIR_BasicBlock> > >& WIR_FlowRestriction::getGeq() const
bool WIR_FlowRestriction::isPartOfLeq(const WIR_BasicBlock&) const
bool WIR_FlowRestriction::isPartOfGeq(const WIR_BasicBlock&) const
bool WIR_FlowRestriction::isPartOfFlowFact(const WIR_BasicBlock&) const
virtual bool WIR_FlowRestriction::isSignificant() const
bool WIR_FlowRestriction::isEqual(const WIR_FlowRestriction&) const
virtual void WIR_FlowRestriction::reorganize(const map<long long unsigned int, WIR_BasicBlock*>&)
virtual void WIR_FlowRestriction::onInsert(WIR_System*)
virtual WIR_FlowFact* WIR_FlowRestriction::clone() const

WIR_Function::WIR_Function(const string&)
WIR_Function::WIR_Function(string&&)
WIR_Function::WIR_Function(const WIR_Function&)
WIR_Function::WIR_Function(WIR_Function&&)
virtual WIR_Function::~WIR_Function()
WIR_Function& WIR_Function::operator=(const WIR_Function&)
WIR_Function& WIR_Function::operator=(WIR_Function&&)
WIR_BasicBlock& WIR_Function::pushBackBasicBlock(const WIR_BasicBlock&)
WIR_BasicBlock& WIR_Function::pushBackBasicBlock(WIR_BasicBlock&&)
WIR_BasicBlock& WIR_Function::pushFrontBasicBlock(const WIR_BasicBlock&)
WIR_BasicBlock& WIR_Function::pushFrontBasicBlock(WIR_BasicBlock&&)
list<reference_wrapper<WIR_BasicBlock> >::iterator WIR_Function::insertBasicBlock(list<reference_wrapper<WIR_BasicBlock> >::const_iterator, const WIR_BasicBlock&)
list<reference_wrapper<WIR_BasicBlock> >::iterator WIR_Function::insertBasicBlock(list<reference_wrapper<WIR_BasicBlock> >::const_iterator, WIR_BasicBlock&&)
list<reference_wrapper<WIR_BasicBlock> >::iterator WIR_Function::replaceBasicBlock(list<reference_wrapper<WIR_BasicBlock> >::const_iterator, const WIR_BasicBlock&)
list<reference_wrapper<WIR_BasicBlock> >::iterator WIR_Function::replaceBasicBlock(list<reference_wrapper<WIR_BasicBlock> >::const_iterator, WIR_BasicBlock&&)
void WIR_Function::popBackBasicBlock()
void WIR_Function::popFrontBasicBlock()
list<reference_wrapper<WIR_BasicBlock> >::iterator WIR_Function::eraseBasicBlock(list<reference_wrapper<WIR_BasicBlock> >::const_iterator)
void WIR_Function::clearBasicBlocks()
const list<reference_wrapper<WIR_BasicBlock> >& WIR_Function::getBasicBlocks() const
list<reference_wrapper<WIR_BasicBlock> >::const_iterator WIR_Function::begin() const
list<reference_wrapper<WIR_BasicBlock> >::const_iterator WIR_Function::end() const
list<reference_wrapper<WIR_BasicBlock> >::const_reverse_iterator WIR_Function::rbegin() const
list<reference_wrapper<WIR_BasicBlock> >::const_reverse_iterator WIR_Function::rend() const
bool WIR_Function::containsBasicBlock(WIR_id_t) const
bool WIR_Function::containsBasicBlock(const WIR_BasicBlock&) const
list<reference_wrapper<WIR_BasicBlock> >::const_iterator WIR_Function::findBasicBlock(WIR_id_t) const
list<reference_wrapper<WIR_BasicBlock> >::const_iterator WIR_Function::findBasicBlock(const WIR_BasicBlock&) const
WIR_VirtualRegister& WIR_Function::pushBackVirtualRegister(const WIR_VirtualRegister&)
WIR_VirtualRegister& WIR_Function::pushBackVirtualRegister(WIR_VirtualRegister&&)
WIR_VirtualRegister& WIR_Function::pushBackVirtualRegister(WIR_VirtualRegister*)
WIR_VirtualRegister& WIR_Function::pushFrontVirtualRegister(const WIR_VirtualRegister&)
WIR_VirtualRegister& WIR_Function::pushFrontVirtualRegister(WIR_VirtualRegister&&)
list<reference_wrapper<WIR_VirtualRegister> >::iterator WIR_Function::insertVirtualRegister(list<reference_wrapper<WIR_VirtualRegister> >::const_iterator, const WIR_VirtualRegister&)
list<reference_wrapper<WIR_VirtualRegister> >::iterator WIR_Function::insertVirtualRegister(list<reference_wrapper<WIR_VirtualRegister> >::const_iterator, WIR_VirtualRegister&&)
list<reference_wrapper<WIR_VirtualRegister> >::iterator WIR_Function::replaceVirtualRegister(list<reference_wrapper<WIR_VirtualRegister> >::const_iterator, const WIR_VirtualRegister&)
list<reference_wrapper<WIR_VirtualRegister> >::iterator WIR_Function::replaceVirtualRegister(list<reference_wrapper<WIR_VirtualRegister> >::const_iterator, WIR_VirtualRegister&&)
void WIR_Function::popBackVirtualRegister()
void WIR_Function::popFrontVirtualRegister()
list<reference_wrapper<WIR_VirtualRegister> >::iterator WIR_Function::eraseVirtualRegister(list<reference_wrapper<WIR_VirtualRegister> >::const_iterator)
void WIR_Function::clearVirtualRegisters()
const list<reference_wrapper<WIR_VirtualRegister> >& WIR_Function::getVirtualRegisters() const
bool WIR_Function::containsVirtualRegister(WIR_id_t) const
bool WIR_Function::containsVirtualRegister(const WIR_VirtualRegister&) const
list<reference_wrapper<WIR_VirtualRegister> >::const_iterator WIR_Function::findVirtualRegister(WIR_id_t) const
list<reference_wrapper<WIR_VirtualRegister> >::const_iterator WIR_Function::findVirtualRegister(const WIR_VirtualRegister&) const
bool WIR_Function::isInserted() const
WIR_CompilationUnit& WIR_Function::getCompilationUnit() const
void WIR_Function::setName(string&&)
string WIR_Function::getName() const
long long unsigned int WIR_Function::getSize() const
void WIR_Function::insertPrecolor(const WIR_VirtualRegister&, const WIR_PhysicalRegister&)
void WIR_Function::erasePrecolor(const WIR_VirtualRegister&)
void WIR_Function::clearPrecolors()
bool WIR_Function::containsPrecolor(const WIR_VirtualRegister&) const
WIR_PhysicalRegister& WIR_Function::findPrecolor(const WIR_VirtualRegister&) const
void WIR_Function::insertInterference(const WIR_VirtualRegister&, const WIR_PhysicalRegister&)
bool WIR_Function::interfere(const WIR_VirtualRegister&, const WIR_PhysicalRegister&) const
WIR_PhysicalRegisterSet WIR_Function::findInterferences(const WIR_VirtualRegister&) const
void WIR_Function::setFrameSize(int)
int WIR_Function::getFrameSize() const
void WIR_Function::addFunctionInput(const WIR_PhysicalRegister&)
const WIR_PhysicalRegisterSet& WIR_Function::getFunctionInputs() const
WIR_VirtualRegisterSet WIR_Function::getVREGs() const
void WIR_Function::setDontOptimize(bool)
bool WIR_Function::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_Function&)
void WIR_Function::copyFunction(const WIR_Function&)
void WIR_Function::checkDontOptimize() const
void WIR_Function::checkVREGs(const WIR_BasicBlock&) const
void WIR_Function::onInsert(WIR_CompilationUnit*)
void WIR_Function::insertSymbol(const WIR_BasicBlock&)

WIR_GenericImmediateParameter<DerivedClass, Signed>::WIR_GenericImmediateParameter(unsigned int)
WIR_GenericImmediateParameter<DerivedClass, Signed>::WIR_GenericImmediateParameter(const WIR_GenericImmediateParameter<DerivedClass, Signed>&)
WIR_GenericImmediateParameter<DerivedClass, Signed>::WIR_GenericImmediateParameter(WIR_GenericImmediateParameter<DerivedClass, Signed>&&)
WIR_GenericImmediateParameter<DerivedClass, Signed>::~WIR_GenericImmediateParameter()
WIR_GenericImmediateParameter<DerivedClass, Signed>& WIR_GenericImmediateParameter<DerivedClass, Signed>::operator=(const WIR_GenericImmediateParameter<DerivedClass, Signed>&)
WIR_GenericImmediateParameter<DerivedClass, Signed>& WIR_GenericImmediateParameter<DerivedClass, Signed>::operator=(WIR_GenericImmediateParameter<DerivedClass, Signed>&&)
bool WIR_GenericImmediateParameter<DerivedClass, Signed>::isSigned() const

WIR_GenericRegister<DerivedRegisterClass, Virtual>::WIR_GenericRegister(const WIR_BaseProcessor::RegisterType&)
WIR_GenericRegister<DerivedRegisterClass, Virtual>::WIR_GenericRegister(const WIR_GenericRegister<DerivedRegisterClass, Virtual>&)
WIR_GenericRegister<DerivedRegisterClass, Virtual>::WIR_GenericRegister(WIR_GenericRegister<DerivedRegisterClass, Virtual>&&)
WIR_GenericRegister<DerivedRegisterClass, Virtual>::~WIR_GenericRegister()
WIR_GenericRegister<DerivedRegisterClass, Virtual>& WIR_GenericRegister<DerivedRegisterClass, Virtual>::operator=(const WIR_GenericRegister<DerivedRegisterClass, Virtual>&)
WIR_GenericRegister<DerivedRegisterClass, Virtual>& WIR_GenericRegister<DerivedRegisterClass, Virtual>::operator=(WIR_GenericRegister<DerivedRegisterClass, Virtual>&&)
bool WIR_GenericRegister<DerivedRegisterClass, Virtual>::isVirtual() const
const list<reference_wrapper<DerivedRegisterClass> >& WIR_GenericRegister<DerivedRegisterClass, Virtual>::getChilds() const
typename list<reference_wrapper<DerivedRegisterClass> >::const_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::begin() const
typename list<reference_wrapper<DerivedRegisterClass> >::const_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::end() const
typename list<reference_wrapper<DerivedRegisterClass> >::const_reverse_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::rbegin() const
typename list<reference_wrapper<DerivedRegisterClass> >::const_reverse_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::rend() const
bool WIR_GenericRegister<DerivedRegisterClass, Virtual>::containsChild(WIR_id_t) const
bool WIR_GenericRegister<DerivedRegisterClass, Virtual>::containsChild(const DerivedRegisterClass&) const
typename list<reference_wrapper<DerivedRegisterClass> >::const_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::findChild(WIR_id_t) const
typename list<reference_wrapper<DerivedRegisterClass> >::const_iterator WIR_GenericRegister<DerivedRegisterClass, Virtual>::findChild(const DerivedRegisterClass&) const
DerivedRegisterClass& WIR_GenericRegister<DerivedRegisterClass, Virtual>::getParent() const
DerivedRegisterClass& WIR_GenericRegister<DerivedRegisterClass, Virtual>::getRoot() const
bool WIR_GenericRegister<DerivedRegisterClass, Virtual>::hasChilds() const
const vector<reference_wrapper<DerivedRegisterClass> > WIR_GenericRegister<DerivedRegisterClass, Virtual>::getLeafs() const

WIR_ImmediateDomination::WIR_ImmediateDomination()
virtual WIR_ImmediateDomination::~WIR_ImmediateDomination()
virtual bool WIR_ImmediateDomination::isUnique() const
void WIR_ImmediateDomination::insertImmediateDominator(WIR_BasicBlock&)
WIR_BasicBlock& WIR_ImmediateDomination::getImmediateDominator() const

WIR_ImmediateParameter<DerivedClass, true>::WIR_ImmediateParameter(long long int, unsigned int)
WIR_ImmediateParameter<DerivedClass, true>::WIR_ImmediateParameter(const WIR_ImmediateParameter<DerivedClass, true>&)
WIR_ImmediateParameter<DerivedClass, true>::WIR_ImmediateParameter(WIR_ImmediateParameter<DerivedClass, true>&&)
WIR_ImmediateParameter<DerivedClass, true>::~WIR_ImmediateParameter()
DerivedClass& WIR_ImmediateParameter<DerivedClass, true>::operator=(const DerivedClass&)
DerivedClass& WIR_ImmediateParameter<DerivedClass, true>::operator=(DerivedClass&&)
void WIR_ImmediateParameter<DerivedClass, true>::setValue(long long int)
long long int WIR_ImmediateParameter<DerivedClass, true>::getValue() const
long long int WIR_ImmediateParameter<DerivedClass, true>::getSignedValue() const
static long long int WIR_ImmediateParameter<DerivedClass, true>::getMinValue(unsigned int)
static long long int WIR_ImmediateParameter<DerivedClass, true>::getMaxValue(unsigned int)
string WIR_ImmediateParameter<DerivedClass, true>::getValueString() const
WIR_ImmediateParameter<DerivedClass, false>::WIR_ImmediateParameter(long long unsigned int, unsigned int)
WIR_ImmediateParameter<DerivedClass, false>::WIR_ImmediateParameter(const WIR_ImmediateParameter<DerivedClass, false>&)
WIR_ImmediateParameter<DerivedClass, false>::WIR_ImmediateParameter(WIR_ImmediateParameter<DerivedClass, false>&&)
WIR_ImmediateParameter<DerivedClass, false>::~WIR_ImmediateParameter()
DerivedClass& WIR_ImmediateParameter<DerivedClass, false>::operator=(const DerivedClass&)
DerivedClass& WIR_ImmediateParameter<DerivedClass, false>::operator=(DerivedClass&&)
void WIR_ImmediateParameter<DerivedClass, false>::setValue(long long unsigned int)
long long unsigned int WIR_ImmediateParameter<DerivedClass, false>::getValue() const
long long unsigned int WIR_ImmediateParameter<DerivedClass, false>::getUnsignedValue() const
static long long unsigned int WIR_ImmediateParameter<DerivedClass, false>::getMaxValue(unsigned int)
string WIR_ImmediateParameter<DerivedClass, false>::getValueString() const

WIR_Instruction::WIR_Instruction()
WIR_Instruction::WIR_Instruction(WIR_Operation&&, Args&& ...)
WIR_Instruction::WIR_Instruction(const WIR_Instruction&)
WIR_Instruction::WIR_Instruction(WIR_Instruction&&)
virtual WIR_Instruction::~WIR_Instruction()
WIR_Instruction& WIR_Instruction::operator=(const WIR_Instruction&)
WIR_Instruction& WIR_Instruction::operator=(WIR_Instruction&&)
WIR_Operation& WIR_Instruction::pushBackOperation(const WIR_Operation&)
WIR_Operation& WIR_Instruction::pushBackOperation(WIR_Operation&&)
WIR_Operation& WIR_Instruction::pushFrontOperation(const WIR_Operation&)
WIR_Operation& WIR_Instruction::pushFrontOperation(WIR_Operation&&)
list<reference_wrapper<WIR_Operation> >::iterator WIR_Instruction::insertOperation(list<reference_wrapper<WIR_Operation> >::const_iterator, const WIR_Operation&)
list<reference_wrapper<WIR_Operation> >::iterator WIR_Instruction::insertOperation(list<reference_wrapper<WIR_Operation> >::const_iterator, WIR_Operation&&)
list<reference_wrapper<WIR_Operation> >::iterator WIR_Instruction::replaceOperation(list<reference_wrapper<WIR_Operation> >::const_iterator, const WIR_Operation&)
list<reference_wrapper<WIR_Operation> >::iterator WIR_Instruction::replaceOperation(list<reference_wrapper<WIR_Operation> >::const_iterator, WIR_Operation&&)
void WIR_Instruction::popBackOperation()
void WIR_Instruction::popFrontOperation()
list<reference_wrapper<WIR_Operation> >::iterator WIR_Instruction::eraseOperation(list<reference_wrapper<WIR_Operation> >::const_iterator)
void WIR_Instruction::clearOperations()
const list<reference_wrapper<WIR_Operation> >& WIR_Instruction::getOperations() const
WIR_Operation& WIR_Instruction::moveOperation(WIR_Operation&)
list<reference_wrapper<WIR_Operation> >::const_iterator WIR_Instruction::begin() const
list<reference_wrapper<WIR_Operation> >::const_iterator WIR_Instruction::end() const
list<reference_wrapper<WIR_Operation> >::const_reverse_iterator WIR_Instruction::rbegin() const
list<reference_wrapper<WIR_Operation> >::const_reverse_iterator WIR_Instruction::rend() const
bool WIR_Instruction::containsOperation(WIR_id_t) const
bool WIR_Instruction::containsOperation(const WIR_Operation&) const
list<reference_wrapper<WIR_Operation> >::const_iterator WIR_Instruction::findOperation(WIR_id_t) const
list<reference_wrapper<WIR_Operation> >::const_iterator WIR_Instruction::findOperation(const WIR_Operation&) const
unsigned int WIR_Instruction::getBitWidth() const
long long unsigned int WIR_Instruction::getSize() const
bool WIR_Instruction::isInserted() const
WIR_BasicBlock& WIR_Instruction::getBasicBlock() const
WIR_VirtualRegisterSet WIR_Instruction::getVREGs() const
void WIR_Instruction::setDontOptimize(bool)
bool WIR_Instruction::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_Instruction&)
void WIR_Instruction::addOperations(WIR_Operation&&, Args&& ...)
void WIR_Instruction::addOperations() const
void WIR_Instruction::copyInstruction(const WIR_Instruction&)
void WIR_Instruction::checkDontOptimize() const
void WIR_Instruction::checkVREGs(const WIR_Operation&) const
void WIR_Instruction::onInsert(WIR_BasicBlock*)
void WIR_Instruction::invalidateSymbols() const

WIR_LabelParameter::WIR_LabelParameter(const WIR_BasicBlock&)
WIR_LabelParameter::WIR_LabelParameter(const WIR_Data&)
WIR_LabelParameter::WIR_LabelParameter(const WIR_Function&)
WIR_LabelParameter::WIR_LabelParameter(const WIR_LabelParameter&)
WIR_LabelParameter::WIR_LabelParameter(WIR_LabelParameter&&)
virtual WIR_LabelParameter::~WIR_LabelParameter()
WIR_LabelParameter& WIR_LabelParameter::operator=(const WIR_LabelParameter&)
WIR_LabelParameter& WIR_LabelParameter::operator=(WIR_LabelParameter&&)
virtual WIR_ParameterType WIR_LabelParameter::getType() const
WIR_LabelType WIR_LabelParameter::getLabelType() const
WIR_BasicBlock& WIR_LabelParameter::getBasicBlock() const
WIR_Data& WIR_LabelParameter::getData() const
WIR_Function& WIR_LabelParameter::getFunction() const
string WIR_LabelParameter::getName() const
ostream& operator<<(ostream&, const WIR_LabelParameter&)
virtual WIR_Parameter* WIR_LabelParameter::clone() const

WIR_LiveOut::WIR_LiveOut()
WIR_LiveOut::WIR_LiveOut(const WIR_LiveOut&)
virtual WIR_LiveOut::~WIR_LiveOut()
virtual bool WIR_LiveOut::isUnique() const
void WIR_LiveOut::insertRegister(const WIR_BaseRegister&)
const WIR_RegisterSet& WIR_LiveOut::getRegisters() const

WIR_LoopBound::WIR_LoopBound()
WIR_LoopBound::WIR_LoopBound(const WIR_LoopBound&)
WIR_LoopBound::WIR_LoopBound(int, int, const WIR_BasicBlock&, WIR_LoopBound::LoopControlType)
virtual WIR_LoopBound::~WIR_LoopBound()
WIR_LoopBound& WIR_LoopBound::operator=(const WIR_LoopBound&)
virtual WIR_FlowFactType WIR_LoopBound::getType() const
ostream& operator<<(ostream&, const WIR_LoopBound&)
void WIR_LoopBound::setMin(int)
void WIR_LoopBound::setMax(int)
void WIR_LoopBound::setLoop(const WIR_BasicBlock&, WIR_LoopBound::LoopControlType)
int WIR_LoopBound::getMin() const
int WIR_LoopBound::getMax() const
const WIR_BasicBlock& WIR_LoopBound::getLoop() const
WIR_LoopBound::LoopControlType WIR_LoopBound::getLoopControlType() const
bool WIR_LoopBound::isBoundSpecified() const
virtual bool WIR_LoopBound::isSignificant() const
virtual void WIR_LoopBound::reorganize(const map<long long unsigned int, WIR_BasicBlock*>&)
virtual void WIR_LoopBound::onInsert(WIR_System*)
virtual WIR_FlowFact* WIR_LoopBound::clone() const
bool WIR_LoopBound::doStructuralAnalysis(const WIR_BasicBlock&) const

WIR_LoopExit::WIR_LoopExit(bool)
virtual WIR_LoopExit::~WIR_LoopExit()
virtual bool WIR_LoopExit::isUnique() const
bool WIR_LoopExit::explicitSuccessorIsExit() const

WIR_MemoryRegion::WIR_MemoryRegion(const WIR_MemoryRegion&)
WIR_MemoryRegion::WIR_MemoryRegion(WIR_MemoryRegion&&)
virtual WIR_MemoryRegion::~WIR_MemoryRegion()
virtual WIR_SystemComponentType WIR_MemoryRegion::getType() const
size_t WIR_MemoryRegion::getBaseAddress() const
size_t WIR_MemoryRegion::getLength() const
size_t WIR_MemoryRegion::getFreeSpace()
bool WIR_MemoryRegion::isDynamicallyAllocated() const
long unsigned int WIR_MemoryRegion::getAttributes() const
string WIR_MemoryRegion::getMemoryType() const
long double WIR_MemoryRegion::getClockRatio() const
unsigned int WIR_MemoryRegion::getMinDelay() const
virtual unsigned int WIR_MemoryRegion::getMaxDelay(unsigned int) const
long unsigned int WIR_MemoryRegion::getMinBurstDelay() const
long unsigned int WIR_MemoryRegion::getMaxBurstDelay() const
long unsigned int WIR_MemoryRegion::getBusWidth() const
const set<list<reference_wrapper<WIR_SystemComponent> > >& WIR_MemoryRegion::getHierarchy() const
const WIR_SectionSet& WIR_MemoryRegion::getSections() const
WIR_MemoryRegion::WIR_MemoryRegion(string&&)
virtual WIR_MemoryRegion* WIR_MemoryRegion::clone() const
void WIR_MemoryRegion::setBaseAddress(size_t)
void WIR_MemoryRegion::setLength(size_t)
void WIR_MemoryRegion::setFreeSpace(size_t)
void WIR_MemoryRegion::setDynamicAllocation(bool)
void WIR_MemoryRegion::setAttributes(long unsigned int)
void WIR_MemoryRegion::setMemoryType(const string&)
void WIR_MemoryRegion::setClockRatio(long double)
void WIR_MemoryRegion::setDelay(long unsigned int)
void WIR_MemoryRegion::setBurstDelay(long unsigned int)
void WIR_MemoryRegion::setBusWidth(long unsigned int)
void WIR_MemoryRegion::insertHierarchy(list<reference_wrapper<WIR_SystemComponent> >&&)
void WIR_MemoryRegion::insertSection(const WIR_Section&)

WIR_Operation::WIR_Operation(const WIR_BaseProcessor::OpCode&, const WIR_BaseProcessor::OperationFormat&, Args&& ...)
WIR_Operation::WIR_Operation(const WIR_Operation&)
WIR_Operation::WIR_Operation(WIR_Operation&&)
virtual WIR_Operation::~WIR_Operation()
WIR_Operation& WIR_Operation::operator=(const WIR_Operation&)
WIR_Operation& WIR_Operation::operator=(WIR_Operation&&)
const WIR_BaseProcessor::OpCode& WIR_Operation::getOpCode() const
const WIR_BaseProcessor::OperationFormat& WIR_Operation::getOperationFormat() const
WIR_Parameter& WIR_Operation::pushBackParameter(const WIR_Parameter&)
WIR_Parameter& WIR_Operation::pushBackParameter(WIR_Parameter&&)
WIR_Parameter& WIR_Operation::pushBackParameter(WIR_Parameter*)
WIR_Parameter& WIR_Operation::pushFrontParameter(const WIR_Parameter&)
WIR_Parameter& WIR_Operation::pushFrontParameter(WIR_Parameter&&)
list<reference_wrapper<WIR_Parameter> >::iterator WIR_Operation::insertParameter(list<reference_wrapper<WIR_Parameter> >::const_iterator, const WIR_Parameter&)
list<reference_wrapper<WIR_Parameter> >::iterator WIR_Operation::insertParameter(list<reference_wrapper<WIR_Parameter> >::const_iterator, WIR_Parameter&&)
list<reference_wrapper<WIR_Parameter> >::iterator WIR_Operation::replaceParameter(list<reference_wrapper<WIR_Parameter> >::const_iterator, const WIR_Parameter&)
list<reference_wrapper<WIR_Parameter> >::iterator WIR_Operation::replaceParameter(list<reference_wrapper<WIR_Parameter> >::const_iterator, WIR_Parameter&&)
void WIR_Operation::popBackParameter()
void WIR_Operation::popFrontParameter()
list<reference_wrapper<WIR_Parameter> >::iterator WIR_Operation::eraseParameter(list<reference_wrapper<WIR_Parameter> >::const_iterator)
void WIR_Operation::clearParameters()
const list<reference_wrapper<WIR_Parameter> >& WIR_Operation::getParameters() const
const list<reference_wrapper<WIR_Parameter> >& WIR_Operation::getExplicitParameters() const
WIR_Parameter& WIR_Operation::getExplicitParameter(unsigned int) const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_Operation::begin() const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_Operation::end() const
list<reference_wrapper<WIR_Parameter> >::const_reverse_iterator WIR_Operation::rbegin() const
list<reference_wrapper<WIR_Parameter> >::const_reverse_iterator WIR_Operation::rend() const
bool WIR_Operation::containsParameter(WIR_id_t) const
bool WIR_Operation::containsParameter(const WIR_Parameter&) const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_Operation::findParameter(WIR_id_t) const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_Operation::findParameter(const WIR_Parameter&) const
bool WIR_Operation::isInserted() const
WIR_Instruction& WIR_Operation::getInstruction() const
unsigned int WIR_Operation::getNumberOfExplicitParameters() const
static void WIR_Operation::enforceParameterChecking()
static void WIR_Operation::resetParameterChecking()
unsigned int WIR_Operation::getBitWidth() const
long long unsigned int WIR_Operation::getSize() const
bool WIR_Operation::isMemoryAccess() const
bool WIR_Operation::isMemoryStore() const
bool WIR_Operation::isMemoryLoad() const
bool WIR_Operation::isMove() const
bool WIR_Operation::isCall() const
bool WIR_Operation::isIndirectCall() const
bool WIR_Operation::isReturn() const
bool WIR_Operation::isJump() const
bool WIR_Operation::isConditionalJump() const
bool WIR_Operation::isUnconditionalJump() const
bool WIR_Operation::isIndirectJump() const
bool WIR_Operation::isAsmDataDirective() const
bool WIR_Operation::hasSideEffects() const
void WIR_Operation::addJumpTarget(const WIR_BasicBlock&)
void WIR_Operation::eraseJumpTarget(const WIR_BasicBlock&)
bool WIR_Operation::jumpTargetsAdded() const
WIR_BasicBlockSet WIR_Operation::getJumpTargets() const
WIR_VirtualRegisterSet WIR_Operation::getVREGs() const
void WIR_Operation::setDontOptimize(bool)
bool WIR_Operation::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_Operation&)
void WIR_Operation::onInsert(WIR_Instruction*)
void WIR_Operation::checkOperationFormat() const
void WIR_Operation::checkParameters() const
void WIR_Operation::copyOperation(const WIR_Operation&)
void WIR_Operation::checkDontOptimize() const
void WIR_Operation::checkVREGs(const WIR_Parameter&) const
void WIR_Operation::addParameters(T&&, Args&& ...)
void WIR_Operation::addParameters() const

WIR_OperationFormat::WIR_OperationFormat(Args&& ...)
WIR_OperationFormat::~WIR_OperationFormat()
const list<reference_wrapper<WIR_Parameter> >& WIR_OperationFormat::getParameters() const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_OperationFormat::begin() const
list<reference_wrapper<WIR_Parameter> >::const_iterator WIR_OperationFormat::end() const
WIR_OperationFormat& WIR_OperationFormat::operator=(WIR_OperationFormat&&)
void WIR_OperationFormat::addParameters(T&&, Args&& ...)
void WIR_OperationFormat::addParameters() const

WIR_Parameter::WIR_Parameter()
WIR_Parameter::WIR_Parameter(const WIR_Parameter&)
WIR_Parameter::WIR_Parameter(WIR_Parameter&&)
virtual WIR_Parameter::~WIR_Parameter()
WIR_Parameter& WIR_Parameter::operator=(const WIR_Parameter&)
WIR_Parameter& WIR_Parameter::operator=(WIR_Parameter&&)
bool WIR_Parameter::isInserted() const
WIR_Operation& WIR_Parameter::getOperation() const
void WIR_Parameter::setImplicit(bool)
bool WIR_Parameter::isExplicit() const
bool WIR_Parameter::isImplicit() const
void WIR_Parameter::setDontOptimize(bool)
bool WIR_Parameter::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_Parameter&)
void WIR_Parameter::checkDontOptimize() const
void WIR_Parameter::onInsert(WIR_Operation*)

virtual WIR_PhysicalRegister::~WIR_PhysicalRegister()
WIR_PhysicalRegister::WIR_PhysicalRegister(const WIR_BaseProcessor::RegisterType&, const string&, bool)
WIR_PhysicalRegister::WIR_PhysicalRegister(const WIR_PhysicalRegister&)

WIR_PriorityDivisionBusArbitration::WIR_PriorityDivisionBusArbitration(unsigned int, unsigned int, unsigned int)
virtual WIR_PriorityDivisionBusArbitration::~WIR_PriorityDivisionBusArbitration()
virtual unsigned int WIR_PriorityDivisionBusArbitration::getNumberOfArbitratedCores() const
const vector<WIR_BusArbitrationType>& WIR_PriorityDivisionBusArbitration::getSlotModes() const
const WIR_OffsetIntervalSet& WIR_PriorityDivisionBusArbitration::getMustGrantWindows(const WIR_BaseProcessor&) const
const WIR_OffsetIntervalSet& WIR_PriorityDivisionBusArbitration::getMayGrantWindows(const WIR_BaseProcessor&) const
virtual WIR_PriorityDivisionBusArbitration* WIR_PriorityDivisionBusArbitration::clone() const
void WIR_PriorityDivisionBusArbitration::pushBackSlot(WIR_BusArbitrationType, WIR_TDMAOffset, const WIR_BaseProcessor&)
void WIR_PriorityDivisionBusArbitration::pushBackSlot(WIR_BusArbitrationType, WIR_TDMAOffset)
void WIR_PriorityDivisionBusArbitration::recomputePDGrantWindows() const
virtual void WIR_PriorityDivisionBusArbitration::setMaxAccessTime(unsigned int)

WIR_Processor<DerivedProcessorClass>::WIR_Processor()
WIR_Processor<DerivedProcessorClass>::WIR_Processor(const WIR_Processor<DerivedProcessorClass>&)
WIR_Processor<DerivedProcessorClass>::~WIR_Processor()
static WIR_id_t WIR_Processor<DerivedProcessorClass>::getProcessorTypeID()
WIR_BaseProcessor* WIR_Processor<DerivedProcessorClass>::clone() const

WIR_Reachability::WIR_Reachability(const WIR_BasicBlock&)
virtual WIR_Reachability::~WIR_Reachability()
virtual bool WIR_Reachability::isUnique() const
void WIR_Reachability::addReachableBlock(WIR_BasicBlock&, bool)
const WIR_BasicBlockSet& WIR_Reachability::getReachableBlocks(bool) const
bool WIR_Reachability::isReachable(const WIR_BasicBlock&, bool) const
static bool WIR_Reachability::isReachable(const WIR_Instruction&, const WIR_Instruction&, bool)

WIR_ReachingDefinitions::WIR_ReachingDefinitions()
WIR_ReachingDefinitions::WIR_ReachingDefinitions(const WIR_ReachingDefinitions&)
virtual WIR_ReachingDefinitions::~WIR_ReachingDefinitions()
virtual bool WIR_ReachingDefinitions::isUnique() const
void WIR_ReachingDefinitions::insertReachingDefinition(const WIR_RegisterParameter&)
const WIR_RegisterParameterSet& WIR_ReachingDefinitions::getReachingDefinitions() const
void WIR_ReachingDefinitions::insertReachingInput(const WIR_PhysicalRegister&)
const WIR_PhysicalRegisterSet& WIR_ReachingDefinitions::getReachingInputs() const

WIR_Register<DerivedRegisterClass, true>::WIR_Register(const WIR_BaseProcessor::RegisterType&)
WIR_Register<DerivedRegisterClass, true>::WIR_Register(const WIR_Register<DerivedRegisterClass, true>&)
WIR_Register<DerivedRegisterClass, true>::WIR_Register(WIR_Register<DerivedRegisterClass, true>&&)
WIR_Register<DerivedRegisterClass, true>::~WIR_Register()
DerivedRegisterClass& WIR_Register<DerivedRegisterClass, true>::operator=(const DerivedRegisterClass&)
DerivedRegisterClass& WIR_Register<DerivedRegisterClass, true>::operator=(DerivedRegisterClass&&)
bool WIR_Register<DerivedRegisterClass, true>::isInserted() const
WIR_Function& WIR_Register<DerivedRegisterClass, true>::getFunction() const
bool WIR_Register<DerivedRegisterClass, true>::isPrecolored() const
WIR_PhysicalRegister& WIR_Register<DerivedRegisterClass, true>::getPrecolor() const
DerivedRegisterClass& WIR_Register<DerivedRegisterClass, true>::pushBackChild(const DerivedRegisterClass&)
DerivedRegisterClass& WIR_Register<DerivedRegisterClass, true>::pushBackChild(DerivedRegisterClass&&)
void WIR_Register<DerivedRegisterClass, true>::clearChilds()
void WIR_Register<DerivedRegisterClass, true>::onInsert(WIR_Function*)
WIR_BaseRegister* WIR_Register<DerivedRegisterClass, true>::clone() const

WIR_Register<DerivedRegisterClass, false>::~WIR_Register()
bool WIR_Register<DerivedRegisterClass, false>::isInserted() const
WIR_BaseProcessor& WIR_Register<DerivedRegisterClass, false>::getProcessor() const
bool WIR_Register<DerivedRegisterClass, false>::isStackPointer() const
WIR_Register<DerivedRegisterClass, false>::WIR_Register(const WIR_BaseProcessor::RegisterType&, const string&, bool)
WIR_Register<DerivedRegisterClass, false>::WIR_Register(const WIR_Register<DerivedRegisterClass, false>&)
DerivedRegisterClass& WIR_Register<DerivedRegisterClass, false>::pushBackChild(DerivedRegisterClass&)
void WIR_Register<DerivedRegisterClass, false>::clearChilds()
void WIR_Register<DerivedRegisterClass, false>::onInsert(WIR_BaseProcessor*)
WIR_BaseRegister* WIR_Register<DerivedRegisterClass, false>::clone() const

WIR_RegisterParameter::WIR_RegisterParameter(const WIR_BaseRegister&, WIR_Usage, bool)
WIR_RegisterParameter::WIR_RegisterParameter(const WIR_RegisterParameter&)
WIR_RegisterParameter::WIR_RegisterParameter(WIR_RegisterParameter&&)
virtual WIR_RegisterParameter::~WIR_RegisterParameter()
WIR_RegisterParameter& WIR_RegisterParameter::operator=(const WIR_RegisterParameter&)
WIR_RegisterParameter& WIR_RegisterParameter::operator=(WIR_RegisterParameter&&)
virtual WIR_ParameterType WIR_RegisterParameter::getType() const
WIR_Register& WIR_RegisterParameter::getRegister() const
void WIR_RegisterParameter::setUsage(WIR_Usage)
WIR_Usage WIR_RegisterParameter::getUsage() const
bool WIR_RegisterParameter::isDefined() const
bool WIR_RegisterParameter::isUsed() const
bool WIR_RegisterParameter::isDefUsed() const
ostream& operator<<(ostream&, const WIR_RegisterParameter&)
virtual WIR_Parameter* WIR_RegisterParameter::clone() const

virtual WIR_RoundRobinBusArbitration::~WIR_RoundRobinBusArbitration()
virtual WIR_RoundRobinBusArbitration* WIR_RoundRobinBusArbitration::clone() const

WIR_SchedulingConstraint::WIR_SchedulingConstraint(WIR_SchedulingConstraintType, Args&& ...)
WIR_SchedulingConstraint::WIR_SchedulingConstraint(const WIR_SchedulingConstraint&)
virtual WIR_SchedulingConstraint::~WIR_SchedulingConstraint()
virtual bool WIR_SchedulingConstraint::isUnique() const
const list<reference_wrapper<WIR_Instruction> >& WIR_SchedulingConstraint::getInstructionSequence() const
bool WIR_SchedulingConstraint::check() const
void WIR_SchedulingConstraint::setConstraint(const WIR_Instruction&, Args&& ...)
void WIR_SchedulingConstraint::setConstraint() const

WIR_Section::WIR_Section(const string&, const WIR_MemoryRegion&)
WIR_Section::WIR_Section(const WIR_Section&)
virtual WIR_Section::~WIR_Section()
string WIR_Section::getName() const
void WIR_Section::setAlignment(size_t)
size_t WIR_Section::getAlignment() const
void WIR_Section::setBlock(size_t)
size_t WIR_Section::getBlock() const
bool WIR_Section::isStartSet() const
size_t WIR_Section::getLength()
WIR_MemoryRegion& WIR_Section::getRegion() const
WIR_MemoryRegion& WIR_Section::getLoadRegion() const
bool WIR_Section::isLoadRegionSet() const
void WIR_Section::setLength(size_t)
void WIR_Section::setLoadRegion(WIR_MemoryRegion&)
void WIR_Section::onInsert(WIR_BaseProcessor*)

WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::WIR_SignedImmediateParameter(long long int, unsigned int)
WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::WIR_SignedImmediateParameter(const WIR_SignedImmediateParameter<DerivedSignedImmediateClass>&)
WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::WIR_SignedImmediateParameter(WIR_SignedImmediateParameter<DerivedSignedImmediateClass>&&)
WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::~WIR_SignedImmediateParameter()
WIR_SignedImmediateParameter<DerivedSignedImmediateClass>& WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::operator=(const WIR_SignedImmediateParameter<DerivedSignedImmediateClass>&)
WIR_SignedImmediateParameter<DerivedSignedImmediateClass>& WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::operator=(WIR_SignedImmediateParameter<DerivedSignedImmediateClass>&&)
WIR_id_t WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::getImmediateType() const
WIR_BaseImmediateParameter* WIR_SignedImmediateParameter<DerivedSignedImmediateClass>::clone() const

WIR_Stats::WIR_Stats()
WIR_Stats::WIR_Stats(const WIR_System&)
WIR_Stats::WIR_Stats(const WIR_Function&)
WIR_Stats::~WIR_Stats()
void WIR_Stats::count(const WIR_System&)
void WIR_Stats::count(const WIR_Function&)
void WIR_Stats::rotate()
void WIR_Stats::setIndentation(unsigned int)
ostream& operator<<(ostream&, const WIR_Stats&)
void WIR_Stats::count(const WIR_System&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_CompilationUnit&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_Function&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_BasicBlock&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_Instruction&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_Operation&, set<WIR_id_t>&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::count(const WIR_Parameter&, set<WIR_id_t>&, set<WIR_id_t>&)
void WIR_Stats::clearSets2()
unsigned int WIR_Stats::diff(const set<WIR_id_t>&, const set<WIR_id_t>&) const

WIR_StringParameter::WIR_StringParameter(const string&)
WIR_StringParameter::WIR_StringParameter(string&&)
WIR_StringParameter::WIR_StringParameter(const WIR_StringParameter&)
WIR_StringParameter::WIR_StringParameter(WIR_StringParameter&&)
virtual WIR_StringParameter::~WIR_StringParameter()
WIR_StringParameter& WIR_StringParameter::operator=(const WIR_StringParameter&)
WIR_StringParameter& WIR_StringParameter::operator=(WIR_StringParameter&&)
virtual WIR_ParameterType WIR_StringParameter::getType() const
void WIR_StringParameter::setString(const string&)
void WIR_StringParameter::setString(string&&)
string WIR_StringParameter::getString() const
ostream& operator<<(ostream&, const WIR_StringParameter&)
virtual WIR_Parameter* WIR_StringParameter::clone() const

WIR_Symbol::WIR_Symbol(const WIR_BasicBlock&)
WIR_Symbol::WIR_Symbol(const WIR_Data&)
WIR_Symbol::WIR_Symbol(const WIR_Function&)
WIR_Symbol::WIR_Symbol(const WIR_Symbol&)
WIR_Symbol::WIR_Symbol(WIR_Symbol&&)
virtual WIR_Symbol::~WIR_Symbol()
WIR_SymbolType WIR_Symbol::getType() const
WIR_BasicBlock& WIR_Symbol::getBasicBlock() const
WIR_Data& WIR_Symbol::getData() const
WIR_Function& WIR_Symbol::getFunction() const
string WIR_Symbol::getName() const
void WIR_Symbol::setConst(bool)
bool WIR_Symbol::isConst() const
void WIR_Symbol::setExtern(bool)
bool WIR_Symbol::isExtern() const
void WIR_Symbol::setGlobal(bool)
bool WIR_Symbol::isGlobal() const
void WIR_Symbol::setVolatile(bool)
bool WIR_Symbol::isVolatile() const
void WIR_Symbol::setSection(const WIR_Section&)
void WIR_Symbol::unsetSection()
const WIR_Section& WIR_Symbol::getSection() const
WIR_MemoryAddress WIR_Symbol::getBaseAddress() const
void WIR_Symbol::setBaseAddress(const WIR_MemoryAddress&)
void WIR_Symbol::checkDontOptimize() const

WIR_System::WIR_System(const string&, const WIR_TaskManager&)
WIR_System::WIR_System(const WIR_System&)
WIR_System::WIR_System(WIR_System&&)
virtual WIR_System::~WIR_System()
WIR_System& WIR_System::operator=(const WIR_System&)
WIR_System& WIR_System::operator=(WIR_System&&)
string WIR_System::getSystemName() const
WIR_CompilationUnit& WIR_System::pushBackCompilationUnit(const WIR_CompilationUnit&)
WIR_CompilationUnit& WIR_System::pushBackCompilationUnit(WIR_CompilationUnit&&)
WIR_CompilationUnit& WIR_System::pushFrontCompilationUnit(const WIR_CompilationUnit&)
WIR_CompilationUnit& WIR_System::pushFrontCompilationUnit(WIR_CompilationUnit&&)
list<reference_wrapper<WIR_CompilationUnit> >::iterator WIR_System::insertCompilationUnit(list<reference_wrapper<WIR_CompilationUnit> >::const_iterator, const WIR_CompilationUnit&)
list<reference_wrapper<WIR_CompilationUnit> >::iterator WIR_System::insertCompilationUnit(list<reference_wrapper<WIR_CompilationUnit> >::const_iterator, WIR_CompilationUnit&&)
list<reference_wrapper<WIR_CompilationUnit> >::iterator WIR_System::replaceCompilationUnit(list<reference_wrapper<WIR_CompilationUnit> >::const_iterator, const WIR_CompilationUnit&)
list<reference_wrapper<WIR_CompilationUnit> >::iterator WIR_System::replaceCompilationUnit(list<reference_wrapper<WIR_CompilationUnit> >::const_iterator, WIR_CompilationUnit&&)
void WIR_System::popBackCompilationUnit()
void WIR_System::popFrontCompilationUnit()
list<reference_wrapper<WIR_CompilationUnit> >::iterator WIR_System::eraseCompilationUnit(list<reference_wrapper<WIR_CompilationUnit> >::const_iterator)
void WIR_System::clearCompilationUnits()
const list<reference_wrapper<WIR_CompilationUnit> >& WIR_System::getCompilationUnits() const
list<reference_wrapper<WIR_CompilationUnit> >::const_iterator WIR_System::begin() const
list<reference_wrapper<WIR_CompilationUnit> >::const_iterator WIR_System::end() const
bool WIR_System::containsCompilationUnit(WIR_id_t) const
bool WIR_System::containsCompilationUnit(const WIR_CompilationUnit&) const
list<reference_wrapper<WIR_CompilationUnit> >::const_iterator WIR_System::findCompilationUnit(WIR_id_t) const
list<reference_wrapper<WIR_CompilationUnit> >::const_iterator WIR_System::findCompilationUnit(const WIR_CompilationUnit&) const
const WIR_SystemComponentSet& WIR_System::getComponents() const
const set<reference_wrapper<DerivedComponentClass>, WIR_Compare<DerivedContainerClass> > WIR_System::getComponents() const
set<reference_wrapper<WIR_SystemComponent>, WIR_Compare<WIR_SystemComponent> >::const_iterator WIR_System::findComponent(const string&) const
const std::list<std::reference_wrapper<WIR_FlowFact>>& WIR_System::getFlowFacts() const
const list<reference_wrapper<DerivedFlowFactClass> > WIR_System::getFlowFacts() const
WIR_FlowFact& WIR_System::pushBackFlowFact(const WIR_FlowFact&)
void WIR_System::eraseFlowFact(list<reference_wrapper<WIR::WIR_FlowFact>>::const_iterator)
void WIR_System::eraseFlowFact(WIR::WIR_id_t)
bool WIR_System::containsFlowFact(WIR_id_t) const
void WIR_System::clearFlowFacts()
WIR_TaskManager& WIR_System::getTaskManager() const
void WIR_System::setDontOptimize(bool)
bool WIR_System::getDontOptimize() const
ostream& operator<<(ostream&, const WIR_System&)
void WIR_System::copySystem(const WIR_System&)
void WIR_System::checkDontOptimize() const
void WIR_System::setSystemName(const string&)
string WIR_System::getConfigPath(const string&)
void WIR_System::createComponents(const string&)
void WIR_System::createSections(WIR_MemoryRegion&, const set<string>&, const string&, unsigned int) const
void WIR_System::attachLoadedSections(const map<reference_wrapper<WIR_MemoryRegion>, set<string>, WIR_Compare<WIR_MemoryRegion> >&, const string&)
void WIR_System::computeMaximumAccessTimes()
void WIR_System::computeHierarchyLevels()
WIR_SystemComponent& WIR_System::insertComponent(const WIR_SystemComponent&)
void WIR_System::clearComponents()
void WIR_System::insertSymbols(const WIR_CompilationUnit&)
void WIR_System::computeMemoryLayout()
void WIR_System::computeSectionLayout()
void WIR_System::computePhysicalAddresses()

virtual WIR_SystemComponent::~WIR_SystemComponent()
string WIR_SystemComponent::getName() const
const WIR_AddressRangeSet& WIR_SystemComponent::getAddressRanges() const
virtual bool WIR_SystemComponent::isActiveInRange(const WIR_AddressRange&) const
WIR_SystemComponent::WIR_SystemComponent(string&&)
WIR_SystemComponent::WIR_SystemComponent(const WIR_SystemComponent&)
void WIR_SystemComponent::addAddressRange(const WIR_AddressRange&)
void WIR_SystemComponent::setName(string&&)
void WIR_SystemComponent::onInsert(WIR_System*)

WIR_SystemConfig::WIR_SystemConfig(const string&)
WIR_SystemConfig::~WIR_SystemConfig()
const list<WIR_SystemConfig::Paragraph>& WIR_SystemConfig::getParagraphs() const
WIR_SystemConfig::Paragraph::Paragraph(const string&)
string WIR_SystemConfig::Paragraph::getName() const
void WIR_SystemConfig::Paragraph::setLine(unsigned int)
unsigned int WIR_SystemConfig::Paragraph::getLine() const
void WIR_SystemConfig::Paragraph::setType(WIR_SystemComponentType)
WIR_SystemComponentType WIR_SystemConfig::Paragraph::getType() const
bool WIR_SystemConfig::Paragraph::isTypeSet() const
void WIR_SystemConfig::Paragraph::addProperty(const string&, const string&, unsigned int)
const list<pair<string, WIR_SystemConfig::Paragraph::value> >& WIR_SystemConfig::Paragraph::getProperties() const

WIR_TaskManager::WIR_TaskManager()
WIR_TaskManager::WIR_TaskManager(const WIR_TaskManager&)
WIR_TaskManager::WIR_TaskManager(WIR_TaskManager&&)
virtual WIR_TaskManager::~WIR_TaskManager()
bool WIR_TaskManager::isInserted() const
WIR_System& WIR_TaskManager::getSystem() const
void WIR_TaskManager::onInsert(WIR_System*)
list<reference_wrapper<WIR_EntryPoint> > WIR_TaskManager::getEntryPoints() const
virtual WIR_TaskManager* WIR_TaskManager::clone() const

WIR_TDMABusArbitration::WIR_TDMABusArbitration(unsigned int, unsigned int)
virtual WIR_TDMABusArbitration::~WIR_TDMABusArbitration()
virtual unsigned int WIR_TDMABusArbitration::getNumberOfArbitratedCores() const
const vector<WIR_TDMABusArbitration::SlotInfo>& WIR_TDMABusArbitration::getSlots() const
const list<WIR_TDMABusArbitration::SlotInfo> WIR_TDMABusArbitration::getSlots(const WIR_BaseProcessor&) const
unsigned int WIR_TDMABusArbitration::getNumberOfSlots() const
WIR_TDMAOffset WIR_TDMABusArbitration::getScheduleLength() const
const WIR_OffsetIntervalSet& WIR_TDMABusArbitration::getGrantWindows(const WIR_BaseProcessor&) const
virtual WIR_TDMABusArbitration* WIR_TDMABusArbitration::clone() const
void WIR_TDMABusArbitration::recomputeGrantWindows() const
virtual void WIR_TDMABusArbitration::setMaxAccessTime(unsigned int)
void WIR_TDMABusArbitration::pushBackSlot(WIR_TDMAOffset, const WIR_BaseProcessor&)
WIR_TDMABusArbitration::SlotInfo::SlotInfo(unsigned int, const WIR_BaseProcessor&, WIR_TDMAOffset, WIR_TDMAOffset)
WIR_TDMABusArbitration::SlotInfo::SlotInfo(unsigned int, WIR_TDMAOffset, WIR_TDMAOffset)
unsigned int WIR_TDMABusArbitration::SlotInfo::getIndex() const
const WIR_BaseProcessor& WIR_TDMABusArbitration::SlotInfo::getOwner() const
WIR_TDMAOffset WIR_TDMABusArbitration::SlotInfo::getStart() const
WIR_TDMAOffset WIR_TDMABusArbitration::SlotInfo::getLength() const
void WIR_TDMABusArbitration::SlotInfo::setGrantWindow(WIR_OffsetIntervalSet&&)

WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::WIR_UnsignedImmediateParameter(long long unsigned int, unsigned int)
WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::WIR_UnsignedImmediateParameter(const WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>&)
WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::WIR_UnsignedImmediateParameter(WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>&&)
WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::~WIR_UnsignedImmediateParameter()
WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>& WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::operator=(const WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>&)
WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>& WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::operator=(WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>&&)
WIR_id_t WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::getImmediateType() const
WIR_BaseImmediateParameter* WIR_UnsignedImmediateParameter<DerivedUnsignedImmediateClass>::clone() const

WIR_VirtualRegister::WIR_VirtualRegister(const WIR_BaseProcessor::RegisterType&)
WIR_VirtualRegister::WIR_VirtualRegister(const WIR_VirtualRegister&)
WIR_VirtualRegister::WIR_VirtualRegister(WIR_VirtualRegister&&)
virtual WIR_VirtualRegister::~WIR_VirtualRegister()
WIR_VirtualRegister& WIR_VirtualRegister::operator=(const WIR_VirtualRegister&)
WIR_VirtualRegister& WIR_VirtualRegister::operator=(WIR_VirtualRegister&&)


#
# Generic MIPS/SPIM Processor Model
#

MIPS::MIPS()
MIPS::MIPS(const MIPS&)
virtual MIPS::~MIPS()
static void MIPS::init()
const MIPS_RegP& MIPS::r0() const
const MIPS_RegP& MIPS::r1() const
const MIPS_RegP& MIPS::r2() const
const MIPS_RegP& MIPS::r3() const
const MIPS_RegP& MIPS::r4() const
const MIPS_RegP& MIPS::r5() const
const MIPS_RegP& MIPS::r6() const
const MIPS_RegP& MIPS::r7() const
const MIPS_RegP& MIPS::r8() const
const MIPS_RegP& MIPS::r9() const
const MIPS_RegP& MIPS::r10() const
const MIPS_RegP& MIPS::r11() const
const MIPS_RegP& MIPS::r12() const
const MIPS_RegP& MIPS::r13() const
const MIPS_RegP& MIPS::r14() const
const MIPS_RegP& MIPS::r15() const
const MIPS_RegP& MIPS::r16() const
const MIPS_RegP& MIPS::r17() const
const MIPS_RegP& MIPS::r18() const
const MIPS_RegP& MIPS::r19() const
const MIPS_RegP& MIPS::r20() const
const MIPS_RegP& MIPS::r21() const
const MIPS_RegP& MIPS::r22() const
const MIPS_RegP& MIPS::r23() const
const MIPS_RegP& MIPS::r24() const
const MIPS_RegP& MIPS::r25() const
const MIPS_RegP& MIPS::r26() const
const MIPS_RegP& MIPS::r27() const
const MIPS_RegP& MIPS::r28() const
const MIPS_RegP& MIPS::r29() const
const MIPS_RegP& MIPS::r30() const
const MIPS_RegP& MIPS::r31() const

MIPS_Immediate5_Shamt::MIPS_Immediate5_Shamt(long long unsigned int)
MIPS_Immediate5_Shamt::MIPS_Immediate5_Shamt(const MIPS_Immediate5_Shamt&)
MIPS_Immediate5_Shamt::MIPS_Immediate5_Shamt(MIPS_Immediate5_Shamt&&)
virtual MIPS_Immediate5_Shamt::~MIPS_Immediate5_Shamt()
MIPS_Immediate5_Shamt& MIPS_Immediate5_Shamt::operator=(const MIPS_Immediate5_Shamt&)
MIPS_Immediate5_Shamt& MIPS_Immediate5_Shamt::operator=(MIPS_Immediate5_Shamt&&)

MIPS_Immediate16_Signed::MIPS_Immediate16_Signed(long long int)
MIPS_Immediate16_Signed::MIPS_Immediate16_Signed(const MIPS_Immediate16_Signed&)
MIPS_Immediate16_Signed::MIPS_Immediate16_Signed(MIPS_Immediate16_Signed&&)
virtual MIPS_Immediate16_Signed::~MIPS_Immediate16_Signed()
MIPS_Immediate16_Signed& MIPS_Immediate16_Signed::operator=(const MIPS_Immediate16_Signed&)
MIPS_Immediate16_Signed& MIPS_Immediate16_Signed::operator=(MIPS_Immediate16_Signed&&)

MIPS_Immediate16_Unsigned::MIPS_Immediate16_Unsigned(long long unsigned int)
MIPS_Immediate16_Unsigned::MIPS_Immediate16_Unsigned(const MIPS_Immediate16_Unsigned&)
MIPS_Immediate16_Unsigned::MIPS_Immediate16_Unsigned(MIPS_Immediate16_Unsigned&&)
virtual MIPS_Immediate16_Unsigned::~MIPS_Immediate16_Unsigned()
MIPS_Immediate16_Unsigned& MIPS_Immediate16_Unsigned::operator=(const MIPS_Immediate16_Unsigned&)
MIPS_Immediate16_Unsigned& MIPS_Immediate16_Unsigned::operator=(MIPS_Immediate16_Unsigned&&)

virtual MIPS_RegP::~MIPS_RegP()
MIPS_RegP::MIPS_RegP(const string&, bool)
MIPS_RegP::MIPS_RegP(const MIPS_RegP&)
virtual MIPS_RegP* MIPS_RegP::clone() const

MIPS_RegV::MIPS_RegV()
MIPS_RegV::MIPS_RegV(const MIPS_RegV&)
virtual MIPS_RegV::~MIPS_RegV()
virtual MIPS_RegV* MIPS_RegV::clone() const

ostream& mips(ostream&)
void dumpMIPSOperation(ostream&, const WIR_Operation&)


#
# ARM Processor Model
#

ARM_Base::ARM_Base()
ARM_Base::ARM_Base(const ARM_Base&)
virtual ARM_Base::~ARM_Base()
static void ARM_Base::init()
virtual bool ARM_Base::AddressingMode::isCompatible(const WIR_BaseProcessor::AddressingMode&, const WIR_BaseProcessor::OperationFormat&, const WIR_BaseProcessor::OpCode&) const
virtual bool ARM_Base::RegisterType::isCompatible(const WIR_BaseProcessor::RegisterType&, const WIR_BaseRegister&, const WIR_BaseRegister&) const
virtual bool ARM_Base::OpCode::isMove(const WIR_Operation&) const
virtual bool ARM_Base::OpCode::isIndirectCall(const WIR_Operation&) const
virtual bool ARM_Base::OpCode::isReturn(const WIR_Operation&) const
virtual bool ARM_Base::OpCode::isConditionalJump(const WIR_Operation&) const
virtual bool ARM_Base::OpCode::isUnconditionalJump(const WIR_Operation&) const
virtual bool ARM_Base::OpCode::isIndirectJump(const WIR_Operation&) const
const ARM_LoRegP& ARM_Base::R0() const
const ARM_LoRegP& ARM_Base::R1() const
const ARM_LoRegP& ARM_Base::R2() const
const ARM_LoRegP& ARM_Base::R3() const
const ARM_LoRegP& ARM_Base::R4() const
const ARM_LoRegP& ARM_Base::R5() const
const ARM_LoRegP& ARM_Base::R6() const
const ARM_LoRegP& ARM_Base::R7() const
const ARM_HiRegP& ARM_Base::R8() const
const ARM_HiRegP& ARM_Base::R9() const
const ARM_HiRegP& ARM_Base::R10() const
const ARM_HiRegP& ARM_Base::R11() const
const ARM_HiRegP& ARM_Base::R12() const
const ARM_HiRegP& ARM_Base::R13() const
const ARM_HiRegP& ARM_Base::R14() const
const ARM_HiRegP& ARM_Base::R15() const
const ARM_HiRegP& ARM_Base::SP() const
const ARM_HiRegP& ARM_Base::LR() const
const ARM_HiRegP& ARM_Base::PC() const

ARM_Const3_CoprocessorOpcode::ARM_Const3_CoprocessorOpcode(long long unsigned int)
ARM_Const3_CoprocessorOpcode::ARM_Const3_CoprocessorOpcode(const ARM_Const3_CoprocessorOpcode&)
ARM_Const3_CoprocessorOpcode::ARM_Const3_CoprocessorOpcode(ARM_Const3_CoprocessorOpcode&&)
virtual ARM_Const3_CoprocessorOpcode::~ARM_Const3_CoprocessorOpcode()
ARM_Const3_CoprocessorOpcode& ARM_Const3_CoprocessorOpcode::operator=(const ARM_Const3_CoprocessorOpcode&)
ARM_Const3_CoprocessorOpcode& ARM_Const3_CoprocessorOpcode::operator=(ARM_Const3_CoprocessorOpcode&&)

ARM_Const3_Unsigned::ARM_Const3_Unsigned(long long unsigned int)
ARM_Const3_Unsigned::ARM_Const3_Unsigned(const ARM_Const3_Unsigned&)
ARM_Const3_Unsigned::ARM_Const3_Unsigned(ARM_Const3_Unsigned&&)
virtual ARM_Const3_Unsigned::~ARM_Const3_Unsigned()
ARM_Const3_Unsigned& ARM_Const3_Unsigned::operator=(const ARM_Const3_Unsigned&)
ARM_Const3_Unsigned& ARM_Const3_Unsigned::operator=(ARM_Const3_Unsigned&&)

ARM_Const4_CoprocessorOpcode::ARM_Const4_CoprocessorOpcode(long long unsigned int)
ARM_Const4_CoprocessorOpcode::ARM_Const4_CoprocessorOpcode(const ARM_Const4_CoprocessorOpcode&)
ARM_Const4_CoprocessorOpcode::ARM_Const4_CoprocessorOpcode(ARM_Const4_CoprocessorOpcode&&)
virtual ARM_Const4_CoprocessorOpcode::~ARM_Const4_CoprocessorOpcode()
ARM_Const4_CoprocessorOpcode& ARM_Const4_CoprocessorOpcode::operator=(const ARM_Const4_CoprocessorOpcode&)
ARM_Const4_CoprocessorOpcode& ARM_Const4_CoprocessorOpcode::operator=(ARM_Const4_CoprocessorOpcode&&)

ARM_Const5_RotateAmount::ARM_Const5_RotateAmount(long long unsigned int)
ARM_Const5_RotateAmount::ARM_Const5_RotateAmount(const ARM_Const5_RotateAmount&)
ARM_Const5_RotateAmount::ARM_Const5_RotateAmount(ARM_Const5_RotateAmount&&)
virtual ARM_Const5_RotateAmount::~ARM_Const5_RotateAmount()
ARM_Const5_RotateAmount& ARM_Const5_RotateAmount::operator=(const ARM_Const5_RotateAmount&)
ARM_Const5_RotateAmount& ARM_Const5_RotateAmount::operator=(ARM_Const5_RotateAmount&&)
virtual void ARM_Const5_RotateAmount::setValue(long long unsigned int)

ARM_Const5_SatPos::ARM_Const5_SatPos(long long unsigned int)
ARM_Const5_SatPos::ARM_Const5_SatPos(const ARM_Const5_SatPos&)
ARM_Const5_SatPos::ARM_Const5_SatPos(ARM_Const5_SatPos&&)
virtual ARM_Const5_SatPos::~ARM_Const5_SatPos()
ARM_Const5_SatPos& ARM_Const5_SatPos::operator=(const ARM_Const5_SatPos&)
ARM_Const5_SatPos& ARM_Const5_SatPos::operator=(ARM_Const5_SatPos&&)
virtual void ARM_Const5_SatPos::setValue(long long unsigned int)

ARM_Const5_Unsigned::ARM_Const5_Unsigned(long long unsigned int)
ARM_Const5_Unsigned::ARM_Const5_Unsigned(const ARM_Const5_Unsigned&)
ARM_Const5_Unsigned::ARM_Const5_Unsigned(ARM_Const5_Unsigned&&)
virtual ARM_Const5_Unsigned::~ARM_Const5_Unsigned()
ARM_Const5_Unsigned& ARM_Const5_Unsigned::operator=(const ARM_Const5_Unsigned&)
ARM_Const5_Unsigned& ARM_Const5_Unsigned::operator=(ARM_Const5_Unsigned&&)

ARM_Const5_Unsigned0::ARM_Const5_Unsigned0(long long unsigned int)
ARM_Const5_Unsigned0::ARM_Const5_Unsigned0(const ARM_Const5_Unsigned0&)
ARM_Const5_Unsigned0::ARM_Const5_Unsigned0(ARM_Const5_Unsigned0&&)
virtual ARM_Const5_Unsigned0::~ARM_Const5_Unsigned0()
ARM_Const5_Unsigned0& ARM_Const5_Unsigned0::operator=(const ARM_Const5_Unsigned0&)
ARM_Const5_Unsigned0& ARM_Const5_Unsigned0::operator=(ARM_Const5_Unsigned0&&)
virtual void ARM_Const5_Unsigned0::setValue(long long unsigned int)

ARM_Const6_Unsigned::ARM_Const6_Unsigned(long long unsigned int)
ARM_Const6_Unsigned::ARM_Const6_Unsigned(const ARM_Const6_Unsigned&)
ARM_Const6_Unsigned::ARM_Const6_Unsigned(ARM_Const6_Unsigned&&)
virtual ARM_Const6_Unsigned::~ARM_Const6_Unsigned()
ARM_Const6_Unsigned& ARM_Const6_Unsigned::operator=(const ARM_Const6_Unsigned&)
ARM_Const6_Unsigned& ARM_Const6_Unsigned::operator=(ARM_Const6_Unsigned&&)
virtual void ARM_Const6_Unsigned::setValue(long long unsigned int)

ARM_Const6_Unsigned0::ARM_Const6_Unsigned0(long long unsigned int)
ARM_Const6_Unsigned0::ARM_Const6_Unsigned0(const ARM_Const6_Unsigned0&)
ARM_Const6_Unsigned0::ARM_Const6_Unsigned0(ARM_Const6_Unsigned0&&)
virtual ARM_Const6_Unsigned0::~ARM_Const6_Unsigned0()
ARM_Const6_Unsigned0& ARM_Const6_Unsigned0::operator=(const ARM_Const6_Unsigned0&)
ARM_Const6_Unsigned0& ARM_Const6_Unsigned0::operator=(ARM_Const6_Unsigned0&&)
virtual void ARM_Const6_Unsigned0::setValue(long long unsigned int)

ARM_Const7_Unsigned::ARM_Const7_Unsigned(long long unsigned int)
ARM_Const7_Unsigned::ARM_Const7_Unsigned(const ARM_Const7_Unsigned&)
ARM_Const7_Unsigned::ARM_Const7_Unsigned(ARM_Const7_Unsigned&&)
virtual ARM_Const7_Unsigned::~ARM_Const7_Unsigned()
ARM_Const7_Unsigned& ARM_Const7_Unsigned::operator=(const ARM_Const7_Unsigned&)
ARM_Const7_Unsigned& ARM_Const7_Unsigned::operator=(ARM_Const7_Unsigned&&)
virtual void ARM_Const7_Unsigned::setValue(long long unsigned int)

ARM_Const8_Unsigned::ARM_Const8_Unsigned(long long unsigned int)
ARM_Const8_Unsigned::ARM_Const8_Unsigned(const ARM_Const8_Unsigned&)
ARM_Const8_Unsigned::ARM_Const8_Unsigned(ARM_Const8_Unsigned&&)
virtual ARM_Const8_Unsigned::~ARM_Const8_Unsigned()
ARM_Const8_Unsigned& ARM_Const8_Unsigned::operator=(const ARM_Const8_Unsigned&)
ARM_Const8_Unsigned& ARM_Const8_Unsigned::operator=(ARM_Const8_Unsigned&&)

ARM_Const9_Unsigned::ARM_Const9_Unsigned(long long unsigned int)
ARM_Const9_Unsigned::ARM_Const9_Unsigned(const ARM_Const9_Unsigned&)
ARM_Const9_Unsigned::ARM_Const9_Unsigned(ARM_Const9_Unsigned&&)
virtual ARM_Const9_Unsigned::~ARM_Const9_Unsigned()
ARM_Const9_Unsigned& ARM_Const9_Unsigned::operator=(const ARM_Const9_Unsigned&)
ARM_Const9_Unsigned& ARM_Const9_Unsigned::operator=(ARM_Const9_Unsigned&&)
virtual void ARM_Const9_Unsigned::setValue(long long unsigned int)

ARM_Const10_CoprocessorOffset::ARM_Const10_CoprocessorOffset(long long unsigned int)
ARM_Const10_CoprocessorOffset::ARM_Const10_CoprocessorOffset(const ARM_Const10_CoprocessorOffset&)
ARM_Const10_CoprocessorOffset::ARM_Const10_CoprocessorOffset(ARM_Const10_CoprocessorOffset&&)
virtual ARM_Const10_CoprocessorOffset::~ARM_Const10_CoprocessorOffset()
ARM_Const10_CoprocessorOffset& ARM_Const10_CoprocessorOffset::operator=(const ARM_Const10_CoprocessorOffset&)
ARM_Const10_CoprocessorOffset& ARM_Const10_CoprocessorOffset::operator=(ARM_Const10_CoprocessorOffset&&)
virtual void ARM_Const10_CoprocessorOffset::setValue(long long unsigned int)

ARM_Const12_Unsigned::ARM_Const12_Unsigned(long long unsigned int)
ARM_Const12_Unsigned::ARM_Const12_Unsigned(const ARM_Const12_Unsigned&)
ARM_Const12_Unsigned::ARM_Const12_Unsigned(ARM_Const12_Unsigned&&)
virtual ARM_Const12_Unsigned::~ARM_Const12_Unsigned()
ARM_Const12_Unsigned& ARM_Const12_Unsigned::operator=(const ARM_Const12_Unsigned&)
ARM_Const12_Unsigned& ARM_Const12_Unsigned::operator=(ARM_Const12_Unsigned&&)

ARM_Const24_Unsigned::ARM_Const24_Unsigned(long long unsigned int)
ARM_Const24_Unsigned::ARM_Const24_Unsigned(const ARM_Const24_Unsigned&)
ARM_Const24_Unsigned::ARM_Const24_Unsigned(ARM_Const24_Unsigned&&)
virtual ARM_Const24_Unsigned::~ARM_Const24_Unsigned()
ARM_Const24_Unsigned& ARM_Const24_Unsigned::operator=(const ARM_Const24_Unsigned&)
ARM_Const24_Unsigned& ARM_Const24_Unsigned::operator=(ARM_Const24_Unsigned&&)

virtual ARM_HiRegP::~ARM_HiRegP()
ARM_HiRegP::ARM_HiRegP(const string&, bool)
ARM_HiRegP::ARM_HiRegP(const ARM_HiRegP&)
virtual ARM_HiRegP* ARM_HiRegP::clone() const

ARM_HiRegV::ARM_HiRegV()
ARM_HiRegV::ARM_HiRegV(const ARM_HiRegV&)
ARM_HiRegV::ARM_HiRegV(ARM_HiRegV&&)
virtual ARM_HiRegV::~ARM_HiRegV()
ARM_HiRegV& ARM_HiRegV::operator=(const ARM_HiRegV&)
virtual ARM_HiRegV* ARM_HiRegV::clone() const

virtual ARM_LoRegP::~ARM_LoRegP()
ARM_LoRegP::ARM_LoRegP(const string&, bool)
ARM_LoRegP::ARM_LoRegP(const ARM_LoRegP&)
virtual ARM_LoRegP* ARM_LoRegP::clone() const

ARM_LoRegV::ARM_LoRegV()
ARM_LoRegV::ARM_LoRegV(const ARM_LoRegV&)
ARM_LoRegV::ARM_LoRegV(ARM_LoRegV&&)
virtual ARM_LoRegV::~ARM_LoRegV()
ARM_LoRegV& ARM_LoRegV::operator=(const ARM_LoRegV&)
virtual ARM_LoRegV* ARM_LoRegV::clone() const

ARM_RegV::ARM_RegV()
ARM_RegV::ARM_RegV(const ARM_RegV&)
ARM_RegV::ARM_RegV(ARM_RegV&&)
virtual ARM_RegV::~ARM_RegV()
ARM_RegV& ARM_RegV::operator=(const ARM_RegV&)
virtual ARM_RegV* ARM_RegV::clone() const

ostream& arm(ostream&)
void dumpARMBasicBlock(ostream&, const WIR_BasicBlock&)
void dumpARMCompilationUnit(ostream&, const WIR_CompilationUnit&)
void dumpARMData(ostream&, const WIR_Data&)
void dumpARMDataSection(ostream&, WIR_Section*, const list<reference_wrapper<WIR_Data> >&, bool)
void dumpARMFunction(ostream&, const WIR_Function&)
void dumpARMLdScript(ostream&, const WIR_System&)
bool dumpARMLdScriptSection(ostream&, const WIR_Section&)
void dumpARMOperation(ostream&, const WIR_Operation&)
void dumpARMRegisterParameter(ostream&, const WIR_RegisterParameter&)
void dumpARMComment(ostream&, const WIR_Comment&)
void dumpARMFileInfo(ostream&, const WIR_FileInfo&)

ARMv4T::ARMv4T()
ARMv4T::ARMv4T(const ARMv4T&)
virtual ARMv4T::~ARMv4T()
static void ARMv4T::init()
virtual WIR_BaseProcessor* ARMv4T::clone() const

ARMv5T::ARMv5T()
ARMv5T::ARMv5T(const ARMv5T&)
virtual ARMv5T::~ARMv5T()
static void ARMv5T::init()
virtual WIR_BaseProcessor* ARMv5T::clone() const

ARMv5TE::ARMv5TE()
ARMv5TE::ARMv5TE(const ARMv5TE&)
virtual ARMv5TE::~ARMv5TE()
static void ARMv5TE::init()
const ARMv5TE_PRegP& ARMv5TE::P6() const
virtual WIR_BaseProcessor* ARMv5TE::clone() const

virtual ARMv5TE_PRegP::~ARMv5TE_PRegP()
ARMv5TE_PRegP::ARMv5TE_PRegP(const string&, bool)
ARMv5TE_PRegP::ARMv5TE_PRegP(const ARMv5TE_PRegP&)
void ARMv5TE_PRegP::addChilds(const WIR_PhysicalRegister&, const WIR_PhysicalRegister&)
virtual ARMv5TE_PRegP* ARMv5TE_PRegP::clone() const

ARMv5TE_PRegV::ARMv5TE_PRegV()
virtual ARMv5TE_PRegV::~ARMv5TE_PRegV()
virtual ARMv5TE_PRegV* ARMv5TE_PRegV::clone() const

ARMv5TEJ::ARMv5TEJ()
ARMv5TEJ::ARMv5TEJ(const ARMv5TEJ&)
virtual ARMv5TEJ::~ARMv5TEJ()
static void ARMv5TEJ::init()
virtual WIR_BaseProcessor* ARMv5TEJ::clone() const

ARMv6::ARMv6()
ARMv6::ARMv6(const ARMv6&)
virtual ARMv6::~ARMv6()
static void ARMv6::init()
virtual WIR_BaseProcessor* ARMv6::clone() const


#
# RISC-V Processor Model
#

RV32I::RV32I()
RV32I::RV32I(const RV32I&)
RV32I::RV32I(RV32I&&)
RV32I::~RV32I()
static void RV32I::init()
const RV_RegP& RV32I::x0() const
const RV_RegP& RV32I::x1() const
const RV_RegP& RV32I::x2() const
const RV_RegP& RV32I::x3() const
const RV_RegP& RV32I::x4() const
const RV_RegP& RV32I::x5() const
const RV_RegP& RV32I::x6() const
const RV_RegP& RV32I::x7() const
const RV_RegP& RV32I::x8() const
const RV_RegP& RV32I::x9() const
const RV_RegP& RV32I::x10() const
const RV_RegP& RV32I::x11() const
const RV_RegP& RV32I::x12() const
const RV_RegP& RV32I::x13() const
const RV_RegP& RV32I::x14() const
const RV_RegP& RV32I::x15() const
const RV_RegP& RV32I::x16() const
const RV_RegP& RV32I::x17() const
const RV_RegP& RV32I::x18() const
const RV_RegP& RV32I::x19() const
const RV_RegP& RV32I::x20() const
const RV_RegP& RV32I::x21() const
const RV_RegP& RV32I::x22() const
const RV_RegP& RV32I::x23() const
const RV_RegP& RV32I::x24() const
const RV_RegP& RV32I::x25() const
const RV_RegP& RV32I::x26() const
const RV_RegP& RV32I::x27() const
const RV_RegP& RV32I::x28() const
const RV_RegP& RV32I::x29() const
const RV_RegP& RV32I::x30() const
const RV_RegP& RV32I::x31() const
const RV_RegP& RV32I::RA() const
const RV_RegP& RV32I::SP() const
static bool RV32I::isX0(const WIR_BaseRegister&)
static void RV32I::adjustStack(WIR_Function&, int, const list<reference_wrapper<WIR_Instruction> >&)
virtual WIR_BaseProcessor* RV32I::clone()

RV32IC::RV32IC()
RV32IC::RV32IC(const RV32IC&)
virtual RV32IC::~RV32IC()
static void RV32IC::init()
virtual WIR_BaseProcessor* RV32IC::clone() const

RV32IM::RV32IM()
RV32IM::RV32IM(const RV32IM&)
virtual RV32IM::~RV32IM()
static void RV32IM::init()
virtual WIR_BaseProcessor* RV32IM::clone() const

RV32IMC::RV32IMC()
RV32IMC::RV32IMC(const RV32IMC&)
virtual RV32IMC::~RV32IMC()
static void RV32IMC::init()
virtual WIR_BaseProcessor* RV32IMC::clone() const

RV_Const5_Unsigned::RV_Const5_Unsigned(long long unsigned int)
RV_Const5_Unsigned::RV_Const5_Unsigned(const RV_Const5_Unsigned&)
RV_Const5_Unsigned::RV_Const5_Unsigned(RV_Const5_Unsigned&&)
virtual RV_Const5_Unsigned::~RV_Const5_Unsigned()
RV_Const5_Unsigned& RV_Const5_Unsigned::operator=(const RV_Const5_Unsigned&)
RV_Const5_Unsigned& RV_Const5_Unsigned::operator=(RV_Const5_Unsigned&&)

RV_Const6_Signed::RV_Const6_Signed(long long int)
RV_Const6_Signed::RV_Const6_Signed(const RV_Const6_Signed&)
RV_Const6_Signed::RV_Const6_Signed(RV_Const6_Signed&&)
virtual RV_Const6_Signed::~RV_Const6_Signed()
RV_Const6_Signed& RV_Const6_Signed::operator=(const RV_Const6_Signed&)
RV_Const6_Signed& RV_Const6_Signed::operator=(RV_Const6_Signed&&)

RV_Const6_Unsigned::RV_Const6_Unsigned(long long unsigned int)
RV_Const6_Unsigned::RV_Const6_Unsigned(const RV_Const6_Unsigned&)
RV_Const6_Unsigned::RV_Const6_Unsigned(RV_Const6_Unsigned&&)
virtual RV_Const6_Unsigned::~RV_Const6_Unsigned()
RV_Const6_Unsigned& RV_Const6_Unsigned::operator=(const RV_Const6_Unsigned&)
RV_Const6_Unsigned& RV_Const6_Unsigned::operator=(RV_Const6_Unsigned&&)

RV_Const8_Unsigned::RV_Const8_Unsigned(long long unsigned int)
RV_Const8_Unsigned::RV_Const8_Unsigned(const RV_Const8_Unsigned&)
RV_Const5_Unsigned::RV_Const8_Unsigned(RV_Const8_Unsigned&&)
virtual RV_Const8_Unsigned::~RV_Const8_Unsigned()
RV_Const8_Unsigned& RV_Const8_Unsigned::operator=(const RV_Const8_Unsigned&)
RV_Const8_Unsigned& RV_Const8_Unsigned::operator=(RV_Const8_Unsigned&&)

RV_Const12_Signed::RV_Const12_Signed(long long int)
RV_Const12_Signed::RV_Const12_Signed(const RV_Const12_Signed&)
RV_Const12_Signed::RV_Const12_Signed(RV_Const12_Signed&&)
virtual RV_Const12_Signed::~RV_Const12_Signed()
RV_Const12_Signed& RV_Const12_Signed::operator=(const RV_Const12_Signed&)
RV_Const12_Signed& RV_Const12_Signed::operator=(RV_Const12_Signed&&)

RV_Const20_Unsigned::RV_Const20_Unsigned(long long unsigned int)
RV_Const20_Unsigned::RV_Const20_Unsigned(const RV_Const20_Unsigned&)
RV_Const20_Unsigned::RV_Const20_Unsigned(RV_Const20_Unsigned&&)
virtual RV_Const20_Unsigned::~RV_Const20_Unsigned()
RV_Const20_Unsigned& RV_Const20_Unsigned::operator=(const RV_Const20_Unsigned&)
RV_Const20_Unsigned& RV_Const20_Unsigned::operator=(RV_Const20_Unsigned&&)

virtual RV_RegP::~RV_RegP()
RV_RegP::RV_RegP(const string&, bool)
RV_RegP::RV_RegP(const RV_RegP&)
virtual RV_RegP* RV_RegP::clone() const

RV_RegV::RV_RegV()
RV_RegV::RV_RegV(const RV_RegV&)
RV_RegV::RV_RegV(RV_RegV&&)
virtual RV_RegV::~RV_RegV()
RV_RegV& RV_RegV::operator=(const RV_RegV&)
RV_RegV& RV_RegV::operator=(RV_RegV&&)
virtual RV_RegV* RV_RegV::clone() const

ostream& riscv(ostream&)
void dumpRVBasicBlock(ostream&, const WIR_BasicBlock&)
void dumpRVCompilationUnit(ostream&, const WIR_CompilationUnit&)
void dumpRVFunction(ostream&, const WIR_Function&)
void dumpRVOperation(ostream&, const WIR_Operation&)
void dumpRVRegisterParameter(ostream&, const WIR_RegisterParameter&)
void dumpRVComment(ostream&, const WIR_Comment&)
void dumpRVFileInfo(ostream&, const WIR_FileInfo&)


#
# TriCore Processor Model
#

TC13::TC13()
TC13::TC13(const TC13&)
virtual TC13::~TC13()
static void TC13::init()
const TC_ARegP& TC13::A0() const
const TC_ARegP& TC13::A1() const
const TC_ARegP& TC13::A2() const
const TC_ARegP& TC13::A3() const
const TC_ARegP& TC13::A4() const
const TC_ARegP& TC13::A5() const
const TC_ARegP& TC13::A6() const
const TC_ARegP& TC13::A7() const
const TC_ARegP& TC13::A8() const
const TC_ARegP& TC13::A9() const
const TC_ARegP& TC13::A10() const
const TC_ARegP& TC13::A11() const
const TC_ARegP& TC13::A12() const
const TC_ARegP& TC13::A13() const
const TC_ARegP& TC13::A14() const
const TC_ARegP& TC13::A15() const
const TC_ARegP& TC13::SP() const
const TC_ARegP& TC13::RA() const
const TC_DRegP& TC13::D0() const
const TC_DRegP& TC13::D1() const
const TC_DRegP& TC13::D2() const
const TC_DRegP& TC13::D3() const
const TC_DRegP& TC13::D4() const
const TC_DRegP& TC13::D5() const
const TC_DRegP& TC13::D6() const
const TC_DRegP& TC13::D7() const
const TC_DRegP& TC13::D8() const
const TC_DRegP& TC13::D9() const
const TC_DRegP& TC13::D10() const
const TC_DRegP& TC13::D11() const
const TC_DRegP& TC13::D12() const
const TC_DRegP& TC13::D13() const
const TC_DRegP& TC13::D14() const
const TC_DRegP& TC13::D15() const
const TC_ERegP& TC13::E0() const
const TC_ERegP& TC13::E2() const
const TC_ERegP& TC13::E4() const
const TC_ERegP& TC13::E6() const
const TC_ERegP& TC13::E8() const
const TC_ERegP& TC13::E10() const
const TC_ERegP& TC13::E12() const
const TC_ERegP& TC13::E14() const
const TC_PRegP& TC13::P0() const
const TC_PRegP& TC13::P2() const
const TC_PRegP& TC13::P4() const
const TC_PRegP& TC13::P6() const
const TC_PRegP& TC13::P8() const
const TC_PRegP& TC13::P10() const
const TC_PRegP& TC13::P12() const
const TC_PRegP& TC13::P14() const
const TC_PSWBit& TC13::PSW_C() const
static bool TC13::isSP(const WIR_BaseRegister&)
static bool TC13::isRA(const WIR_BaseRegister&)
static bool TC13::isA15(const WIR_BaseRegister&)
static bool TC13::isD15(const WIR_BaseRegister&)
static bool TC13::isPSW_C(const WIR_BaseRegister&)
static bool TC13::isLCReg(const WIR_BaseRegister&)
static bool TC13::isIP(const WIR_Operation&)
static bool TC13::isLP(const WIR_Operation&)
static bool TC13::isLS(const WIR_Operation&)
static void TC13::adjustStack(WIR_Function&, int, const list<reference_wrapper<WIR_Instruction> >&)
static bool TC13::isStackPointerADDIHA(const WIR_Operation&)
static bool TC13::isStackPointerLEA(const WIR_Operation&)
static bool TC13::isStackPointerSUB(const WIR_Operation&)

TC131::TC131()
TC131::TC131(const TC131&)
virtual TC131::~TC131()
static void TC131::init()
virtual WIR_BaseProcessor* TC131::clone() const

virtual TC_ARegP::~TC_ARegP()
TC_ARegP::TC_ARegP(const string&, bool)
TC_ARegP::TC_ARegP(const TC_ARegP&)
virtual TC_ARegP* TC_ARegP::clone() const

TC_ARegV::TC_ARegV()
TC_ARegV::TC_ARegV(const TC_ARegV&)
TC_ARegV::TC_ARegV(TC_ARegV&&)
virtual TC_ARegV::~TC_ARegV()
TC_ARegV& TC_ARegV::operator=(const TC_ARegV&)
TC_ARegV& TC_ARegV::operator=(TC_ARegV&&)
virtual TC_ARegV* TC_ARegV::clone() const

TC_Const1_Unsigned::TC_Const1_Unsigned(long long unsigned int)
TC_Const1_Unsigned::TC_Const1_Unsigned(const TC_Const1_Unsigned&)
TC_Const1_Unsigned::TC_Const1_Unsigned(TC_Const1_Unsigned&&)
virtual TC_Const1_Unsigned::~TC_Const1_Unsigned()
TC_Const1_Unsigned& TC_Const1_Unsigned::operator=(const TC_Const1_Unsigned&)
TC_Const1_Unsigned& TC_Const1_Unsigned::operator=(TC_Const1_Unsigned&&)

TC_Const2_Unsigned::TC_Const2_Unsigned(long long unsigned int)
TC_Const2_Unsigned::TC_Const2_Unsigned(const TC_Const2_Unsigned&)
TC_Const2_Unsigned::TC_Const2_Unsigned(TC_Const2_Unsigned&&)
virtual TC_Const2_Unsigned::~TC_Const2_Unsigned()
TC_Const2_Unsigned& TC_Const2_Unsigned::operator=(const TC_Const2_Unsigned&)
TC_Const2_Unsigned& TC_Const2_Unsigned::operator=(TC_Const2_Unsigned&&)

TC_Const3_Unsigned::TC_Const3_Unsigned(long long unsigned int)
TC_Const3_Unsigned::TC_Const3_Unsigned(const TC_Const3_Unsigned&)
TC_Const3_Unsigned::TC_Const3_Unsigned(TC_Const3_Unsigned&&)
virtual TC_Const3_Unsigned::~TC_Const3_Unsigned()
TC_Const3_Unsigned& TC_Const3_Unsigned::operator=(const TC_Const3_Unsigned&)
TC_Const3_Unsigned& TC_Const3_Unsigned::operator=(TC_Const3_Unsigned&&)

TC_Const4_Signed::TC_Const4_Signed(long long int)
TC_Const4_Signed::TC_Const4_Signed(const TC_Const4_Signed&)
TC_Const4_Signed::TC_Const4_Signed(TC_Const4_Signed&&)
virtual TC_Const4_Signed::~TC_Const4_Signed()
TC_Const4_Signed& TC_Const4_Signed::operator=(const TC_Const4_Signed&)
TC_Const4_Signed& TC_Const4_Signed::operator=(TC_Const4_Signed&&)

TC_Const4_Unsigned::TC_Const4_Unsigned(long long unsigned int)
TC_Const4_Unsigned::TC_Const4_Unsigned(const TC_Const4_Unsigned&)
TC_Const4_Unsigned::TC_Const4_Unsigned(TC_Const4_Unsigned&&)
virtual TC_Const4_Unsigned::~TC_Const4_Unsigned()
TC_Const4_Unsigned& TC_Const4_Unsigned::operator=(const TC_Const4_Unsigned&)
TC_Const4_Unsigned& TC_Const4_Unsigned::operator=(TC_Const4_Unsigned&&)

TC_Const5_Unsigned::TC_Const5_Unsigned(long long unsigned int)
TC_Const5_Unsigned::TC_Const5_Unsigned(const TC_Const5_Unsigned&)
TC_Const5_Unsigned::TC_Const5_Unsigned(TC_Const5_Unsigned&&)
virtual TC_Const5_Unsigned::~TC_Const5_Unsigned()
TC_Const5_Unsigned& TC_Const5_Unsigned::operator=(const TC_Const5_Unsigned&)
TC_Const5_Unsigned& TC_Const5_Unsigned::operator=(TC_Const5_Unsigned&&)

TC_Const8_Unsigned::TC_Const8_Unsigned(long long unsigned int)
TC_Const8_Unsigned::TC_Const8_Unsigned(const TC_Const8_Unsigned&)
TC_Const8_Unsigned::TC_Const8_Unsigned(TC_Const8_Unsigned&&)
virtual TC_Const8_Unsigned::~TC_Const8_Unsigned()
TC_Const8_Unsigned& TC_Const8_Unsigned::operator=(const TC_Const8_Unsigned&)
TC_Const8_Unsigned& TC_Const8_Unsigned::operator=(TC_Const8_Unsigned&&)

TC_Const9_Signed::TC_Const9_Signed(long long int)
TC_Const9_Signed::TC_Const9_Signed(const TC_Const9_Signed&)
TC_Const9_Signed::TC_Const9_Signed(TC_Const9_Signed&&)
virtual TC_Const9_Signed::~TC_Const9_Signed()
TC_Const9_Signed& TC_Const9_Signed::operator=(const TC_Const9_Signed&)
TC_Const9_Signed& TC_Const9_Signed::operator=(TC_Const9_Signed&&)

TC_Const9_Unsigned::TC_Const9_Unsigned(long long unsigned int)
TC_Const9_Unsigned::TC_Const9_Unsigned(const TC_Const9_Unsigned&)
TC_Const9_Unsigned::TC_Const9_Unsigned(TC_Const9_Unsigned&&)
virtual TC_Const9_Unsigned::~TC_Const9_Unsigned()
TC_Const9_Unsigned& TC_Const9_Unsigned::operator=(const TC_Const9_Unsigned&)
TC_Const9_Unsigned& TC_Const9_Unsigned::operator=(TC_Const9_Unsigned&&)

TC_Const10_Signed::TC_Const10_Signed(long long int)
TC_Const10_Signed::TC_Const10_Signed(const TC_Const10_Signed&)
TC_Const10_Signed::TC_Const10_Signed(TC_Const10_Signed&&)
virtual TC_Const10_Signed::~TC_Const10_Signed()
TC_Const10_Signed& TC_Const10_Signed::operator=(const TC_Const10_Signed&)
TC_Const10_Signed& TC_Const10_Signed::operator=(TC_Const10_Signed&&)

TC_Const10_Unsigned::TC_Const10_Unsigned(long long unsigned int)
TC_Const10_Unsigned::TC_Const10_Unsigned(const TC_Const10_Unsigned&)
TC_Const10_Unsigned::TC_Const10_Unsigned(TC_Const10_Unsigned&&)
virtual TC_Const10_Unsigned::~TC_Const10_Unsigned()
TC_Const10_Unsigned& TC_Const10_Unsigned::operator=(const TC_Const10_Unsigned&)
TC_Const10_Unsigned& TC_Const10_Unsigned::operator=(TC_Const10_Unsigned&&)
void TC_Const10_Unsigned::setValue(long long unsigned int)

TC_Const16_Signed::TC_Const16_Signed(long long int)
TC_Const16_Signed::TC_Const16_Signed(const TC_Const16_Signed&)
TC_Const16_Signed::TC_Const16_Signed(TC_Const16_Signed&&)
virtual TC_Const16_Signed::~TC_Const16_Signed()
TC_Const16_Signed& TC_Const16_Signed::operator=(const TC_Const16_Signed&)
TC_Const16_Signed& TC_Const16_Signed::operator=(TC_Const16_Signed&&)

TC_Const16_Unsigned::TC_Const16_Unsigned(long long unsigned int)
TC_Const16_Unsigned::TC_Const16_Unsigned(const TC_Const16_Unsigned&)
TC_Const16_Unsigned::TC_Const16_Unsigned(TC_Const16_Unsigned&&)
virtual TC_Const16_Unsigned::~TC_Const16_Unsigned()
TC_Const16_Unsigned& TC_Const16_Unsigned::operator=(const TC_Const16_Unsigned&)
TC_Const16_Unsigned& TC_Const16_Unsigned::operator=(TC_Const16_Unsigned&&)

TC_Const18_Unsigned::TC_Const18_Unsigned(long long unsigned int)
TC_Const18_Unsigned::TC_Const18_Unsigned(const TC_Const18_Unsigned&)
TC_Const18_Unsigned::TC_Const18_Unsigned(TC_Const18_Unsigned&&)
virtual TC_Const18_Unsigned::~TC_Const18_Unsigned()
TC_Const18_Unsigned& TC_Const18_Unsigned::operator=(const TC_Const18_Unsigned&)
TC_Const18_Unsigned& TC_Const18_Unsigned::operator=(TC_Const18_Unsigned&&)
void TC_Const18_Unsigned::setValue(long long unsigned int)

virtual TC_DRegP::~TC_DRegP()
TC_DRegP::TC_DRegP(const string&, bool)
TC_DRegP::TC_DRegP(const TC_DRegP&)
virtual TC_DRegP* TC_DRegP::clone() const

TC_DRegV::TC_DRegV()
TC_DRegV::TC_DRegV(const TC_DRegV&)
TC_DRegV::TC_DRegV(TC_DRegV&&)
virtual TC_DRegV::~TC_DRegV()
TC_DRegV& TC_DRegV::operator=(const TC_DRegV&)
TC_DRegV& TC_DRegV::operator=(TC_DRegV&&)
virtual TC_DRegV* TC_DRegV::clone() const

virtual TC_ERegP::~TC_ERegP()
TC_ERegP::TC_ERegP(const string&, bool)
TC_ERegP::TC_ERegP(const TC_ERegP&)
void TC_ERegP::addChilds(const WIR_PhysicalRegister&, const WIR_PhysicalRegister&)
virtual TC_ERegP* TC_ERegP::clone() const

TC_ERegV::TC_ERegV()
TC_ERegV::TC_ERegV(const TC_ERegV&)
TC_ERegV::TC_ERegV(TC_ERegV&&)
virtual TC_ERegV::~TC_ERegV()
TC_ERegV& TC_ERegV::operator=(const TC_ERegV&)
TC_ERegV& TC_ERegV::operator=(TC_ERegV&&)
virtual TC_ERegV* TC_ERegV::clone() const

virtual TC_PRegP::~TC_PRegP()
TC_PRegP::TC_PRegP(const string&, bool)
TC_PRegP::TC_PRegP(const TC_PRegP&)
void TC_PRegP::addChilds(const WIR_PhysicalRegister&, const WIR_PhysicalRegister&)
virtual TC_PRegP* TC_PRegP::clone() const

TC_PRegV::TC_PRegV()
TC_PRegV::TC_PRegV(const TC_PRegV&)
TC_PRegV::TC_PRegV(TC_PRegV&&)
virtual TC_PRegV::~TC_PRegV()
TC_PRegV& TC_PRegV::operator=(const TC_PRegV&)
TC_PRegV& TC_PRegV::operator=(TC_PRegV&&)
virtual TC_PRegV* TC_PRegV::clone() const

virtual TC_PSWBit::~TC_PSWBit()
TC_PSWBit::TC_PSWBit(const string&, bool)
TC_PSWBit::TC_PSWBit(const TC_PSWBit&)
virtual TC_PSWBit* TC_PSWBit::clone() const

ostream& tricore(ostream&)
void dumpTCBasicBlock(ostream&, const WIR_BasicBlock&)
void dumpTCCompilationUnit(ostream&, const WIR_CompilationUnit&)
void dumpTCData(ostream&, const WIR_Data&)
void dumpTCDataSection(ostream&, WIR_Section*, const list<reference_wrapper<WIR_Data> >&, bool)
void dumpTCFunction(ostream&, const WIR_Function&)
void dumpTCLdScript(ostream&, const WIR_System&)
bool dumpTCLdScriptSection(ostream&, const WIR_Section&)
void dumpTCOperation(ostream&, const WIR_Operation&)
void dumpTCRegisterParameter(ostream&, const WIR_RegisterParameter&)
void dumpTCComment(ostream&, const WIR_Comment&)
void dumpTCFileInfo(ostream&, const WIR_FileInfo&)

TC_AsmAddress::TC_AsmAddress(TC_AsmRegister*, long long int, TC_AsmArgument::Type)
TC_AsmAddress::TC_AsmAddress(TC_AsmRegister*, TC_AsmArgument::Type, const string&)
virtual TC_AsmAddress::~TC_AsmAddress()
virtual bool TC_AsmAddress::isCompatible(TC_AsmArgument::Type) const
const WIR_BaseRegister& TC_AsmAddress::getRegister() const
long long int TC_AsmAddress::getOffset() const
string TC_AsmAddress::getName() const

TC_AsmArgument::TC_AsmArgument(TC_AsmArgument::Type)
TC_AsmArgument::TC_AsmArgument(const TC_AsmArgument&)
virtual TC_AsmArgument::~TC_AsmArgument()
void TC_AsmArgument::setType(TC_AsmArgument::Type)
TC_AsmArgument::Type TC_AsmArgument::getType() const

TC_AsmConstant::TC_AsmConstant(long long int)
TC_AsmConstant::TC_AsmConstant(long long unsigned int)
virtual TC_AsmConstant::~TC_AsmConstant()
virtual bool TC_AsmConstant::isCompatible(TC_AsmArgument::Type) const
long long int TC_AsmConstant::getSignedValue() const
long long unsigned int TC_AsmConstant::getUnsignedValue() const
static TC_AsmArgument::Type TC_AsmConstant::determineSignedType(long long int)
static TC_AsmArgument::Type TC_AsmConstant::determineUnsignedType(long long unsigned int)

TC_AsmContext::~TC_AsmContext()
TC_AsmArgument* TC_AsmContext::getTemplateArgument(unsigned int) const
bool TC_AsmContext::hasTemplateArguments() const
bool TC_AsmContext::pushBackOperation(const MnemonicData&, const vector<TC_AsmArgument*>&)
void TC_AsmContext::insertBasicBlock(const string&)
TC13& TC_AsmContext::getProcessor() const
const list<reference_wrapper<WIR_BasicBlock> >& TC_AsmContext::getBasicBlocks() const
const TC_ARegP& TC_AsmContext::getARegP(int) const
const TC_DRegP& TC_AsmContext::getDRegP(int) const
const TC_ERegP& TC_AsmContext::getERegP(int) const
const TC_PRegP& TC_AsmContext::getPRegP(int) const
const TC_PSWBit& TC_AsmContext::getPSW_C() const
void TC_AsmContext::setError(const location&, const string&)
string TC_AsmContext::getErrMessage() const
location TC_AsmContext::getErrLocation() const
void TC_AsmContext::setGenerate16BitOperations(bool)
bool TC_AsmContext::getGenerate16BitOperations() const
TC_AsmContext::TC_AsmContext(const vector<unique_ptr<TC_AsmArgument> >&, WIR_BasicBlock&)
void TC_AsmContext::check16BitOperation(const WIR_Operation&) const

TC_AsmLabel::TC_AsmLabel(const string&)
virtual TC_AsmLabel::~TC_AsmLabel()
virtual bool TC_AsmLabel::isCompatible(TC_AsmArgument::Type) const
string TC_AsmLabel::getName() const

TC_AsmLex::TC_AsmLex(TC_AsmContext&, istream*, bool, ostream*)
virtual TC_AsmLex::~TC_AsmLex()
void TC_AsmLex::setDebug(bool)

TC_AsmParser::TC_AsmParser()
TC_AsmParser::~TC_AsmParser()
void TC_AsmParser::setDebugScanner(bool)
void TC_AsmParser::setDebugParser(bool)
const list<reference_wrapper<WIR_BasicBlock> >& TC_AsmParser::run(const string&, const vector<unique_ptr<TC_AsmArgument> >&, WIR_BasicBlock&, const string&)
const list<reference_wrapper<WIR_BasicBlock> >& TC_AsmParser::run(istream&, const vector<unique_ptr<TC_AsmArgument> >&, WIR_BasicBlock&, const string&)
void TC_AsmParser::setGenerate16BitOperations(bool)
bool TC_AsmParser::getGenerate16BitOperations() const
void TC_AsmParser::resolveStringLabels()

TC_AsmRegister::TC_AsmRegister()
TC_AsmRegister::TC_AsmRegister(const WIR_BaseRegister&, TC_AsmArgument::Type)
TC_AsmRegister::TC_AsmRegister(const TC_AsmRegister&)
virtual TC_AsmRegister::~TC_AsmRegister()
virtual bool TC_AsmRegister::isCompatible(TC_AsmArgument::Type) const
virtual const WIR_BaseRegister& TC_AsmRegister::getRegister() const
virtual TC_AsmRegister* TC_AsmRegister::clone() const

virtual TC_AsmRegisterInitializer::~TC_AsmRegisterInitializer()

TC_AsmTemplateRegister::TC_AsmTemplateRegister(TC_AsmRegisterInitializer*)
TC_AsmTemplateRegister::TC_AsmTemplateRegister(const TC_AsmTemplateRegister&)
virtual TC_AsmTemplateRegister::~TC_AsmTemplateRegister()
virtual bool TC_AsmTemplateRegister::isCompatible(TC_AsmArgument::Type) const
virtual const WIR_BaseRegister& TC_AsmTemplateRegister::getRegister() const
void TC_AsmTemplateRegister::setEReg(bool)
virtual TC_AsmTemplateRegister* TC_AsmTemplateRegister::clone() const
TC_AsmTemplateRegister::templateRegisterData::templateRegisterData(TC_AsmRegisterInitializer*)

virtual void TC_AsmYacc::error(const location_type&, const string&)


#
# WIR Analyses
#

WIR_Analysis::WIR_Analysis(WIR_System&)
WIR_Analysis::WIR_Analysis(WIR_CompilationUnit&)
WIR_Analysis::WIR_Analysis(WIR_Function&)
WIR_Analysis::WIR_Analysis(WIR_BasicBlock&)
WIR_Analysis::WIR_Analysis(WIR_Instruction&)
WIR_Analysis::WIR_Analysis(WIR_Operation&)
virtual WIR_Analysis::~WIR_Analysis()
void WIR_Analysis::analyze()
virtual void WIR_Analysis::runAnalysis(WIR_System&)
virtual void WIR_Analysis::runAnalysis(WIR_CompilationUnit&)
virtual void WIR_Analysis::runAnalysis(WIR_Function&)
virtual void WIR_Analysis::runAnalysis(WIR_BasicBlock&)
virtual void WIR_Analysis::runAnalysis(WIR_Instruction&)
virtual void WIR_Analysis::runAnalysis(WIR_Operation&)

WIR_AvailableDefinitionsAnalysis::WIR_AvailableDefinitionsAnalysis(WIR_Function&)
virtual WIR_AvailableDefinitionsAnalysis::~WIR_AvailableDefinitionsAnalysis()
virtual void WIR_AvailableDefinitionsAnalysis::runAnalysis(WIR_Function&)
void WIR_AvailableDefinitionsAnalysis::init(WIR_Function&)
void WIR_AvailableDefinitionsAnalysis::propagateIns2BB(WIR_Function&)
void WIR_AvailableDefinitionsAnalysis::propagateBB2Ins(WIR_Function&)

WIR_BasicBlockTreeNode::WIR_BasicBlockTreeNode(WIR_BasicBlock&)
virtual WIR_BasicBlockTreeNode::~WIR_BasicBlockTreeNode()
virtual WIR_CTNodeType WIR::WIR_BasicBlockTreeNode::getType() const
virtual bool WIR_BasicBlockTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_BasicBlockTreeNode::getEntry() const
WIR_BasicBlock& WIR_BasicBlockTreeNode::getBasicBlock() const
virtual void WIR_BasicBlockTreeNode::visualize(fstream&) const

WIR_BlockTreeNode::WIR_BlockTreeNode()
virtual WIR_BlockTreeNode::~WIR_BlockTreeNode()
virtual WIR_CTNodeType WIR::WIR_BlockTreeNode::getType() const
const list<reference_wrapper<WIR_ControlTreeNode> > WIR_BlockTreeNode::getBlockList() const
virtual bool WIR_BlockTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_BlockTreeNode::getEntry() const
const list<reference_wrapper<WIR_ControlTreeNode> >& WIR_BlockTreeNode::getBlockList() const
virtual void WIR_BlockTreeNode::visualize(fstream&) const
void WIR_BlockTreeNode::pushBackBlockNode(WIR_ControlTreeNode&)

WIR_BitDFA::WIR_BitDFA(WIR_Function&)
virtual WIR_BitDFA::~WIR_BitDFA()
static unsigned int WIR_BitDFA::getHierarchicalRegisterOffset(const WIR_RegisterParameter&, const WIR_RegisterParameter&)
static WIR_UpDownValue WIR_BitDFA::getHierarchicalUpDownValue(const WIR_RegisterParameter&, const WIR_RegisterParameter&, const WIR_UpDownValue&, bool)
static void WIR_BitDFA::combineInEdge(const WIR_Parameter&, const WIR_Parameter&, const WIR_UpDownValue&, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&)
static void WIR_BitDFA::combineOutEdge(const WIR_RegisterParameter&, const WIR_RegisterParameter&, const WIR_UpDownValue&, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&)
virtual void WIR_BitDFA::runAnalysis(WIR_Function&)
virtual void WIR_BitDFA::runAnalysis(WIR_Function&).topdown.visualize
virtual void WIR_BitDFA::runAnalysis(WIR_Function&).bottomup.visualize
unsigned int WIR_BitDFA::getHierarchicalRegisterOffset(WIR_DFG::DGraphEdge) const
WIR_UpDownValue WIR_BitDFA::getHierarchicalUpDownValue(WIR_DFG::DGraphEdge, const WIR_UpDownValue&, bool) const
void WIR_BitDFA::init(WIR_Function&)
void WIR_BitDFA::topDownAnalysis()
void WIR_BitDFA::topDownAnalysis(WIR_DFG::DGraphVertex, const WIR_Operation&)
void WIR_BitDFA::bottomUpAnalysis()
void WIR_BitDFA::bottomUpAnalysis(WIR_DFG::DGraphVertex, const WIR_Operation&)
void WIR_BitDFA::combineInEdge(WIR_DFG::DGraphEdge, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&, bool) const
void WIR_BitDFA::combineOutEdge(WIR_DFG::DGraphEdge, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&) const
static WIR_UpDownValue WIR_BitDFA::combine(const WIR_UpDownValue&, const WIR_UpDownValue&, unsigned int)
void WIR_BitDFA::createContainers()

WIR_CFG::WIR_CFG(WIR_Function&, bool, bool, bool)
WIR_CFG::~WIR_CFG()
void WIR_CFG::visualize(bool) const
const list<reference_wrapper<WIR_BasicBlock> >& WIR_CFG::getDFSOrder() const
const list<reference_wrapper<WIR_BasicBlock> >& WIR_CFG::getReversePostOrder() const
const list<reference_wrapper<WIR_BasicBlock> >& WIR_CFG::getReverseTopologicalOrder() const
const WIR_BasicBlockSet& WIR_CFG::getStartNodes() const
void WIR_CFG::rebuild()
void WIR_CFG::addNodes()
void WIR_CFG::addEdges()
void WIR_CFG::classify()
void WIR_CFG::visualizeNodes(fstream&, map<unsigned int, unsigned int>&, bool) const
void WIR_CFG::visualizeEdges(fstream&, const map<unsigned int, unsigned int>&) const
string WIR_CFG::buildNodeName(const WIR_CFG::CGraphVertex, bool) const
WIR_CFG::CFGVisitor::CFGVisitor(WIR_BasicBlockSet&, list<reference_wrapper<WIR_BasicBlock> >&, list<reference_wrapper<WIR_BasicBlock> >&, list<reference_wrapper<WIR_BasicBlock> >&, map<CGraphEdge, WIR_CFGEdgeType>&, set<CGraphEdge>&)
void WIR_CFG::CFGVisitor::start_vertex(WIR_CFG::CGraphVertex, const CGraph&) const
void WIR_CFG::CFGVisitor::discover_vertex(WIR_CFG::CGraphVertex, const CGraph&) const
void WIR_CFG::CFGVisitor::finish_vertex(WIR_CFG::CGraphVertex, const CGraph&) const
void WIR_CFG::CFGVisitor::examine_edge(WIR_CFG::CGraphEdge, const CGraph&) const
void WIR_CFG::CFGVisitor::back_edge(WIR_CFG::CGraphEdge, const CGraph&) const

WIR_CFGNodeProperty::WIR_CFGNodeProperty(WIR_BasicBlock&)
WIR_CFGNodeProperty::~WIR_CFGNodeProperty()
WIR_CFGNodeType WIR_CFGNodeProperty::getType() const
WIR_BasicBlock& WIR_CFGNodeProperty::getBasicBlock() const
bool WIR_CFGNodeProperty::isStart() const
void WIR_CFGNodeProperty::setStart(bool)

WIR_ControlFlowAnalysis::WIR_ControlFlowAnalysis(WIR_Function&)
virtual WIR_ControlFlowAnalysis::~WIR_ControlFlowAnalysis()

WIR_ControlTreeNode::WIR_ControlTreeNode()
virtual WIR_ControlTreeNode::~WIR_ControlTreeNode()
bool WIR_ControlTreeNode::isAcyclic() const
bool WIR_ControlTreeNode::isEntry() const
const WIR_ControlTreeNodeSet& WIR_ControlTreeNode::getChilds() const
WIR_ControlTreeNodeSet::const_iterator WIR_ControlTreeNode::begin() const
WIR_ControlTreeNodeSet::const_iterator WIR_ControlTreeNode::end() const
WIR_ControlTreeNode& WIR_ControlTreeNode::getParent() const
WIR_ControlTreeNode& WIR_ControlTreeNode::getRoot() const
WIR_BasicBlockSet WIR_ControlTreeNode::getBasicBlocks() const
const WIR_ControlTreeEdgeSet& WIR_ControlTreeNode::getBackEdges() const
string WIR_ControlTreeNode::buildNodeName() const
void WIR_ControlTreeNode::insertChild(WIR_ControlTreeNode*)

WIR_DFG::WIR_DFG(WIR_Function&, bool, bool)
WIR_DFG::~WIR_DFG()
void WIR_DFG::build()
long long int WIR_DFG::getDistance(const WIR_Operation&, const WIR_Operation&) const
void WIR_DFG::visualize() const
void WIR_DFG::addNodes()
void WIR_DFG::addEdges()
void WIR_DFG::classify()
void WIR_DFG::computeDistances()
void WIR_DFG::visualizeNodes(fstream&, map<unsigned int, unsigned int>&, map<long long unsigned int, unsigned int>&) const
void WIR_DFG::visualizeEdges(fstream&, const map<unsigned int, unsigned int>&, const map<long long unsigned int, unsigned int>&) const
string WIR_DFG::buildNodeName(WIR_DFG::DGraphVertex) const

WIR_DFGEdgeProperty::WIR_DFGEdgeProperty(const WIR_RegisterParameter&, const WIR_RegisterParameter&, const WIR_DFG&)
WIR_DFGEdgeProperty::WIR_DFGEdgeProperty(const WIR_BaseImmediateParameter&, const WIR_DFG&)
WIR_DFGEdgeProperty::WIR_DFGEdgeProperty(const WIR_RegisterParameter&, const WIR_DFG&)
WIR_DFGEdgeProperty::~WIR_DFGEdgeProperty()
WIR_DFGNodeType WIR_DFGEdgeProperty::getType() const
const WIR_RegisterParameter& WIR_DFGEdgeProperty::getSourceRegisterParameter() const
const WIR_RegisterParameter& WIR_DFGEdgeProperty::getTargetRegisterParameter() const
const WIR_BaseImmediateParameter& WIR_DFGEdgeProperty::getImmediateParameter() const
void WIR_DFGEdgeProperty::setDownValue(WIR_UpDownValue&&)
WIR_UpDownValue& WIR_DFGEdgeProperty::getDownValue()
void WIR_DFGEdgeProperty::setUpValue(WIR_UpDownValue&&)
WIR_UpDownValue& WIR_DFGEdgeProperty::getUpValue()
void WIR_DFGEdgeProperty::initUpValue()
bool WIR_DFGEdgeProperty::isBackEdge() const
bool WIR_DFGEdgeProperty::isFix() const
void WIR_DFGEdgeProperty::setFix(bool)

WIR_DFGNodeProperty::WIR_DFGNodeProperty(WIR_Operation&)
WIR_DFGNodeProperty::WIR_DFGNodeProperty(WIR_BaseImmediateParameter&)
WIR_DFGNodeProperty::WIR_DFGNodeProperty(WIR_RegisterParameter&)
WIR_DFGNodeProperty::~WIR_DFGNodeProperty()
WIR_DFGNodeType WIR_DFGNodeProperty::getType() const
bool WIR_DFGNodeProperty::isOperation() const
WIR_Operation& WIR_DFGNodeProperty::getOperation() const
WIR_BaseImmediateParameter& WIR_DFGNodeProperty::getImmediateParameter() const
WIR_RegisterParameter& WIR_DFGNodeProperty::getRegisterParameter() const
void WIR_DFGNodeProperty::setSource(bool)
bool WIR_DFGNodeProperty::isSource() const
void WIR_DFGNodeProperty::setSink(bool)
bool WIR_DFGNodeProperty::isSink() const

WIR_DominationAnalysis::WIR_DominationAnalysis(WIR_Function&, bool)
virtual WIR_DominationAnalysis::~WIR_DominationAnalysis()
virtual void WIR_DominationAnalysis::runAnalysis(WIR_Function&)
void WIR_DominationAnalysis::init(WIR_Function&)
void WIR_DominationAnalysis::propagateBB2Ins(WIR_Function&)

WIR_DUUDChainAnalysis::WIR_DUUDChainAnalysis(WIR_Function&)
virtual WIR_DUUDChainAnalysis::~WIR_DUUDChainAnalysis()
void WIR_DUUDChainAnalysis::setVirtualRegistersOnly(bool)
bool WIR_DUUDChainAnalysis::getVirtualRegistersOnly() const
virtual void WIR_DUUDChainAnalysis::runAnalysis(WIR_Function&)
void WIR_DUUDChainAnalysis::init(WIR_Function&)

WIR_HierarchicalCFG::WIR_HierarchicalCFG(WIR_Function&, bool, bool)
WIR_HierarchicalCFG::~WIR_HierarchicalCFG()
void WIR_HierarchicalCFG::dfs()
void WIR_HierarchicalCFG::dfsDryRun()
const list<WIR_ControlTreeNode*>& WIR_HierarchicalCFG::getPostOrder() const
const WIR_HCFGNodeSet& WIR_HierarchicalCFG::getStartNodes() const
unsigned int WIR_HierarchicalCFG::getNumberOfBackEdges() const
void WIR_HierarchicalCFG::visualize() const
void WIR_HierarchicalCFG::addNodes()
void WIR_HierarchicalCFG::addEdges()
void WIR_HierarchicalCFG::visualizeNodes(fstream&) const
void WIR_HierarchicalCFG::visualizeEdges(fstream&) const
WIR_HierarchicalCFG::CFGVisitor::CFGVisitor(WIR_HierarchicalCFG::WIR_HCFGNodeSet&, list<WIR_ControlTreeNode*>&, set<CGraphEdge>&)
void WIR_HierarchicalCFG::CFGVisitor::start_vertex(WIR_HierarchicalCFG::CGraphVertex, const CGraph&) const
void WIR_HierarchicalCFG::CFGVisitor::finish_vertex(WIR_HierarchicalCFG::CGraphVertex, const CGraph&) const
void WIR_HierarchicalCFG::CFGVisitor::back_edge(WIR_HierarchicalCFG::CGraphEdge, const CGraph&) const

WIR_IfThenElseTreeNode::WIR_IfThenElseTreeNode(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)
virtual WIR_IfThenElseTreeNode::~WIR_IfThenElseTreeNode()
virtual WIR_CTNodeType WIR_IfThenElseTreeNode::getType() const
virtual bool WIR_IfThenElseTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_IfThenElseTreeNode::getEntry() const
const WIR_ControlTreeNode& WIR_IfThenElseTreeNode::getCondition() const
const WIR_ControlTreeNode& WIR_IfThenElseTreeNode::getBranch1() const
const WIR_ControlTreeNode& WIR_IfThenElseTreeNode::getBranch2() const
virtual void WIR_IfThenElseTreeNode::visualize(fstream&) const

WIR_IfThenTreeNode::WIR_IfThenTreeNode(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)
virtual WIR_IfThenTreeNode::~WIR_IfThenTreeNode()
virtual WIR_CTNodeType WIR_IfThenTreeNode::getType() const
virtual bool WIR_IfThenTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_IfThenTreeNode::getEntry() const
const WIR_ControlTreeNode& WIR_IfThenTreeNode::getCondition() const
const WIR_ControlTreeNode& WIR_IfThenTreeNode::getBranch() const
virtual void WIR_IfThenTreeNode::visualize(std::fstream&) const

WIR_ImproperTreeNode::WIR_ImproperTreeNode(const WIR_ControlTreeNode&)
virtual WIR_ImproperTreeNode::~WIR_ImproperTreeNode()
virtual WIR_CTNodeType WIR_ImproperTreeNode::getType() const
virtual bool WIR_ImproperTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_ImproperTreeNode::getEntry() const
const WIR_ControlTreeNodeSet& WIR_ImproperTreeNode::getNodes() const
virtual void WIR_ImproperTreeNode::visualize(fstream&) const
void WIR_ImproperTreeNode::insertNode(WIR_ControlTreeNode&)
void WIR_ImproperTreeNode::insertEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)
void WIR_ImproperTreeNode::insertBackEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)

WIR_Interval<BaseType>::WIR_Interval(WIR_Interval<BaseType>::baseType)
WIR_Interval<BaseType>::WIR_Interval(WIR_Interval<BaseType>::baseType, WIR_Interval<BaseType>::baseType)
WIR_Interval<BaseType>::WIR_Interval(const initializer_list<IntType>&)
WIR_Interval<BaseType>::WIR_Interval(const intervalType&)
WIR_Interval<BaseType>::~WIR_Interval()
WIR_Interval<BaseType>::baseType WIR_Interval<BaseType>::getLower() const
WIR_Interval<BaseType>::baseType WIR_Interval<BaseType>::getUpper() const
void WIR_Interval<BaseType>::setUpper(WIR_Interval<BaseType>::baseType)
bool WIR_Interval<BaseType>::isValid() const
bool WIR_Interval<BaseType>::isEmpty() const
bool WIR_Interval<BaseType>::operator==(const WIR_Interval<IntType>&) const
bool WIR_Interval<BaseType>::operator<(const WIR_Interval<IntType>&) const
WIR_Interval<BaseType>::intervalType& WIR_Interval<BaseType>::operator=(WIR_Interval<BaseType>::intervalType&&)
WIR_Interval<BaseType>::intervalType& WIR_Interval<BaseType>::operator+=(const WIR_Interval<IntType>&)
WIR_Interval<BaseType>::intervalType& WIR_Interval<BaseType>::operator-=(const WIR_Interval<IntType>&)
bool WIR_Interval<BaseType>::hasEmptyIntersection(const WIR_Interval<IntType>&) const
void WIR_Interval<BaseType>::intersect(const WIR_Interval<IntType>&)
WIR_Interval<BaseType>::intervalType WIR_Interval<BaseType>::intersection(const WIR_Interval<IntType>&) const
WIR_Interval<BaseType>::intervalSet WIR_Interval<BaseType>::difference(const WIR_Interval<IntType>&) const
static void WIR_Interval<BaseType>::checkValidity(const WIR_Interval<IntType>&, IntervalTypes&& ...)
static void WIR_Interval<BaseType>::checkValidity(const WIR_Interval<IntType>&)
ostream& operator<<(ostream&, const WIR_Interval<IntegerType>&)

WIR_IntervalSet<IntegerType, CompType>::WIR_IntervalSet()
WIR_IntervalSet<IntegerType, CompType>::WIR_IntervalSet(WIR_IntervalSet<IntegerType, CompType>::intervalType&)
WIR_IntervalSet<IntegerType, CompType>::WIR_IntervalSet(const type&)
WIR_IntervalSet<IntegerType, CompType>::WIR_IntervalSet(WIR_IntervalSet<IntegerType, CompType>::type&&)
WIR_IntervalSet<IntegerType, CompType>::WIR_IntervalSet(WIR_IntervalSet<IntegerType, otherComp>&&)
WIR_IntervalSet<IntegerType, CompType>::~WIR_IntervalSet()
WIR_IntervalSet<IntegerType, CompType>::chunkSetType& WIR_IntervalSet<IntegerType, CompType>::getIntervals() const
size_t WIR_IntervalSet<IntegerType, CompType>::getIntervalCount() const
bool WIR_IntervalSet<IntegerType, CompType>::isEmpty() const
void WIR_IntervalSet<IntegerType, CompType>::clear()
WIR_IntervalSet<IntegerType, CompType>::const_iterator WIR_IntervalSet<IntegerType, CompType>::begin() const
WIR_IntervalSet<IntegerType, CompType>::iterator WIR_IntervalSet<IntegerType, CompType>::begin()
WIR_IntervalSet<IntegerType, CompType>::const_iterator WIR_IntervalSet<IntegerType, CompType>::end() const
WIR_IntervalSet<IntegerType, CompType>::iterator WIR_IntervalSet<IntegerType, CompType>::end()
WIR_IntervalSet<IntegerType, CompType>::type& WIR_IntervalSet<IntegerType, CompType>::operator=(WIR_IntervalSet<IntegerType, CompType>::type&&)
void WIR_IntervalSet<IntegerType, CompType>::unite(const type&)
void WIR_IntervalSet<IntegerType, CompType>::remove(const type&)
WIR_IntervalSet<IntegerType, CompType>::type WIR_IntervalSet<IntegerType, CompType>::difference(const type&) const
WIR_IntervalSet<IntegerType, CompType>::chunkSetType& WIR_IntervalSet<IntegerType, CompType>::getChunks() const
WIR_IntervalSet<IntegerType, CompType>::_chunkSetType& WIR_IntervalSet<IntegerType, CompType>::getChunks()
void WIR_IntervalSet<IntegerType, CompType>::validate() const
void WIR_IntervalSet<IntegerType, CompType>::applyCompression() const
ostream& operator<<(ostream&, const WIR_IntervalSet<BaseType, CompType>&)

WIR_ImmediateDominationAnalysis::WIR_ImmediateDominationAnalysis(WIR_Function&)
virtual WIR_ImmediateDominationAnalysis::~WIR_ImmediateDominationAnalysis()
virtual void WIR_ImmediateDominationAnalysis::runAnalysis(WIR_Function&)
void WIR_ImmediateDominationAnalysis::init(WIR_Function&)

bool operator<(WIR_L4, WIR_L4)
bool operator>(WIR_L4, WIR_L4)
bool WIR_Compare_L4::operator()(WIR_L4, WIR_L4) const
WIR_L4 operator&(WIR_L4, WIR_L4)
WIR_L4 operator|(WIR_L4, WIR_L4)
WIR_L4 operator^(WIR_L4, WIR_L4)
WIR_L4 operator~(WIR_L4)
unsigned int getLevel(WIR_L4)
WIR_L4 com(WIR_L4, WIR_L4)
ostream& operator<<(ostream&, const WIR_L4&)

WIR_LifenessAnalysis::WIR_LifenessAnalysis(WIR_Function&)
virtual WIR_LifenessAnalysis::~WIR_LifenessAnalysis()
virtual void WIR_LifenessAnalysis::runAnalysis(WIR_Function&)
void WIR_LifenessAnalysis::init(WIR_Function&)
void WIR_LifenessAnalysis::propagateIns2BB(WIR_Function&)
void WIR_LifenessAnalysis::propagateBB2Ins(WIR_Function&)

WIR_Location::WIR_Location(const WIR_RegisterParameter&, unsigned int)
WIR_Location::WIR_Location(const WIR_Symbol&, unsigned int)
WIR_Location::WIR_Location(const WIR_Location&)
WIR_Location::WIR_Location(WIR_Location&&)
WIR_Location::~WIR_Location()
WIR_Location& WIR_Location::operator=(const WIR_Location&)
WIR_Location& WIR_Location::operator=(WIR_Location&&)
bool WIR_Location::operator==(const WIR_Location&) const
bool WIR_Location::operator!=(const WIR_Location&) const
WIR_LocationType WIR_Location::getType() const
bool WIR_Location::isRegisterParameter() const
bool WIR_Location::isSymbol() const
const WIR_RegisterParameter& WIR_Location::getRegisterParameter() const
const WIR_Symbol& WIR_Location::getSymbol() const
unsigned int WIR_Location::getBitPosition() const

WIR_ModuloIntervalSet<IntegerType, CompType>::WIR_ModuloIntervalSet(WIR_ModuloIntervalSet<IntegerType, CompType>::intType)
WIR_ModuloIntervalSet<IntegerType, CompType>::WIR_ModuloIntervalSet(WIR_ModuloIntervalSet<IntegerType, CompType>::intType, const intervalType&)
WIR_ModuloIntervalSet<IntegerType, CompType>::WIR_ModuloIntervalSet(WIR_ModuloIntervalSet<IntegerType, CompType>::intType, const baseType&)
WIR_ModuloIntervalSet<IntegerType, CompType>::WIR_ModuloIntervalSet(const type&)
WIR_ModuloIntervalSet<IntegerType, CompType>::WIR_ModuloIntervalSet(WIR_ModuloIntervalSet<IntegerType, CompType>::type&&)
WIR_ModuloIntervalSet<IntegerType, CompType>::intType WIR_ModuloIntervalSet<IntegerType, CompType>::getModuloBound() const
WIR_ModuloIntervalSet<IntegerType, CompType>::type& WIR_ModuloIntervalSet<IntegerType, CompType>::operator=(WIR_ModuloIntervalSet<IntegerType, CompType>::type&&)
WIR_ModuloIntervalSet<IntegerType, CompType>::type WIR_ModuloIntervalSet<IntegerType, CompType>::operator-(WIR_ModuloIntervalSet<IntegerType, CompType>::intervalType&) const
WIR_ModuloIntervalSet<IntegerType, CompType>::type& WIR_ModuloIntervalSet<IntegerType, CompType>::operator-=(WIR_ModuloIntervalSet<IntegerType, CompType>::intervalType&)
void WIR_ModuloIntervalSet<IntegerType, CompType>::applyCompression() const

WIR_NaturalLoopTreeNode::WIR_NaturalLoopTreeNode(const WIR_ControlTreeNode&)
virtual WIR_NaturalLoopTreeNode::~WIR_NaturalLoopTreeNode()
virtual WIR_CTNodeType WIR_NaturalLoopTreeNode::getType() const
virtual bool WIR_NaturalLoopTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_NaturalLoopTreeNode::getEntry() const
const WIR_ControlTreeNodeSet& WIR_NaturalLoopTreeNode::getNodes() const
void WIR_NaturalLoopTreeNode::insertNode(WIR_ControlTreeNode&)
void WIR_NaturalLoopTreeNode::insertEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)
void WIR_NaturalLoopTreeNode::insertBackEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)

WIR_ProperTreeNode::WIR_ProperTreeNode(const WIR_ControlTreeNode&)
virtual WIR_ProperTreeNode::~WIR_ProperTreeNode()
virtual WIR_CTNodeType WIR_ProperTreeNode::getType() const
virtual bool WIR_ProperTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_ProperTreeNode::getEntry() const
const WIR_ControlTreeNodeSet& WIR_ProperTreeNode::getNodes() const
virtual void WIR_ProperTreeNode::visualize(fstream&) const
void WIR_ProperTreeNode::insertNode(WIR_ControlTreeNode&)
void WIR_ProperTreeNode::insertEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)

WIR_ReachabilityAnalysis::WIR_ReachabilityAnalysis(WIR_Function&)
virtual WIR_ReachabilityAnalysis::~WIR_ReachabilityAnalysis()
virtual void WIR_ReachabilityAnalysis::runAnalysis(WIR_Function&)
void WIR_ReachabilityAnalysis::init(WIR_Function&)
WIR_ReachabilityAnalysis::ReachabilityVisitor::ReachabilityVisitor(WIR_Reachability&, bool, WIR_CFG::CGraphVertex&)
void WIR_ReachabilityAnalysis::ReachabilityVisitor::discover_vertex(WIR_CFG::CGraphVertex, const CGraph&) const
void WIR_ReachabilityAnalysis::ReachabilityVisitor::back_edge(WIR_CFG::CGraphEdge, const CGraph&) const

WIR_ReachingDefinitionsAnalysis::WIR_ReachingDefinitionsAnalysis(WIR_Function&)
virtual WIR_ReachingDefinitionsAnalysis::~WIR_ReachingDefinitionsAnalysis()
void WIR_ReachingDefinitionsAnalysis::setVirtualRegistersOnly(bool)
bool WIR_ReachingDefinitionsAnalysis::getVirtualRegistersOnly() const
virtual void WIR_ReachingDefinitionsAnalysis::runAnalysis(WIR_Function&)
void WIR_ReachingDefinitionsAnalysis::init(WIR_Function&)
void WIR_ReachingDefinitionsAnalysis::propagateIns2BB(WIR_Function&)
void WIR_ReachingDefinitionsAnalysis::propagateBB2Ins(WIR_Function&)

WIR_SaturatingInt<BaseType>::WIR_SaturatingInt()
WIR_SaturatingInt<BaseType>::WIR_SaturatingInt(const BaseType2&)
WIR_SaturatingInt<BaseType>::WIR_SaturatingInt(const WIR_SaturatingInt<BaseType2>&)
WIR_SaturatingInt<BaseType>::self_type& WIR_SaturatingInt<BaseType>::operator=(const BaseType2&)
WIR_SaturatingInt<BaseType>::self_type& WIR_SaturatingInt<BaseType>::operator=(const WIR_SaturatingInt<BaseType2>&)
WIR_SaturatingInt<BaseType>::self_type& WIR_SaturatingInt<BaseType>::operator+=(const WIR_SaturatingInt<BaseType2>&)
WIR_SaturatingInt<BaseType>::self_type& WIR_SaturatingInt<BaseType>::operator-=(const WIR_SaturatingInt<BaseType2>&)
WIR_SaturatingInt<BaseType>::self_type& WIR_SaturatingInt<BaseType>::operator&=(const WIR_SaturatingInt<BaseType2>&)
WIR_SaturatingInt<BaseType, <anonymous> >::operator BaseType() const
BaseType WIR_SaturatingInt<BaseType>::getContent() const
ostream& operator<<(ostream&, const WIR_SaturatingInt<BaseType>&)

WIR_SelfLoopTreeNode::WIR_SelfLoopTreeNode(const WIR_ControlTreeNode&)
virtual WIR_SelfLoopTreeNode::~WIR_SelfLoopTreeNode()
virtual WIR_CTNodeType WIR_SelfLoopTreeNode::getType() const
virtual bool WIR_SelfLoopTreeNode::isCyclic() const
const WIR_ControlTreeNode& WIR_SelfLoopTreeNode::getEntry() const
virtual void WIR_SelfLoopTreeNode::visualize(fstream&) const

WIR_StructuralAnalysis::WIR_StructuralAnalysis(WIR_Function&, bool, bool)
virtual WIR_StructuralAnalysis::~WIR_StructuralAnalysis()
virtual void WIR_StructuralAnalysis::runAnalysis(WIR_Function&)
virtual void WIR_StructuralAnalysis::runAnalysis(WIR_Function&).init.visualize
virtual void WIR_StructuralAnalysis::runAnalysis(WIR_Function&).visualize
virtual void WIR_StructuralAnalysis::runAnalysis(WIR_Function&).final.visualize
void WIR_StructuralAnalysis::init()
WIR_ControlTreeNode* WIR_StructuralAnalysis::findAcyclicRegion(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_ControlTreeNode* WIR_StructuralAnalysis::findCyclicRegion(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_BlockTreeNode* WIR_StructuralAnalysis::checkBlock(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_IfThenElseTreeNode* WIR_StructuralAnalysis::checkIfThenElse(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_SelfLoopTreeNode* WIR_StructuralAnalysis::checkIfElseSelfLoop(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_IfThenTreeNode* WIR_StructuralAnalysis::checkIfThen(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_SwitchCaseTreeNode* WIR_StructuralAnalysis::checkSwitchCase(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_ProperTreeNode* WIR_StructuralAnalysis::checkProper(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_SelfLoopTreeNode* WIR_StructuralAnalysis::checkSelfLoop(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_ImproperTreeNode* WIR_StructuralAnalysis::checkImproper(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_WhileLoopTreeNode* WIR_StructuralAnalysis::checkWhileLoop(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_NaturalLoopTreeNode* WIR_StructuralAnalysis::checkNaturalLoop(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
WIR_NaturalLoopTreeNode* WIR_StructuralAnalysis::checkRecursionLoop(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
bool WIR_StructuralAnalysis::testProper(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&) const
WIR_id_t WIR_StructuralAnalysis::reduce(WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
bool WIR_StructuralAnalysis::pathBack(WIR_HierarchicalCFG::CGraphVertex, WIR_HierarchicalCFG::CGraphVertex, WIR_HierarchicalCFG::CGraphEdge) const
WIR_ControlTreeNode& WIR_StructuralAnalysis::minimizeImproper(const WIR_ControlTreeNode&, WIR_HierarchicalCFG::WIR_HCFGNodeSet&)
void WIR_StructuralAnalysis::createContainers()

WIR_SwitchCaseTreeNode::WIR_SwitchCaseTreeNode(const WIR_ControlTreeNode&)
virtual WIR_SwitchCaseTreeNode::~WIR_SwitchCaseTreeNode()
virtual WIR_CTNodeType WIR_SwitchCaseTreeNode::getType() const
virtual bool WIR_SwitchCaseTreeNode::isCyclic() const
const WIR_ControlTreeNode& WIR_SwitchCaseTreeNode::getCondition() const
const list<reference_wrapper<WIR_ControlTreeNode> >& WIR_SwitchCaseTreeNode::getCases() const
const list<list<reference_wrapper<WIR_ControlTreeNode> >::const_iterator > WIR_SwitchCaseTreeNode::getFallthroughCases() const
virtual void WIR_SwitchCaseTreeNode::visualize(fstream&) const
void WIR_SwitchCaseTreeNode::pushBackCaseNode(WIR_ControlTreeNode&)
void WIR_SwitchCaseTreeNode::pushBackFallthroughCaseNode(WIR_ControlTreeNode&)

WIR_UpDownValue::WIR_UpDownValue(unsigned int)
WIR_UpDownValue::WIR_UpDownValue(WIR_L4, unsigned int, bool)
WIR_UpDownValue::WIR_UpDownValue(const WIR_BaseImmediateParameter&)
WIR_UpDownValue::WIR_UpDownValue(const WIR_RegisterParameter&, bool, bool)
WIR_UpDownValue::WIR_UpDownValue(const WIR_UpDownValue&)
WIR_UpDownValue::WIR_UpDownValue(WIR_UpDownValue&&)
virtual WIR_UpDownValue::~WIR_UpDownValue()
WIR_UpDownValue& WIR_UpDownValue::operator=(const WIR_UpDownValue&)
WIR_UpDownValue& WIR_UpDownValue::operator=(WIR_UpDownValue&&)
void WIR_UpDownValue::setAllBits(WIR_L4)
void WIR_UpDownValue::setAllBits(WIR_L4, const WIR_Location&)
void WIR_UpDownValue::setBit(unsigned int, WIR_L4)
void WIR_UpDownValue::setBit(unsigned int, WIR_L4, const WIR_Location&)
WIR_L4& WIR_UpDownValue::operator[](unsigned int)
const WIR_L4& WIR_UpDownValue::at(unsigned int) const
const WIR_Location& WIR_UpDownValue::getLocation(unsigned int) const
unsigned int WIR_UpDownValue::getBitWidth() const
long long int WIR_UpDownValue::getSignedValue() const
void WIR_UpDownValue::setSignedness(bool)
bool WIR_UpDownValue::isSigned() const
bool WIR_UpDownValue::isUnsigned() const
bool WIR_UpDownValue::isNumber() const
bool WIR_UpDownValue::isInteger() const
bool WIR_UpDownValue::isBinaryInteger() const
bool WIR_UpDownValue::isPositive() const
bool WIR_UpDownValue::isNegative() const
bool WIR_UpDownValue::containsBit(WIR_L4) const
bool WIR_UpDownValue::containsBits(WIR_L4Set&&) const
bool WIR_UpDownValue::containsOnlyBit(WIR_L4) const
bool WIR_UpDownValue::containsOnlyBits(WIR_L4Set&&) const
bool WIR_UpDownValue::isLocationBit(unsigned int) const
WIR_L4 WIR_UpDownValue::operator==(const WIR_UpDownValue&) const
WIR_L4 WIR_UpDownValue::operator!=(const WIR_UpDownValue&) const
WIR_L4 WIR_UpDownValue::operator>=(const WIR_UpDownValue&) const
WIR_L4 WIR_UpDownValue::operator<(const WIR_UpDownValue&) const
bool WIR_UpDownValue::operator>(const WIR_UpDownValue&) const
bool WIR_UpDownValue::isEqual(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator&(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator|(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator^(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator~() const
WIR_UpDownValue WIR_UpDownValue::operator<<(int) const
WIR_UpDownValue WIR_UpDownValue::operator<<(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator>>(int) const
WIR_UpDownValue WIR_UpDownValue::operator>>(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator+(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator-() const
WIR_UpDownValue WIR_UpDownValue::operator-(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator*(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator/(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::operator%(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::extend(unsigned int) const
WIR_UpDownValue abs(const WIR_UpDownValue&)
WIR_UpDownValue WIR_UpDownValue::combine(const WIR_UpDownValue&) const
WIR_UpDownValue WIR_UpDownValue::extract(unsigned int, unsigned int) const
void insert(WIR_UpDownValue&, const WIR_UpDownValue&, unsigned int)
void WIR_UpDownValue::replaceUByLocation(const WIR_RegisterParameter&)
void WIR_UpDownValue::replaceLocationByU(const WIR_Operation&)
ostream& operator<<(ostream&, const WIR_UpDownValue&)
static WIR_UpDownValue::WIR_BitInfo WIR_UpDownValue::bitAND(WIR_UpDownValue::WIR_BitInfo, WIR_UpDownValue::WIR_BitInfo)
static WIR_UpDownValue::WIR_BitInfo WIR_UpDownValue::bitOR(WIR_UpDownValue::WIR_BitInfo, WIR_UpDownValue::WIR_BitInfo)
static WIR_UpDownValue::WIR_BitInfo WIR_UpDownValue::bitXOR(WIR_UpDownValue::WIR_BitInfo, WIR_UpDownValue::WIR_BitInfo)
static WIR_UpDownValue::WIR_BitInfo WIR_UpDownValue::bitCom(WIR_UpDownValue::WIR_BitInfo, WIR_UpDownValue::WIR_BitInfo)

WIR_WhileLoopTreeNode::WIR_WhileLoopTreeNode(const WIR_ControlTreeNode&)
virtual WIR_WhileLoopTreeNode::~WIR_WhileLoopTreeNode()
virtual WIR_CTNodeType WIR_WhileLoopTreeNode::getType() const
virtual bool WIR_WhileLoopTreeNode::isCyclic() const
virtual const WIR_ControlTreeNode& WIR_WhileLoopTreeNode::getEntry() const
const WIR_ControlTreeNodeSet& WIR_WhileLoopTreeNode::getNodes() const
virtual void WIR_WhileLoopTreeNode::visualize(fstream&) const
void WIR_WhileLoopTreeNode::insertNode(WIR_ControlTreeNode&)
void WIR_WhileLoopTreeNode::insertEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)
void WIR_WhileLoopTreeNode::insertBackEdge(const WIR_ControlTreeNode&, const WIR_ControlTreeNode&)

TC_BitDFA::TC_BitDFA(WIR_Function&)
virtual TC_BitDFA::~TC_BitDFA()
virtual void TC_BitDFA::simulateTopDown(const WIR_Operation&, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&)
virtual void TC_BitDFA::simulateBottomUp(const WIR_Operation&, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&, map<long long unsigned int, WIR_UpDownValue>&)
WIR_UpDownValue TC_BitDFA::ssov(const WIR_UpDownValue&, unsigned int) const
WIR_UpDownValue TC_BitDFA::suov(const WIR_UpDownValue&, unsigned int) const
WIR_UpDownValue TC_BitDFA::leading_ones(const WIR_UpDownValue&) const
WIR_UpDownValue TC_BitDFA::leading_signs(const WIR_UpDownValue&) const
WIR_UpDownValue TC_BitDFA::leading_zeros(const WIR_UpDownValue&) const
WIR_UpDownValue TC_BitDFA::reverse(const WIR_UpDownValue&) const
void TC_BitDFA::arithOp_ADD(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&) const
void TC_BitDFA::arithOp_SH(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, bool) const
void TC_BitDFA::bitOp_DDC5DC5_1(const WIR_UpDownValue&, WIR_UpDownValue&, unsigned int, WIR_UpDownValue&, unsigned int) const
void TC_BitDFA::bitOp_DDC5DC5_2(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, unsigned int, WIR_UpDownValue&, unsigned int) const
void TC_BitDFA::bitOp_AND3(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, unsigned int, WIR_UpDownValue&, unsigned int) const
void TC_BitDFA::bitOp_ANDN3(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, unsigned int, WIR_UpDownValue&, unsigned int) const
void TC_BitDFA::bitOp_DDC9_3(const WIR_UpDownValue&, WIR_UpDownValue&) const
void TC_BitDFA::bitOp_AND_CMP(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, WIR_L4) const
void TC_BitDFA::bitOp_OR_CMP(const WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, WIR_UpDownValue&, WIR_L4) const
void TC_BitDFA::shiftOp_DDC5DC5_2(WIR_UpDownValue&, unsigned int, WIR_UpDownValue&, unsigned int) const


#
# WIR Optimizations
#

WIR_BitOpt::WIR_BitOpt(WIR_Function&)
virtual WIR_BitOpt::~WIR_BitOpt()
void WIR_BitOpt::setRunDFA(bool)
void WIR_BitOpt::setDFA(WIR_BitDFA&)
map<long long unsigned int, WIR_UpDownValue>::iterator WIR_BitOpt::combineOutValues(const WIR_RegisterParameter&, map<long long unsigned int, WIR_UpDownValue>&) const
void WIR_BitOpt::combineInValues(const WIR_RegisterParameter&, map<long long unsigned int, WIR_UpDownValue>&) const
void WIR_BitOpt::updateLocations(WIR_Function&)
void WIR_BitOpt::verifyLocations(const WIR_Function&) const

WIR_BlockSchedulingRegion::WIR_BlockSchedulingRegion(WIR_BasicBlock&, bool, bool)
virtual WIR_BlockSchedulingRegion::~WIR_BlockSchedulingRegion()

WIR_ConstFold::WIR_ConstFold(WIR_Function&)
virtual WIR_ConstFold::~WIR_ConstFold()
virtual void WIR_ConstFold::runOptimization(WIR_Function&)
long long int WIR_ConstFold::replace(const WIR_UpDownValue&, WIR_L4) const
bool WIR_ConstFold::constFold(const WIR_Operation&)
void WIR_ConstFold::addNewInstructions()
bool WIR_ConstFold::eraseInstructions()

WIR_ConstProp::WIR_ConstProp(WIR_Function&)
virtual WIR_ConstProp::~WIR_ConstProp()
virtual void WIR_ConstProp::runOptimization(WIR_Function&)
long long int WIR_ConstProp::replace(const WIR_UpDownValue&, WIR_L4, bool) const
bool WIR_ConstProp::constProp(const WIR_Operation&)
void WIR_ConstProp::addNewInstructions()
void WIR_ConstProp::eraseInstructions()

WIR_DeadCode::WIR_DeadCode(WIR_Function&)
virtual WIR_DeadCode::~WIR_DeadCode()
virtual void WIR_DeadCode::runOptimization(WIR_Function&)
virtual bool WIR_DeadCode::isDead(const WIR_Operation&) const
void WIR_DeadCode::eliminateDefUses(WIR_Function&) const
void WIR_DeadCode::eliminateDeadOperations(WIR_Function&) const

WIR_EmptyBlocks::WIR_EmptyBlocks(WIR_System&)
WIR_EmptyBlocks::WIR_EmptyBlocks(WIR_Function&)
virtual WIR_EmptyBlocks::~WIR_EmptyBlocks()
virtual void WIR_EmptyBlocks::runOptimization(WIR_Function&)

WIR_GraphColoring.worklists
WIR_GraphColoring.invariants
WIR_GraphColoring::WIR_GraphColoring(WIR_System&, bool)
WIR_GraphColoring::WIR_GraphColoring(WIR_CompilationUnit&, bool)
WIR_GraphColoring::WIR_GraphColoring(WIR_Function&, bool)
virtual WIR_GraphColoring::~WIR_GraphColoring()
void WIR_GraphColoring::setCoalescingBriggs(bool)
bool WIR_GraphColoring::getCoalescingBriggs() const
void WIR_GraphColoring::setCoalescingGeorge(bool)
bool WIR_GraphColoring::getCoalescingGeorge() const
bool WIR_GraphColoring::getCoalescing() const
void WIR_GraphColoring::setGenerateWebs(bool)
bool WIR_GraphColoring::getGenerateWebs() const
void WIR_GraphColoring::setBestOfThreeSpilling(bool)
bool WIR_GraphColoring::getBestOfThreeSpilling() const
void WIR_GraphColoring::setRematerialization(bool)
bool WIR_GraphColoring::getRematerialization() const
void WIR_GraphColoring::setCoalesceStackLocations(bool)
bool WIR_GraphColoring::getCoalesceStackLocations() const
void WIR_GraphColoring::setSpillAll(bool)
bool WIR_GraphColoring::getSpillAll() const
void WIR_GraphColoring::setMarkSpillCode(bool)
bool WIR_GraphColoring::getMarkSpillCode() const
bool WIR_GraphColoring::getVerbosity() const
virtual void WIR_GraphColoring::runOptimization(WIR_System&)
virtual void WIR_GraphColoring::runOptimization(WIR_CompilationUnit&)
virtual void WIR_GraphColoring::runOptimization(WIR_Function&)
virtual void WIR_GraphColoring::runOptimization(WIR_Function&).simplified.visualize
virtual void WIR_GraphColoring::runOptimization(WIR_Function&).simplified.visualizeFull
virtual void WIR_GraphColoring::runOptimization(WIR_Function&).colored.visualizeFull
virtual void WIR_GraphColoring::saveBestSolutionHook()
virtual void WIR_GraphColoring::restoreBestSolutionHook()
virtual void WIR_GraphColoring::initializationHook(WIR_Function&)
bool WIR_GraphColoring::isPrecolored(const WIR_BaseRegister&) const
virtual bool WIR_GraphColoring::isPriorityRegister(const WIR_VirtualRegister&) const
virtual void WIR_GraphColoring::computeSpillCosts(const WIR_Function&, const WIR_InterferenceGraph&, const WIR_VirtualRegisterSet&, WIR_GraphColoring::WIR_RematerializationMap&)
virtual WIR_VirtualRegister& WIR_GraphColoring::selectSpillCandidate(const WIR_InterferenceGraph&, const WIR_VirtualRegisterSet&) const
long double WIR_GraphColoring::spillCostsChaitin(const WIR_VirtualRegister&, const WIR_InterferenceGraph&) const
long double WIR_GraphColoring::spillCostsBernstein1(const WIR_VirtualRegister&, const WIR_InterferenceGraph&) const
long double WIR_GraphColoring::spillCostsBernstein2(const WIR_VirtualRegister&, const WIR_InterferenceGraph&) const
long double WIR_GraphColoring::spillCostsBernstein3(const WIR_VirtualRegister&, const WIR_InterferenceGraph&) const
unsigned int WIR_GraphColoring::area(const WIR_VirtualRegister&, const WIR_InterferenceGraph&) const
virtual WIR_Operation& WIR_GraphColoring::selectCoalescingCandidate(const WIR_InterferenceGraph&, const WIR_OperationSet&) const
virtual bool WIR_GraphColoring::avoidCoalescing(const WIR_Operation&, const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
virtual unsigned int WIR_GraphColoring::getRematerializationCosts(const WIR_RegisterParameter&) const
virtual pair<reference_wrapper<WIR_VirtualRegister>, reference_wrapper<WIR_VirtualRegister> > WIR_GraphColoring::resolveSpillCoalescingConflict(const WIR_VirtualRegister&, const WIR_VirtualRegister&) const
virtual unsigned int WIR_GraphColoring::getStackSize(const WIR_BaseRegister&) const
WIR_Instruction& WIR_GraphColoring::markSpillInstruction(WIR_Instruction&, const WIR_BaseRegister&)
virtual void WIR_GraphColoring::rewriteProgramHook(WIR_Function&)
virtual void WIR_GraphColoring::postProcessingHook(WIR_Function&)
virtual void WIR_GraphColoring::postRACleanup(WIR_Function&)
void WIR_GraphColoring::saveBestSolution()
void WIR_GraphColoring::restoreBestSolution()
void WIR_GraphColoring::precolorSpecialRegs(WIR_Function&) const
void WIR_GraphColoring::initPrecolors(const WIR_Function&)
void WIR_GraphColoring::build(WIR_Function&, WIR_InterferenceGraph&)
void WIR_GraphColoring::build(WIR_Function&, WIR_InterferenceGraph&).visualize
void WIR_GraphColoring::buildPrecolors(WIR_InterferenceGraph&) const
void WIR_GraphColoring::buildLoopNestingDepth(WIR_InterferenceGraph&) const
void WIR_GraphColoring::makeWorkList(WIR_Function&, const WIR_InterferenceGraph&)
void WIR_GraphColoring::decrementDegree(const WIR_VirtualRegister&, const WIR_InterferenceGraph&)
void WIR_GraphColoring::addWorkList(const WIR_BaseRegister&, const WIR_InterferenceGraph&)
void WIR_GraphColoring::simplifyPriority(WIR_InterferenceGraph&)
void WIR_GraphColoring::simplify(WIR_InterferenceGraph&)
void WIR_GraphColoring::computeLoopNestingDepths(WIR_Function&)
unsigned int WIR_GraphColoring::getLoopNestingDepth(const WIR_BasicBlock&) const
void WIR_GraphColoring::selectSpill(const WIR_Function&, WIR_InterferenceGraph&)
void WIR_GraphColoring::computeSpillLoadCosts(const WIR_RegisterParameter&, const WIR_BaseRegister&, unsigned int, WIR_GraphColoring::WIR_RematerializationMap&, WIR_OperationSet&, bool)
void WIR_GraphColoring::computeSpillStoreCosts(const WIR_RegisterParameter&, const WIR_BaseRegister&, unsigned int, WIR_OperationSet&, bool)
void WIR_GraphColoring::propagateFalseLiveness(const WIR_VirtualRegister&, const WIR_BasicBlock&, WIR_VirtualRegisterSet&) const
void WIR_GraphColoring::propagateTrueLiveness(const WIR_VirtualRegister&, const WIR_BasicBlock&, WIR_VirtualRegisterSet&) const
void WIR_GraphColoring::updateLivenessInSameBB(const WIR_VirtualRegister&, bool, map<WIR_id_t, bool>&, const WIR_InterferenceGraph&) const
bool WIR_GraphColoring::isCoalescableMove(const WIR_Operation&, const WIR_InterferenceGraph&) const
bool WIR_GraphColoring::isMoveRelated(const WIR_BaseRegister&) const
WIR_OperationSet WIR_GraphColoring::nodeMoves(const WIR_BaseRegister&) const
void WIR_GraphColoring::freezeMoves(const WIR_VirtualRegister&, WIR_InterferenceGraph&)
void WIR_GraphColoring::enableMoves(const WIR_BaseRegister&, const WIR_InterferenceGraph&)
void WIR_GraphColoring::coalesce(WIR_InterferenceGraph&)
bool WIR_GraphColoring::areConstrainedHierarchicalRegs(const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
bool WIR_GraphColoring::areIncompatiblyColoredNodes(const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
bool WIR_GraphColoring::coalescingTestBriggs(const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
bool WIR_GraphColoring::coalescingTestGeorge(const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
WIR_BaseRegister& WIR_GraphColoring::combine(const WIR_BaseRegister&, const WIR_BaseRegister&, WIR_InterferenceGraph&)
WIR_BaseRegister& WIR_GraphColoring::combine(const WIR_BaseRegister&, const WIR_BaseRegister&, WIR_InterferenceGraph&).visualize
void WIR_GraphColoring::freeze(WIR_InterferenceGraph&)
void WIR_GraphColoring::assignColors(WIR_InterferenceGraph&)
bool WIR_GraphColoring::isSpillRegister(const WIR_VirtualRegister&) const
void WIR_GraphColoring::rewriteProgram(WIR_Function&)
void WIR_GraphColoring::computeStackLocations(const WIR_Function&)
void WIR_GraphColoring::computeStackLocations(const WIR_Function&).visualize
void WIR_GraphColoring::replaceCoalescedSpills(WIR_Function&)
void WIR_GraphColoring::insertSpillCode(WIR_Function&)
WIR_GraphColoring::insertSpillCode(WIR_Function&)::<cloneRegister(const WIR_VirtualRegister&)>
void WIR_GraphColoring::insertRematerializationCode(const WIR_BaseRegister&, const WIR_VirtualRegister&, WIR_RegisterParameter&, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator)
void WIR_GraphColoring::removeCoalescedMoves()
void WIR_GraphColoring::replaceColoredRegisters(WIR_Function&)
void WIR_GraphColoring::allocateUncoloredActualSpills(WIR_Function&)
void WIR_GraphColoring::removeRedundantSpills()
WIR_GraphColoring::removeRedundantSpills()::<redundantLoadStoreElimination(list<list<reference_wrapper<WIR_Instruction> > >&, bool)>
WIR_GraphColoring::removeRedundantSpills()::<redundantStoreLoadElimination(list<list<reference_wrapper<WIR_Instruction> > >&)>
WIR_GraphColoring::removeRedundantSpills()::<redundantStoreStoreElimination()>
WIR_GraphColoring::removeRedundantSpills()::<redundantLoadLoadElimination(list<list<reference_wrapper<WIR_Instruction> > >&, bool)>

WIR_InterferenceGraph::WIR_InterferenceGraph(const list<reference_wrapper<const WIR_PhysicalRegister> >&, WIR_Function&, const WIR_VirtualRegisterSet&, bool, bool)
WIR_InterferenceGraph::WIR_InterferenceGraph()
WIR_InterferenceGraph::~WIR_InterferenceGraph()
WIR_InterferenceGraph& WIR_InterferenceGraph::operator=(const WIR_InterferenceGraph&)
bool WIR_InterferenceGraph::containsNode(const WIR_BaseRegister&) const
bool WIR_InterferenceGraph::areSameNodes(const WIR_BaseRegister&, const WIR_BaseRegister&) const
unsigned int WIR_InterferenceGraph::getDegree(const WIR_BaseRegister&) const
WIR_RegisterSet WIR_InterferenceGraph::getNeighbors(const WIR_BaseRegister&) const
WIR_VirtualRegisterSet WIR_InterferenceGraph::getNeighborVREGs(const WIR_BaseRegister&) const
void WIR_InterferenceGraph::setLoopNestingDepth(const WIR_BaseRegister&, unsigned int)
unsigned int WIR_InterferenceGraph::getLoopNestingDepth(const WIR_BaseRegister&) const
void WIR_InterferenceGraph::visualize(bool) const
void WIR_InterferenceGraph::addInterference(const WIR_BaseRegister&, const WIR_BaseRegister&, unsigned int)
bool WIR_InterferenceGraph::interfere(const WIR_BaseRegister&, const WIR_BaseRegister&) const
unsigned int WIR_InterferenceGraph::getAvailableColors() const
unsigned int WIR_InterferenceGraph::getColorOfPhreg(const WIR_PhysicalRegister&) const
WIR_PhysicalRegister& WIR_InterferenceGraph::getPhregOfColor(unsigned int) const
void WIR_InterferenceGraph::setColor(const WIR_BaseRegister&, unsigned int)
set<unsigned int> WIR_InterferenceGraph::getColors(const WIR_BaseRegister&) const
string WIR_InterferenceGraph::getColorName(const WIR_BaseRegister&) const
bool WIR_InterferenceGraph::isColored(const WIR_BaseRegister&) const
bool WIR_InterferenceGraph::containsUncoloredNodes() const
set<unsigned int> WIR_InterferenceGraph::getPossibleColors(const WIR_BaseRegister&) const
WIR_BaseRegister& WIR_InterferenceGraph::coalesceNodes(const WIR_BaseRegister&, const WIR_BaseRegister&)
WIR_RegisterSet WIR_InterferenceGraph::getCoalescedAliases(const WIR_BaseRegister&) const
WIR_BaseRegister& WIR_InterferenceGraph::getUnaliasedReg(const WIR_BaseRegister&) const
WIR_BaseRegister& WIR_InterferenceGraph::getRemainingReg(const WIR_BaseRegister&, const WIR_BaseRegister&) const
WIR_BaseRegister& WIR_InterferenceGraph::getVanishingReg(const WIR_BaseRegister&, const WIR_BaseRegister&) const
void WIR_InterferenceGraph::setPotentialSpill(const WIR_VirtualRegister&, bool)
bool WIR_InterferenceGraph::isPotentialSpill(const WIR_VirtualRegister&) const
void WIR_InterferenceGraph::setActualSpill(const WIR_VirtualRegister&, bool)
void WIR_InterferenceGraph::setSpillCosts(const WIR_VirtualRegister&, unsigned int)
unsigned int WIR_InterferenceGraph::getSpillCosts(const WIR_VirtualRegister&) const
void WIR_InterferenceGraph::pushNode(const WIR_VirtualRegister&)
void WIR_InterferenceGraph::pushPriorityNode(const WIR_VirtualRegister&)
WIR_VirtualRegister& WIR_InterferenceGraph::popNode()
bool WIR_InterferenceGraph::isStackEmpty() const
void WIR_InterferenceGraph::addNodesForPHREGs()
void WIR_InterferenceGraph::addNodesForVREGs(const WIR_VirtualRegisterSet&)
void WIR_InterferenceGraph::addNode(const WIR_BaseRegister&)
void WIR_InterferenceGraph::mergeAliases(const WIR_BaseRegister&, const WIR_BaseRegister&)
void WIR_InterferenceGraph::mergeColors(const WIR_BaseRegister&, const WIR_BaseRegister&, const IGraphVertex&, const IGraphVertex&)
void WIR_InterferenceGraph::visualizeNodes(fstream&, map<WIR_id_t, unsigned int>&, bool) const
void WIR_InterferenceGraph::visualizeEdges(fstream&, const map<WIR_id_t, unsigned int>&, bool) const
string WIR_InterferenceGraph::buildNodeName(const IGraphVertex&) const
string WIR_InterferenceGraph::buildRegName(const WIR_BaseRegister&) const
string WIR_InterferenceGraph::buildNodeColor(unsigned int, const WIR_BaseRegister&) const
string WIR_InterferenceGraph::buildNodeDepth(const IGraphVertex&) const
string WIR_InterferenceGraph::getFillColor(unsigned int) const

WIR_JumpCorrection.invariants
WIR_JumpCorrection::WIR_JumpCorrection(WIR_System&, bool)
virtual WIR_JumpCorrection::~WIR_JumpCorrection()
void WIR_JumpCorrection::setPhysicalWIR(bool)
WIR_JumpCorrection::MemLayoutInfo::MemLayoutInfo(const WIR_BasicBlock&, long long unsigned int)
virtual void WIR_JumpCorrection::runOptimization(WIR_System&)
virtual void WIR_JumpCorrection::runOptimization(WIR_CompilationUnit&)
void WIR_JumpCorrection::initializeMemoryLayout()
void WIR_JumpCorrection::updateMemoryLayout(const WIR_BasicBlock&)
void WIR_JumpCorrection::updateMemoryLayout(const WIR_Function&)
void WIR_JumpCorrection::verifyMemoryLayout() const
bool WIR_JumpCorrection::isPhysicalSuccessor(const WIR_BasicBlock&, const WIR_BasicBlock&) const
void WIR_JumpCorrection::doMemoryLayoutVerification() const

WIR_LocalScheduling::WIR_LocalScheduling(WIR_Function&, const WIR_SchedulingPriority&, bool, bool)
virtual WIR_LocalScheduling::~WIR_LocalScheduling()
void WIR_LocalScheduling::setASAP()
void WIR_LocalScheduling::setALAP()
virtual void WIR_LocalScheduling::runOptimization(WIR_Function&)
virtual void WIR_LocalScheduling::init(WIR_Function&)
void WIR_LocalScheduling::schedule(WIR_BlockSchedulingRegion&)
void WIR_LocalScheduling::removeEmptyInstructions(WIR_BlockSchedulingRegion&)

WIR_LoopInvariantCM::WIR_LoopInvariantCM(WIR_System&)
virtual WIR_LoopInvariantCM::~WIR_LoopInvariantCM()
virtual void WIR_LoopInvariantCM::runOptimization(WIR_Function&)
void WIR_LoopInvariantCM::identifyLoops(const WIR_Function&)
void WIR_LoopInvariantCM::identifyLIC(const WIR_ControlTreeNode&)
bool WIR_LoopInvariantCM::identifyLIC(const WIR_BasicBlock&)
void WIR_LoopInvariantCM::moveLIC()
void WIR_LoopInvariantCM::checkLoopInvariant(const WIR_Operation&)
void WIR_LoopInvariantCM::checkLoopInvariant(const WIR_Parameter&)
bool WIR_LoopInvariantCM::isExecutedBefore(const WIR_Operation&, const WIR_Operation&) const
WIR_BasicBlock& WIR_LoopInvariantCM::insertPreHeader()

WIR_MaxDelayPriority::WIR_MaxDelayPriority()
WIR_MaxDelayPriority::WIR_MaxDelayPriority(const WIR_MaxDelayPriority&)
virtual WIR_MaxDelayPriority::~WIR_MaxDelayPriority()
virtual long long int WIR_MaxDelayPriority::getPriority(const WIR_Operation&) const

WIR_MobilityPriority::WIR_MobilityPriority()
WIR_MobilityPriority::WIR_MobilityPriority(const WIR_MobilityPriority&)
virtual WIR_MobilityPriority::~WIR_MobilityPriority()
virtual long long int WIR_MobilityPriority::getPriority(const WIR_Operation&) const

WIR_NoOfSuccsPriority::WIR_NoOfSuccsPriority()
WIR_NoOfSuccsPriority::WIR_NoOfSuccsPriority(const WIR_NoOfSuccsPriority&)
virtual WIR_NoOfSuccsPriority::~WIR_NoOfSuccsPriority()
virtual long long int WIR_NoOfSuccsPriority::getPriority(const WIR_Operation&) const

WIR_Optimization::WIR_Optimization(WIR_System&)
WIR_Optimization::WIR_Optimization(WIR_CompilationUnit&)
WIR_Optimization::WIR_Optimization(WIR_Function&)
virtual WIR_Optimization::~WIR_Optimization()
void WIR_Optimization::optimize()
void WIR_Optimization::setGenerate16BitOperations(bool)
bool WIR_Optimization::getGenerate16BitOperations() const
void WIR_Optimization::copyContainers(WIR_Instruction&, const WIR_Instruction&, bool) const
void WIR_Optimization::copyContainers(WIR_Operation&, const WIR_Operation&) const

WIR_Peephole::WIR_Peephole(WIR_Function&)
virtual WIR_Peephole::~WIR_Peephole()
void WIR_Peephole::addPeepholeSize(unsigned int)
const set<unsigned int>& WIR_Peephole::getPeepholeSizes() const
void WIR_Peephole::setCrossBasicBlocks(bool)
void WIR_Peephole::setMultiplePasses(bool)
virtual void WIR_Peephole::runOptimization(WIR_Function&)
WIR_Peephole::peepholeList WIR_Peephole::getPeepholes(list<reference_wrapper<WIR_Instruction> >::const_iterator) const

WIR_RedundantBlocks::WIR_RedundantBlocks(WIR_Function&)
virtual WIR_RedundantBlocks::~WIR_RedundantBlocks()
virtual void WIR_RedundantBlocks::runOptimization(WIR_Function&)

WIR_RedundantCode::WIR_RedundantCode(WIR_Function&)
virtual WIR_RedundantCode::~WIR_RedundantCode()
virtual void WIR_RedundantCode::runOptimization(WIR_Function&)
virtual bool WIR_RedundantCode::areRedundant(const WIR_RegisterParameter&, const WIR_UpDownValue&, const WIR_RegisterParameter&, const WIR_UpDownValue&) const
bool WIR_RedundantCode::checkRegisters(const WIR_RegisterParameter&, const WIR_RegisterParameter&) const
bool WIR_RedundantCode::areRedundant(const WIR_UpDownValue&, const WIR_UpDownValue&) const
void WIR_RedundantCode::replaceParameters()

WIR_SchedulingPriority::WIR_SchedulingPriority()
WIR_SchedulingPriority::WIR_SchedulingPriority(const WIR_SchedulingPriority&)
virtual WIR_SchedulingPriority::~WIR_SchedulingPriority()
void WIR_SchedulingPriority::setRegion(WIR_SchedulingRegion&, bool)
list<WIR_Operation*> WIR_SchedulingPriority::getBestOperations(long long int, WIR_Instruction*)

WIR_SchedulingRegion::WIR_SchedulingRegion(WIR_BasicBlock&, bool, bool)
virtual WIR_SchedulingRegion::~WIR_SchedulingRegion()
void WIR_SchedulingRegion::buildDG()
void WIR_SchedulingRegion::buildDG().visualize
const list<WIR_BasicBlock*>& WIR_SchedulingRegion::getBasicBlocks() const
unsigned int WIR_SchedulingRegion::getOperationCount() const
unsigned int WIR_SchedulingRegion::getNumberOfSuccessors(const WIR_Operation&) const
WIR_OperationSet WIR_SchedulingRegion::getUnscheduledPredecessors(const WIR_Operation&) const
void WIR_SchedulingRegion::visualize() const
map<long long int, set<reference_wrapper<WIR_Operation>, WIR_Compare<WIR_Operation> > >& WIR_SchedulingRegion::getEarliestCycleOpsMap()
map<long long unsigned int, long long int>& WIR_SchedulingRegion::getEarliestCycleMap()
map<long long int, set<reference_wrapper<WIR_Operation>, WIR_Compare<WIR_Operation> > >& WIR_SchedulingRegion::getLatestCycleOpsMap()
map<long long unsigned int, long long int>& WIR_SchedulingRegion::getLatestCycleMap()
map<long long unsigned int, long long unsigned int>& WIR_SchedulingRegion::getMaxDelayMap()
map<long long unsigned int, long long int>& WIR_SchedulingRegion::getMobilityMap()
long long int WIR_SchedulingRegion::updateCycleMaps(const list<WIR_Operation*>&, long long int)
virtual void WIR_SchedulingRegion::init()
virtual void WIR_SchedulingRegion::addDependences(const WIR_Operation&, const WIR_Operation&)
bool WIR_SchedulingRegion::checkRAW(const WIR_Operation&, const WIR_RegisterParameter&) const
bool WIR_SchedulingRegion::checkWAR(const WIR_Operation&, const WIR_RegisterParameter&) const
bool WIR_SchedulingRegion::checkWAW(const WIR_Operation&, const WIR_RegisterParameter&) const
void WIR_SchedulingRegion::eraseRedundantEdges()
void WIR_SchedulingRegion::computeLatencies()
void WIR_SchedulingRegion::computeExecutionCycles()
void WIR_SchedulingRegion::setEarliestCycle(const WIR_Operation&, long long int, map<long long unsigned int, long long int>&)
void WIR_SchedulingRegion::setLatestCycle(const WIR_Operation&, long long int, map<long long unsigned int, long long int>&)
virtual long long int WIR_SchedulingRegion::getStartCycle(const WIR_Operation&) const
long long unsigned int WIR_SchedulingRegion::computeMaxDelays()
void WIR_SchedulingRegion::setMaxDelay(const WIR_Operation&, long long unsigned int)
void WIR_SchedulingRegion::computeMobility()
bool WIR_SchedulingRegion::sameRegisters(const WIR_BaseRegister&, const WIR_BaseRegister&) const
void WIR_SchedulingRegion::visualizeNodes(fstream&, map<unsigned int, unsigned int>&) const
void WIR_SchedulingRegion::visualizeEdges(fstream&, const map<unsigned int, unsigned int>&) const

WIR_SiliconBugs::WIR_SiliconBugs(WIR_Function&, string&&, unsigned int, bool)
virtual WIR_SiliconBugs::~WIR_SiliconBugs()
virtual bool WIR_SiliconBugs::matchPeephole(const peephole&)
virtual void WIR_SiliconBugs::transformPeephole(const peephole&)
void WIR_SiliconBugs::markInstruction(WIR_Instruction&) const

WIR_UnreachableBlocks::WIR_UnreachableBlocks(WIR_System&)
WIR_UnreachableBlocks::WIR_UnreachableBlocks(WIR_Function&)
virtual WIR_UnreachableBlocks::~WIR_UnreachableBlocks()
virtual void WIR_UnreachableBlocks::runOptimization(WIR_Function&)

WIR_UnusedVRegs::WIR_UnusedVRegs(WIR_System&)
WIR_UnusedVRegs::WIR_UnusedVRegs(WIR_Function&)
virtual WIR_UnusedVRegs::~WIR_UnusedVRegs()
virtual void WIR_UnusedVRegs::runOptimization(WIR_Function&)

WIR_Webs::WIR_Webs(WIR_Function&)
virtual WIR_Webs::~WIR_Webs()
list<WIR_Webs::Web> WIR_Webs::getWebs() const
virtual void WIR_Webs::runOptimization(WIR_Function&)
void WIR_Webs::identifyWebs(const WIR_VirtualRegister&)
void WIR_Webs::createWebs(const WIR_VirtualRegister&)
void WIR_Webs::cloneRegisters(const WIR_VirtualRegister&)
void WIR_Webs::cloneParameter(WIR_RegisterParameter&, WIR_Webs::Web&)

RV_GraphColoring::RV_GraphColoring(WIR_Function&, bool)
virtual RV_GraphColoring::~RV_GraphColoring()
virtual void RV_GraphColoring::runOptimization(WIR_Function&)
virtual void RV_GraphColoring::createPhregs(WIR_Function&)
bool RV_GraphColoring::isCallerSaved(const WIR_PhysicalRegister&) const
void RV_GraphColoring::checkCallerSavedRegsAliveAcrossCall(const WIR_PhysicalRegister&, const WIR_RegisterSet&)
virtual void RV_GraphColoring::buildProcessorSpecificInterferences(WIR_Function&, WIR_InterferenceGraph&)
virtual bool RV_GraphColoring::isPriorityRegister(const WIR_VirtualRegister&) const
virtual unsigned int RV_GraphColoring::getSpillLoadCosts(const WIR_RegisterParameter&) const
virtual unsigned int RV_GraphColoring::getSpillStoreCosts(const WIR_RegisterParameter&) const
virtual unsigned int RV_GraphColoring::getMoveCosts(const WIR_Operation&) const
virtual WIR_BaseRegister& RV_GraphColoring::getUseOfMove(const WIR_Operation&) const
virtual WIR_BaseRegister& RV_GraphColoring::getDefOfMove(const WIR_Operation&) const
virtual list<WIR_Instruction*> RISCV_GraphColoring::getRematerializationInstructions(const WIR_RegisterParameter&) const
virtual WIR_GraphColoring::WIR_ColorMap RV_GraphColoring::selectColors(const vector<reference_wrapper<WIR_VirtualRegister>>&, const WIR_InterferenceGraph&)
virtual bool RV_GraphColoring::isSpillStore(const WIR_Instruction&, const WIR_VirtualRegister&) const
virtual bool RV_GraphColoring::isSpillLoad(const WIR_Instruction&, const WIR_VirtualRegister&) const
virtual unsigned int RV_GraphColoring::getStackPosOfSubReg(const WIR_VirtualRegister&, unsigned int) const
virtual void RV_GraphColoring::insertSpillLoad(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator)
virtual void RV_GraphColoring::insertSpillStore(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator)
virtual WIR_BasicBlock& RV_GraphColoring::insertSpillCode(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator, bool)
bool RV_GraphColoring::isAdjustedLoadOrStoreInstruction(const WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator) const
virtual WIR_PhysicalRegisterSet RV_GraphColoring::getCandidatePhregs(const WIR::WIR_VirtualRegister&)
virtual const WIR_PhysicalRegister& RV_GpaphColoring::getCandidatePhreg(const WIR_PhysicalRegisterSet&
virtual void RV_GraphColoring::adjustStack(WIR_Function&)
virtual WIR_PhysicalRegister& RV_GraphColoring::getPhregOfSpill(const list<reference_wrapper<WIR_Instruction> >&)

TC_BlockSchedulingRegion::TC_BlockSchedulingRegion(WIR_BasicBlock&, bool, bool)
virtual TC_BlockSchedulingRegion::~TC_BlockSchedulingRegion()
virtual WIR_Instruction* TC_BlockSchedulingRegion::moveOperations(list<WIR_Operation*>&, const WIR_Instruction*)
virtual void TC_BlockSchedulingRegion::postProcessingHook()
virtual bool TC_BlockSchedulingRegion::checkUCert(const WIR_Operation&, const WIR_RegisterParameter&) const
virtual bool TC_BlockSchedulingRegion::checkCtrl(const WIR_Operation&, const WIR_RegisterParameter&) const
virtual long long int TC_BlockSchedulingRegion::computeLatency(const WIR_Operation&, const WIR_Operation&, WIR_DGEdgeType)
virtual long long int TC_BlockSchedulingRegion::getLatency(const WIR_Operation&)
long long int TC_BlockSchedulingRegion::computeSiliconBugStall(const WIR_Operation&, const WIR_Operation&)
virtual long long int TC_BlockSchedulingRegion::getStartCycle(const WIR_Operation&) const
void TC_BlockSchedulingRegion::determineCallRetSituation()

TC_ConstFold::TC_ConstFold(WIR_Function&)
virtual TC_ConstFold::~TC_ConstFold()
virtual void TC_ConstFold::runOptimization(WIR_Function&)
virtual bool TC_ConstFold::doConstFolding(const WIR_Operation&, const map<long long unsigned int, WIR_UpDownValue>&, const map<long long unsigned int, WIR_UpDownValue>&)
bool TC_ConstFold::doBranchFolding(const WIR_Operation&, const map<long long unsigned int, WIR_UpDownValue>&)
bool TC_ConstFold::doMOVFolding(const WIR_Operation&, const map<long long unsigned int, WIR_UpDownValue>&)
list<WIR_Instruction> TC_ConstFold::getLEA(const WIR_Parameter&, const WIR_UpDownValue&) const
list<WIR_Instruction> TC_ConstFold::getMOV(const WIR_Parameter&, const WIR_UpDownValue&) const
list<WIR_Instruction> TC_ConstFold::getMOV(const WIR_RegisterParameter&, const WIR_RegisterParameter&)
list<WIR_Instruction> TC_ConstFold::getMOV_E(const WIR_Parameter&, const WIR_UpDownValue&) const
list<WIR_Instruction> TC_ConstFold::getADD(const WIR_Parameter&, int)
list<WIR_Instruction> TC_ConstFold::getADDSUB(const WIR_Operation&)
list<WIR_Instruction> TC_ConstFold::getJ(const WIR_LabelParameter&) const
WIR_RegisterParameter& TC_ConstFold::insertLEA(const WIR_BaseRegister&, const WIR_UpDownValue&, list<WIR_Instruction>&) const
WIR_RegisterParameter& TC_ConstFold::insertMOV(const WIR_BaseRegister&, const WIR_UpDownValue&, list<WIR_Instruction>&) const
pair<WIR_BaseRegister*, WIR_BaseRegister*> TC_ConstFold::getChilds(const WIR_BaseRegister&) const
pair<bool, bool> TC_ConstFold::areChildsUsed(const WIR_Parameter&, const WIR_BaseRegister&, const WIR_BaseRegister&) const

TC_ConstProp::TC_ConstProp(WIR_Function&)
virtual TC_ConstProp::~TC_ConstProp()
virtual void TC_ConstProp::runOptimization(WIR_Function&)
virtual bool TC_ConstProp::doConstProp(const WIR_Operation&, const map<long long unsigned int, WIR_UpDownValue>&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_2(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_3(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_6(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_7(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC16(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC16_1(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xxx_xxC16(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xxx_xxC16_1(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xDD_DDC9_u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xDD_DDC9_2u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDD_DDC9_3u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xxDD_xxDC9(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xxDD_xxDC9_2(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xxDD_xxDC9_u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_Sxx_SxC4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SDD_DDC9(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SDD_DDC9_2(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SDD_DDC9_3(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SDD_DDC9_4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SIxD_SIxC4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_SDD_DDC9_u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDL_DC4L(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDL_DC4L_2(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDL_DC4L_3(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDL_DC4L_u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDL_DC4L_2u(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_AD_SAC4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DD_SDC4(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DD_SIC8(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DD_DC16(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DD_DC16_1(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xx_xC16(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDDC5_DDC5C5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDDD_DDDC5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDxDC5_DDxC5C5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDxE_DDxC5C5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_DDxE_DDxC5C5_2(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR::WIR_Instruction> TC_ConstProp::prop_ExDC5_ExC5C5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_EDxC5_EC4xC5(const WIR_Operation&, const WIR_UpDownValue&)
list<WIR_Instruction> TC_ConstProp::prop_xACBOA_xALBOA(const WIR_Operation&, const WIR_Symbol&)
list<WIR_Instruction> TC_ConstProp::prop_ACDBOA_ALDBOA(const WIR_Operation&, const WIR_Symbol&)
void TC_ConstProp::patchDefinedParameter(const WIR_RegisterParameter&, const WIR_Parameter&)
void TC_ConstProp::patchUsedParameter(const WIR_Parameter&, const WIR_Parameter&) const
void TC_ConstProp::patchUsedERegParameter(WIR_Parameter&, const WIR_Parameter&) const
void TC_ConstProp::patchImmediateParameter(WIR_BaseImmediateParameter&) const
void TC_ConstProp::checkSelfEdges(WIR_Operation&, const WIR_Operation&) const
bool TC_ConstProp::isSymbol(const WIR_UpDownValue&) const

TC_DeadCode::TC_DeadCode(WIR_Function&)
virtual void TC_DeadCode::runOptimization(WIR_Function&)
virtual TC_DeadCode::~TC_DeadCode()

TC_GraphColoring::TC_GraphColoring(WIR_Function&, bool, bool)
virtual TC_GraphColoring::~TC_GraphColoring()
void TC_GraphColoring::setUseOnlyUC(bool)
virtual void TC_GraphColoring::runOptimization(WIR_Function&)
virtual void TC_GraphColoring::saveBestSolutionHook()
virtual void TC_GraphColoring::restoreBestSolutionHook()
virtual void TC_GraphColoring::createPhregs(WIR_Function&)
virtual void TC_GraphColoring::initializationHook(WIR_Function&)
virtual bool TC_GraphColoring::isStackPointer(const WIR_BaseRegister&) const
void TC_GraphColoring::checkLCRegsAliveAcrossCall(const WIR_PhysicalRegister&, const WIR_RegisterSet&, const WIR_RegisterSet&)
virtual void TC_GraphColoring::buildProcessorSpecificInterferences(WIR_Function&, WIR_InterferenceGraph&)
bool TC_GraphColoring::isFunctionReturnMove(const WIR_Operation&) const
virtual bool TC_GraphColoring::isPriorityRegister(const WIR_VirtualRegister&) const
virtual unsigned int TC_GraphColoring::getSpillLoadCosts(const WIR_RegisterParameter&) const
virtual unsigned int TC_GraphColoring::getSpillStoreCosts(const WIR_RegisterParameter&) const
virtual unsigned int TC_GraphColoring::getMoveCosts(const WIR_Operation&) const
virtual WIR_BaseRegister& TC_GraphColoring::getUseOfMove(const WIR_Operation&) const
virtual WIR_BaseRegister& TC_GraphColoring::getDefOfMove(const WIR_Operation&) const
virtual bool TC_GraphColoring::avoidCoalescing(const WIR_Operation&, const WIR_BaseRegister&, const WIR_BaseRegister&, const WIR_InterferenceGraph&) const
virtual unsigned int TC_GraphColoring::getRematerializationCosts(const WIR_RegisterParameter&) const
int TC_GraphColoring::getRematerializationConstant(const WIR_RegisterParameter&) const
virtual list<WIR_Instruction*> TC_GraphColoring::getRematerializationInstructions(const WIR_RegisterParameter&) const
virtual WIR_GraphColoring::WIR_ColorMap TC_GraphColoring::selectColors(const vector<reference_wrapper<WIR_VirtualRegister>>&, const WIR_InterferenceGraph&)
virtual bool TC_GraphColoring::isSpillStore(const WIR_Instruction&, const WIR_VirtualRegister&) const
virtual bool TC_GraphColoring::isSpillLoad(const WIR_Instruction&, const WIR_VirtualRegister&) const
virtual pair<reference_wrapper<WIR_VirtualRegister>, reference_wrapper<WIR_VirtualRegister> > TC_GraphColoring::resolveSpillCoalescingConflict(const WIR_VirtualRegister&, const WIR_VirtualRegister&) const
virtual unsigned int TC_GraphColoring::getStackPosOfSubReg(const WIR_VirtualRegister&, unsigned int) const
virtual void TC_GraphColoring::insertSpillLoad(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator)
virtual void TC_GraphColoring::insertSpillStore(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator)
virtual WIR_BasicBlock& TC_GraphColoring::insertSpillCode(const WIR_BaseRegister&, const WIR_BaseRegister&, int, WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator, bool)
bool TC_GraphColoring::isAdjustedLoadOrStoreInstruction(const WIR_BasicBlock&, list<reference_wrapper<WIR_Instruction> >::const_iterator) const
virtual void TC_GraphColoring::rewriteProgramHook(WIR_Function&)
virtual WIR_PhysicalRegisterSet TC_GraphColoring::getCandidatePhregs(const WIR::WIR_VirtualRegister&)
virtual const WIR_PhysicalRegister& TC_GraphColoring::getCandidatePhreg(const WIR_PhysicalRegisterSet&)
virtual void TC_GraphColoring::postProcessingHook(WIR_Function&)
virtual void TC_GraphColoring::adjustStack(WIR_Function&)
virtual void TC_GraphColoring::postRACleanup(WIR_Function&)
virtual WIR_PhysicalRegister& TC_GraphColoring::getPhregOfSpill(const list<reference_wrapper<WIR_Instruction> >&)

TC_JumpCorrection.invariants
TC_JumpCorrection::TC_JumpCorrection(WIR_System&, bool)
virtual TC_JumpCorrection::~TC_JumpCorrection()
virtual void TC_JumpCorrection::runOptimization(WIR_System&)
virtual void TC_JumpCorrection::runOptimization(WIR_Function&)
virtual void TC_JumpCorrection::runOptimization(WIR_Function&).visualize
virtual void TC_JumpCorrection::runOpt(WIR_BasicBlock&)
TC_JumpCorrection::InvalidJump::InvalidJump(const WIR_Operation&, const WIR_Symbol&, const WIR_Symbol&, WIR_disp_t, bool)
unsigned int TC_JumpCorrection::adjustConditionalJump(WIR_Operation&)
unsigned int TC_JumpCorrection::adjustImplicitJump(WIR_Operation&)
unsigned int TC_JumpCorrection::adjustUnconditionalJump(WIR_Operation&)
WIR_disp_t TC_JumpCorrection::computeDisplacement(const WIR_BasicBlock&, const WIR_Symbol&, const WIR_Operation&) const
void TC_JumpCorrection::generateLongJump(const TC_JumpCorrection::InvalidJump&, WIR_BasicBlock&)
bool TC_JumpCorrection::eraseTrampoline(WIR_BasicBlock&)
pair<reference_wrapper<WIR_BaseRegister>, bool> TC_JumpCorrection::determineAddressRegister(WIR_Function&, const WIR_Instruction&) const
WIR_Symbol& TC_JumpCorrection::getJumpTarget(const WIR_Operation&) const
unsigned int TC_JumpCorrection::getDisplacementWidth(const WIR_Operation&) const
bool TC_JumpCorrection::fixInvalidDisplacement(const TC_JumpCorrection::InvalidJump&)
void TC_JumpCorrection::redirectJump(WIR_Operation&, const WIR_BasicBlock&) const
bool TC_JumpCorrection::isTCReturn(const WIR_Operation&) const
long long unsigned int TC_JumpCorrection::getAddress(const WIR_BasicBlock&) const

TC_LocalScheduling::TC_LocalScheduling(WIR_Function&, const WIR_SchedulingPriority&, bool, bool)
virtual TC_LocalScheduling::~TC_LocalScheduling()
virtual WIR::WIR_BlockSchedulingRegion* TC_LocalScheduling::generateBlockRegion(WIR_BasicBlock&) const

TC_MaxDelayPriority::TC_MaxDelayPriority()
TC_MaxDelayPriority::TC_MaxDelayPriority(const TC_MaxDelayPriority&)
virtual TC_MaxDelayPriority::~TC_MaxDelayPriority()
virtual WIR_SchedulingPriority* TC_MaxDelayPriority::clone() const

TC_MobilityPriority::TC_MobilityPriority()
TC_MobilityPriority::TC_MobilityPriority(const TC_MobilityPriority&)
virtual TC_MobilityPriority::~TC_MobilityPriority()
virtual WIR_SchedulingPriority* TC_MobilityPriority::clone() const

TC_NoOfSuccsPriority::TC_NoOfSuccsPriority()
TC_NoOfSuccsPriority::TC_NoOfSuccsPriority(const TC_NoOfSuccsPriority&)
virtual TC_NoOfSuccsPriority::~TC_NoOfSuccsPriority()
virtual WIR_SchedulingPriority* TC_NoOfSuccsPriority::clone() const

TC_OperationBitWidths::TC_OperationBitWidths(WIR_Function&)
virtual TC_OperationBitWidths::~TC_OperationBitWidths()
virtual void TC_OperationBitWidths::runOptimization(WIR_Function&)
list<reference_wrapper<WIR_Operation> >::iterator TC_OperationBitWidths::reduce(WIR_Instruction&, list<reference_wrapper<WIR_Operation> >::const_iterator) const

TC_Peep_EXTRST::TC_Peep_EXTRST(WIR_Function&)
virtual TC_Peep_EXTRST::~TC_Peep_EXTRST()
void TC_Peep_EXTRST::optimize()
virtual void TC_Peep_EXTRST::runOptimization(WIR_Function&)
virtual bool TC_Peep_EXTRST::matchPeephole(const peephole&)
virtual void TC_Peep_EXTRST::transformPeephole(const peephole&)

TC_Peep_LDEXTR::TC_Peep_LDEXTR(WIR_Function&)
virtual TC_Peep_LDEXTR::~TC_Peep_LDEXTR()
void TC_Peep_LDEXTR::optimize()
virtual void TC_Peep_LDEXTR::runOptimization(WIR_Function&)
virtual bool TC_Peep_LDEXTR::matchPeephole(const peephole&)
virtual void TC_Peep_LDEXTR::transformPeephole(const peephole&)

TC_Peep_LDST::TC_Peep_LDST(WIR_Function&)
virtual TC_Peep_LDST::~TC_Peep_LDST()
void TC_Peep_LDST::optimize()
virtual void TC_Peep_LDST::runOptimization(WIR_Function&)
virtual bool TC_Peep_LDST::matchPeephole(const peephole&)
virtual void TC_Peep_LDST::transformPeephole(const peephole&)
bool TC_Peep_LDST::sameAddress(const WIR_Operation&, const WIR_Operation&) const
bool TC_Peep_LDST::sameLabel(const WIR_LabelParameter&, const WIR_LabelParameter&) const
bool TC_Peep_LDST::isStackAccess(const WIR_Operation&) const
bool TC_Peep_LDST::accessesVolatileData(const WIR_Operation&) const

TC_Peep_PreIncr::TC_Peep_PreIncr(WIR_Function&)
virtual TC_Peep_PreIncr::~TC_Peep_PreIncr()
void TC_Peep_PreIncr::optimize()
virtual void TC_Peep_PreIncr::runOptimization(WIR_Function&)
virtual bool TC_Peep_PreIncr::matchPeephole(const peephole&)
virtual void TC_Peep_PreIncr::transformPeephole(const peephole&)
const WIR_BaseProcessor::OperationFormat& TC_Peep_PreIncr::getNewOperationFormat(const WIR_Operation&) const

TC_PredicatedExecution::TC_PredicatedExecution(WIR_Function&)
virtual TC_PredicatedExecution::~TC_PredicatedExecution()
virtual void TC_PredicatedExecution::runOptimization(WIR_Function&)
bool TC_PredicatedExecution::checkIf(const WIR_BasicBlock&)
bool TC_PredicatedExecution::isConditionalJump(const WIR_BasicBlock&)
bool TC_PredicatedExecution::isSuitableBB(const WIR_BasicBlock&) const
void TC_PredicatedExecution::optimizeIf()
void TC_PredicatedExecution::transformJump()
void TC_PredicatedExecution::transformThen()

TC_RedundantCode::TC_RedundantCode(WIR_Function&)
virtual TC_RedundantCode::~TC_RedundantCode()
virtual void TC_RedundantCode::runOptimization(WIR_Function&)
virtual bool TC_RedundantCode::areRedundant(const WIR_RegisterParameter&, const WIR_UpDownValue&, const WIR_RegisterParameter&, const WIR_UpDownValue&) const

static TC_SchedulingInfo::OperationType TC_SchedulingInfo::getType(const WIR_Operation&)
static long long int TC_SchedulingInfo::getLatency(const WIR_Operation&, const WIR_Operation&)
static long long int TC_SchedulingInfo::getLatency(const WIR_Operation&)
static long long int TC_SchedulingInfo::getPriority(const WIR_Operation&, const WIR_Operation&)
static long long int TC_SchedulingInfo::getPriority(const WIR_Operation&)
static void TC_SchedulingInfo::initOperationTypes()
static void TC_SchedulingInfo::initFloatLatency()

TC_SchedulingPriority::TC_SchedulingPriority()
TC_SchedulingPriority::TC_SchedulingPriority(const TC_SchedulingPriority&)
virtual TC_SchedulingPriority::~TC_SchedulingPriority()
virtual void TC_SchedulingPriority::setupCurrentCycle(long long int)
virtual pair<long long int, list<WIR_Operation*> > TC_SchedulingPriority::computePriority(const WIR_Operation&, const WIR_Operation*, long long int)
long long int TC_SchedulingPriority::computePriority(const WIR_Operation&, const WIR_Operation*) const
long long int TC_SchedulingPriority::computeBundlePriority(const WIR_Operation&, const WIR_Operation&, const WIR_Operation*) const

TC179x_CPU_TC_105::TC179x_CPU_TC_105(WIR_Function&)
virtual ::~TC179x_CPU_TC_105()
virtual bool TC179x_CPU_TC_105::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC179x_CPU_TC_105::fixSiliconBug(const peephole&) const
bool TC179x_CPU_TC_105::isMTCR(const WIR_Operation&) const

TC1796_CPU_TC_013::TC1796_CPU_TC_013(WIR_Function&)
virtual TC1796_CPU_TC_013::~TC1796_CPU_TC_013()
virtual bool TC1796_CPU_TC_013::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_013::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_013::isLDA(const WIR_Operation&) const

TC1796_CPU_TC_048::TC1796_CPU_TC_048(WIR_Function&)
virtual TC1796_CPU_TC_048::~TC1796_CPU_TC_048()
virtual bool TC1796_CPU_TC_048::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_048::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_048::isLDA(const WIR_Operation&) const
bool TC1796_CPU_TC_048::isIndirect(const WIR_Operation&) const
bool TC1796_CPU_TC_048::isIP(const WIR_Operation&) const

TC1796_CPU_TC_060::TC1796_CPU_TC_060(WIR_Function&)
virtual TC1796_CPU_TC_060::~TC1796_CPU_TC_060()
virtual bool TC1796_CPU_TC_060::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_060::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_060::isLDA(const WIR_Operation&) const

TC1796_CPU_TC_065::TC1796_CPU_TC_065(WIR_Function&)
virtual TC1796_CPU_TC_065::~TC1796_CPU_TC_065()
virtual bool TC1796_CPU_TC_065::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_065::fixSiliconBug(const peephole&) const

TC1796_CPU_TC_069::TC1796_CPU_TC_069(WIR_Function&)
virtual TC1796_CPU_TC_069::~TC1796_CPU_TC_069()
virtual bool TC1796_CPU_TC_069::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_069::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_069::isRSLCX(const WIR_Operation&) const
bool TC1796_CPU_TC_069::isLSLP(const WIR_Operation&) const
bool TC1796_CPU_TC_069::isIP(const WIR_Operation&) const

TC1796_CPU_TC_070::TC1796_CPU_TC_070(WIR_Function&)
virtual TC1796_CPU_TC_070::~TC1796_CPU_TC_070()
virtual bool TC1796_CPU_TC_070::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_070::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_070::isCJump(const WIR_Operation&) const
bool TC1796_CPU_TC_070::isDJump(const WIR_Operation&) const
bool TC1796_CPU_TC_070::isLOOP(const WIR_Operation&) const

TC1796_CPU_TC_071::TC1796_CPU_TC_071(WIR_Function&)
virtual TC1796_CPU_TC_071::~TC1796_CPU_TC_071()
virtual bool TC1796_CPU_TC_071::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_071::fixSiliconBug(const peephole&) const

TC1796_CPU_TC_072::TC1796_CPU_TC_072(WIR_Function&)
virtual TC1796_CPU_TC_072::~TC1796_CPU_TC_072()
virtual bool TC1796_CPU_TC_072::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_072::fixSiliconBug(const peephole&) const

TC1796_CPU_TC_081::TC1796_CPU_TC_081(WIR_Function&)
virtual TC1796_CPU_TC_081::~TC1796_CPU_TC_081()
virtual bool TC1796_CPU_TC_081::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_081::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_081::isLDA(const WIR_Operation&) const
bool TC1796_CPU_TC_081::definesSP(const WIR_Operation&) const

TC1796_CPU_TC_082::TC1796_CPU_TC_082(WIR_Function&)
virtual TC1796_CPU_TC_082::~TC1796_CPU_TC_082()
virtual bool TC1796_CPU_TC_082::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_082::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_082::isSTCTX(const WIR_Operation&) const
bool TC1796_CPU_TC_082::isLD(const WIR_Operation&) const

TC1796_CPU_TC_083::TC1796_CPU_TC_083(WIR_Function&)
virtual TC1796_CPU_TC_083::~TC1796_CPU_TC_083()
virtual bool TC1796_CPU_TC_083::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_083::fixSiliconBug(const peephole&) const

TC1796_CPU_TC_094::TC1796_CPU_TC_094(WIR_Function&)
virtual TC1796_CPU_TC_094::~TC1796_CPU_TC_094()
virtual bool TC1796_CPU_TC_094::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_094::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_094::isIPJmp(const WIR_Operation&) const
bool TC1796_CPU_TC_094::isCSA(const WIR_Operation&) const

TC1796_CPU_TC_095::TC1796_CPU_TC_095(WIR_Function&)
virtual TC1796_CPU_TC_095::~TC1796_CPU_TC_095()
virtual bool TC1796_CPU_TC_095::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_095::fixSiliconBug(const peephole&) const
bool TC1796_CPU_TC_095::isSequence1Start(const WIR_Operation&) const
bool TC1796_CPU_TC_095::isSequence2Start(const WIR_Operation&) const
bool TC1796_CPU_TC_095::isSATH(const WIR_Operation&) const
bool TC1796_CPU_TC_095::isSAT(const WIR_Operation&) const
bool TC1796_CPU_TC_095::isSequenceEnd(const WIR_Operation&) const

TC1796_CPU_TC_096::TC1796_CPU_TC_096(WIR_Function&)
virtual TC1796_CPU_TC_096::~TC1796_CPU_TC_096()
virtual bool TC1796_CPU_TC_096::matchSiliconBug(const peephole&)
virtual WIR_Peephole::peephole TC1796_CPU_TC_096::fixSiliconBug(const peephole&) const


#
# WIR Auxiliary Components
#

void WIR_Init()
string WIR_Module()
string WIR_Version()
int WIR_ProcessorIO()
unsigned int count1Bits(unsigned int)
bool isPowerOfTwo(unsigned int)

void WIR_Container_API::insertContainer(const WIR_BaseContainer&)
void WIR_Container_API::insertContainer(WIR_BaseContainer&&)
void WIR_Container_API::insertContainer(WIR_BaseContainer*)
void WIR_Container_API::eraseContainers(WIR_id_t, bool)
void WIR_Container_API::eraseContainer(WIR_BaseContainer&)
void WIR_Container_API::clearContainers()
set<WIR_id_t> WIR_Container_API::getContainerTypes() const
const WIR_ContainerSet WIR_Container_API::getContainers() const
bool WIR_Container_API::containsContainers() const
bool WIR_Container_API::containsContainers(WIR_id_t) const
bool WIR_Container_API::containsContainer(const WIR_BaseContainer&) const
WIR_Container_API::WIR_Container_API()
WIR_Container_API::WIR_Container_API(const WIR_Container_API&)
WIR_Container_API::WIR_Container_API(WIR_Container_API&&)
virtual WIR_Container_API::~WIR_Container_API()
WIR_Container_API& WIR_Container_API::operator=(const WIR_Container_API&)
WIR_Container_API& WIR_Container_API::operator=(WIR_Container_API&&)
void WIR_Container_API::copyContainers(const WIR_Container_API&)

bool WIR_ID_API::operator==(const WIR_ID_API&) const
virtual bool WIR_ID_API::operator!=(const WIR_ID_API&) const
WIR_id_t WIR_ID_API::getID() const
WIR_ID_API::WIR_ID_API()
WIR_ID_API::WIR_ID_API(const WIR_ID_API&)
WIR_ID_API::WIR_ID_API(WIR_ID_API&&)
virtual WIR_ID_API::~WIR_ID_API()

WIR_InheritableEnum::WIR_InheritableEnum()
bool WIR_InheritableEnum::operator==(const WIR_InheritableEnum&) const
bool WIR_InheritableEnum::operator!=(const WIR_InheritableEnum&) const
bool WIR_InheritableEnum::operator<(const WIR_InheritableEnum&) const

void WIR_Name_API::setName(const string&)
void WIR_Name_API::setName(string&&)
string WIR_Name_API::getName() const
WIR_Name_API::WIR_Name_API()
WIR_Name_API::WIR_Name_API(const WIR_Name_API&)
WIR_Name_API::WIR_Name_API(WIR_Name_API&&)
virtual WIR_Name_API::~WIR_Name_API()
WIR_Name_API& WIR_Name_API::operator=(const WIR_Name_API&)
WIR_Name_API& WIR_Name_API::operator=(WIR_Name_API&&)

const WIR_SymbolSet& WIR_SymbolTable_API::getSymbols() const
bool WIR_SymbolTable_API::containsSymbol(WIR_id_t) const
bool WIR_SymbolTable_API::containsSymbol(const WIR_BasicBlock&) const
bool WIR_SymbolTable_API::containsSymbol(const WIR_Data&) const
bool WIR_SymbolTable_API::containsSymbol(const WIR_Function&) const
bool WIR_SymbolTable_API::containsSymbol(const string&) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(WIR_id_t) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(const WIR_BasicBlock&) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(const WIR_Data&) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(const WIR_Function&) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(const string&) const
WIR_Symbol& WIR_SymbolTable_API::findSymbol(const WIR_MemoryAddress&) const
WIR_SymbolTable_API::WIR_SymbolTable_API()
WIR_SymbolTable_API::WIR_SymbolTable_API(const WIR_SymbolTable_API&)
WIR_SymbolTable_API::WIR_SymbolTable_API(WIR_SymbolTable_API&&)
virtual WIR_SymbolTable_API::~WIR_SymbolTable_API()
WIR_SymbolTable_API& WIR_SymbolTable_API::operator=(const WIR_SymbolTable_API&)
WIR_SymbolTable_API& WIR_SymbolTable_API::operator=(WIR_SymbolTable_API&&)
WIR_Symbol& WIR_SymbolTable_API::insertSymbol(const WIR_Symbol&)
WIR_Symbol& WIR_SymbolTable_API::insertSymbol(WIR_Symbol&&)
WIR_Symbol& WIR_SymbolTable_API::insertSymbol(const WIR_BasicBlock&)
WIR_Symbol& WIR_SymbolTable_API::insertSymbol(const WIR_Data&)
WIR_Symbol& WIR_SymbolTable_API::insertSymbol(const WIR_Function&)
WIR_SymbolSet::iterator WIR_SymbolTable_API::eraseSymbol(const WIR_BasicBlock&)
WIR_SymbolSet::iterator WIR_SymbolTable_API::eraseSymbol(const WIR_Data&)
WIR_SymbolSet::iterator WIR_SymbolTable_API::eraseSymbol(const WIR_Function&)
void WIR_SymbolTable_API::clearSymbols()
void WIR_SymbolTable_API::invalidateSymbols()
WIR_id_t WIR_SymbolTable_API::getSymbolID(const WIR_Symbol&) const
WIR_id_t WIR_SymbolTable_API::checkDuplicates(const WIR_Symbol&) const
void WIR_SymbolTable_API::copySymbolTable(const WIR_SymbolTable_API&)

static void WIR_Registry::registerProcessor(WIR_BaseProcessor&&)
static void WIR_Registry::registerOperationFormat(const WIR_BaseProcessor::OperationFormat&, WIR_OperationFormat&&)
static void WIR_Registry::registerOpCode(const WIR_BaseProcessor::OpCode&, const WIR_BaseProcessor::OperationFormat&)
static void WIR_Registry::registerBasicBlockDumper(unsigned int, WIR_BasicBlockDumper)
static WIR_BasicBlockDumper WIR_Registry::getBasicBlockDumper(unsigned int)
static void WIR_Registry::registerBlockLabelDumper(unsigned int, WIR_BlockLabelDumper)
static WIR_BlockLabelDumper WIR_Registry::getBlockLabelDumper(unsigned int)
static void WIR_Registry::registerCommentDumper(unsigned int, WIR_CommentDumper)
static WIR_CommentDumper WIR_Registry::getCommentDumper(unsigned int)
static void WIR_Registry::registerCompilationUnitDumper(unsigned int, WIR_CompilationUnitDumper)
static WIR_CompilationUnitDumper WIR_Registry::getCompilationUnitDumper(unsigned int)
static void WIR_Registry::registerDataDumper(unsigned int, WIR_DataDumper)
static WIR_DataDumper WIR_Registry::getDataDumper(unsigned int)
static void WIR_Registry::registerDataSectionDumper(unsigned int, WIR_DataSectionDumper)
static WIR_DataSectionDumper WIR_Registry::getDataSectionDumper(unsigned int)
static void WIR_Registry::registerFileInfoDumper(unsigned int, WIR_FileInfoDumper)
static WIR_FileInfoDumper WIR_Registry::getFileInfoDumper(unsigned int)
static void WIR_Registry::registerFunctionDumper(unsigned int, WIR_FunctionDumper)
static WIR_FunctionDumper WIR_Registry::getFunctionDumper(unsigned int)
static void WIR_Registry::registerInstructionDumper(unsigned int, WIR_InstructionDumper)
static WIR_InstructionDumper WIR_Registry::getInstructionDumper(unsigned int)
static void WIR_Registry::registerOperationDumper(unsigned int, WIR_OperationDumper)
static WIR_OperationDumper WIR_Registry::getOperationDumper(unsigned int)
static void WIR_Registry::registerAddressingModeParameterDumper(unsigned int, WIR_AddressingModeParameterDumper)
static WIR_AddressingModeParameterDumper WIR_Registry::getAddressingModeParameterDumper(unsigned int)
static void WIR_Registry::registerConditionFieldParameterDumper(unsigned int, WIR_ConditionFieldParameterDumper)
static WIR_ConditionFieldParameterDumper WIR_Registry::getConditionFieldParameterDumper(unsigned int)
static void WIR_Registry::registerImmediateParameterDumper(unsigned int, WIR_ImmediateParameterDumper)
static WIR_ImmediateParameterDumper WIR_Registry::getImmediateParameterDumper(unsigned int)
static void WIR_Registry::registerLabelParameterDumper(unsigned int, WIR_LabelParameterDumper)
static WIR_LabelParameterDumper WIR_Registry::getLabelParameterDumper(unsigned int)
static void WIR_Registry::registerLdScriptDumper(unsigned int, WIR_LdScriptDumper)
static WIR_LdScriptDumper WIR_Registry::getLdScriptDumper(unsigned int)
static void WIR_Registry::registerLdScriptSectionDumper(unsigned int, WIR_LdScriptSectionDumper)
static WIR_LdScriptSectionDumper WIR_Registry::getLdScriptSectionDumper(unsigned int)
static void WIR_Registry::registerRegisterParameterDumper(unsigned int, WIR_RegisterParameterDumper)
static WIR_RegisterParameterDumper WIR_Registry::getRegisterParameterDumper(unsigned int)
static void WIR_Registry::registerSystemDumper(unsigned int, WIR_SystemDumper)
static WIR_SystemDumper WIR_Registry::getSystemDumper(unsigned int)
WIR_Registry::operationFormatRegisters::~operationFormatRegisters()
static bool WIR_Registry::isProcessorRegistered(const string&)
static WIR_BaseProcessor* WIR_Registry::getNewProcessor(const string&)
static const WIR_OperationFormat& WIR_Registry::getOperationFormat(const WIR_BaseProcessor::OperationFormat&)
static bool WIR_Registry::isLegalOperationFormat(const WIR_BaseProcessor::OpCode&, const WIR_BaseProcessor::OperationFormat&)

int WIR_CommentCont()
int WIR_DefUse()
int WIR_FileInfoCont()
int WIR_FunctionRegisters()
int WIR_ImplicitParams()
int WIR_Indentation()
int WIR_JumpTargets()
int WIR_LdScript()
int WIR_Precolors()
ostream& wir(ostream&)
ostream& comment(ostream&)
ostream& nocomment(ostream&)
ostream& defuse(ostream&)
ostream& nodefuse(ostream&)
ostream& fileinfo(ostream&)
ostream& nofileinfo(ostream&)
ostream& functionregisters(ostream&)
ostream& nofunctionregisters(ostream&)
ostream& implicitparams(ostream&)
ostream& noimplicitparams(ostream&)
ostream& jumptargets(ostream&)
ostream& nojumptargets(ostream&)
ostream& ldscript(ostream&)
ostream& noldscript(ostream&)
ostream& precolors(ostream&)
ostream& noprecolors(ostream&)
void dumpWIRBasicBlock(ostream&, const WIR_BasicBlock&)
void dumpWIRBlockLabel(ostream&, const WIR_BasicBlock&)
void dumpWIRComment(ostream&, const WIR_Comment&)
void dumpWIRCompilationUnit(ostream&, const WIR_CompilationUnit&)
void dumpWIRData(ostream&, const WIR_Data&)
void dumpWIRDataSection(ostream&, WIR_Section*, const list<reference_wrapper<WIR_Data> >&, bool)
void dumpWIRFileInfo(ostream&, const WIR_FileInfo&)
void dumpWIRFunction(ostream&, const WIR_Function&)
void dumpWIRInstruction(ostream&, const WIR_Instruction&)
void dumpWIROperation(ostream&, const WIR_Operation&)
void dumpWIRAddressingModeParameter(ostream&, const WIR_AddressingModeParameter&)
void dumpWIRConditionFieldParameter(ostream&, const WIR_ConditionFieldParameter&)
void dumpWIRImmediateParameter(ostream&, const WIR_BaseImmediateParameter&)
void dumpWIRLabelParameter(ostream&, const WIR_LabelParameter&)
void dumpWIRRegisterParameter(ostream&, const WIR_RegisterParameter&)
void dumpLdScript(ostream&, const WIR_System&)
void dumpLDScriptRegions(ostream&, const WIR_System&)
void dumpLDScriptSections(ostream&, const WIR_System&)
void dumpLDScriptSection(ostream&, const WIR_Section&, set<string>&)
bool dumpLDScriptSection(ostream&, const WIR_Section&)
void dumpLDScriptSubSections(ostream&, const WIR_Section&, set<string>&, const string&)
void dumpWIRSystem(ostream&, const WIR_System&)

bool operator<(const WIR_MemoryRegion&, const WIR_MemoryRegion&)
bool operator==(const WIR_RegisterSet&, const WIR_RegisterSet&)
bool operator!=(const WIR_RegisterSet&, const WIR_RegisterSet&)
