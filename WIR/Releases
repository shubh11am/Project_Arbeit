WIR release versions
====================


This repository contains the WCC Intermediate Representation framework. The
comprehensive release histogram is:

                release 0.1
                     |
                release 0.2
                     |
                release 0.3
                     |
                release 0.4
                     |
                release 0.5
                     |
                release 1.0
                     |
                release 1.1
                     |
                release 1.2
                     |
                release 1.3
                     |
                release 1.4
                     |
                release 1.5
                     |
                release 1.6
                     |
                release 1.7
                     |
                    HEAD


The following releases have been created:

release 0.1 (2015-12-08)

        Initial version created.

release 0.2 (2016-04-08)

        Added processor descriptions for Infineon TriCore and generic MIPS
          architectures.

release 0.3 (2016-08-03)

        Almost complete implementation of all WIR classes from WIR_Function down
          to WIR_Register.

release 0.4 (2016-10-04

        Added API to all WIR core classes allowing to attach arbitrary generic
          containers.
        Added first WIR analyses and optimizations.

release 0.5 (2016-11-12)

        Added processor descriptions for ARM-based instruction set
          architectures.
        Redesign of TriCore processor description.

release 1.0 (2017-03-27)

        Redesign of assertion/error/warning message infrastructure, achieved
          independence of liberror.
        Added config file based way of specifying complete systems consisting of
          processor cores with specific ISAs, physical memories, caches, buses
          and ELF executable sections.
        Added global data objects and their initialization data.
        Added complete memory hierarchy handling, including a global
          system-level symbol table for functions, basic blocks and data
          objects, assignment of symbols to ELF sections, automatic and
          transparent computation of physical memory addresses, generation of
          assembly directives for ARM and TriCore memory layouts, and the
          generation of GNU-compatible linker scripts.
        Various API and performance improvements.

release 1.1 (2017-06-30)

        Added graph coloring-based register allocator.
        Integrated libuseful's exception mechanisms.

release 1.2 (2018-11-13)

        Added redundant basic block elimination.
        Applied a multitude of performance improvements.
        Added peephole optimizer.
        Added TriCore silicon bug optimizers.
        Added jump displacement correction.
        Replaced previous DFS traversal of WIR functions by explicit CFG
          representation.
        Added reachability control flow analysis.

release 1.3 (2019-08-28)

        Added bit-true data and value flow analysis, featuring the generic
          analysis framework and a full implementation for TriCore.
        Added dead code elimination.
        Added constant folding.
        Added constant propagation.
        Removed dependence on LIBILP from the build infrastructure of WIR.
        Added available definitions analysis.
        Added redundant code elimination.

release 1.4 (2019-09-27)

        Ported all iterative data flow analyses to a highly efficient bit vector
          data structure.
        Eliminated performance bottlenecks from WIR data flow analyses.
        Eliminated performance bottleneck from WIR registry.
        Eliminated performance bottleneck from jump displacement correction.
        Simplified API of bit-values container, eliminated performance
          bottlenecks during update of up/down values in bit-true optimizations.

release 1.5 (2020-05-15)

        Added domination and immediate domination control flow analyses.
        Added structural control flow analysis.
        Integrated structural analysis into graph coloring register allocator.
        Added TriCore peephole optimizers.
        Added TriCore predicated execution optimization.
        Added loop-invariant code motion.
        Added TriCore operation bit-width reduction.
        Added local instruction scheduler.
        Added switch to WIR optimizations such that 16-bit operations shall not
          be generated.
        Switched to 64-bit builds by default.

release 1.6 (2022-03-27)

        Added flow facts, i.e., loop bounds and flow restrictions.
        Added processor descriptions for RISC-V RV32I, RV32IM and RV32IC
          instruction set architectures.
        Fixed some issues in loop-invariant code motion so that newly created
          basic blocks are properly added to surrounding loops and are also
          considered as entries of outer loops.
        Extended the structural control flow analysis such that it recognizes
          more classes of degenerated for- and do-while-loops. Added a mechanism
          to provide hints about break- and exit-edges via WIR containers.
        Added processor description for RISC-V RV32IMC instruction set
          architectures.
        Added initial system description for RISC-V RudolV implementation.
        Added bit-true data and value flow analysis for RISC-V RV32IM
          instruction set architectures.

release 1.7 (2022-08-17)

        Added first RISC-V port of graph coloring-based register allocator.
        Added entry point flow facts and flow fact update mechanisms.

 HEAD
