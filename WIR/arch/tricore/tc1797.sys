#
#
#   This script belongs to the
#
#            Hamburg University of Technology (TUHH)
#              WCC Intermediate Representation Framework
#
#   and is property of its respective copyright holder. It must neither be used
#   nor published even in parts without explicit written permission.
#
#   Copyright 2015 - 2022, Heiko Falk.
#
#   Hamburg University of Technology (TUHH)
#   Institute of Embedded Systems
#   21071 Hamburg
#   Germany
#
#   http://www.tuhh.de/es/esd/research/wcc
#
#


###############################################################################
#
#  System specification of the Infineon TriCore TC1797 architecture.
#
#  Referring to tc1797_UM_v1.1.pdf (2009-05, memmaps v1.7)
#
#  For details about the syntax and semantics of the directives in this file,
#  please refer to the doxygen documentation of class WIR_SystemConfig.
#

# ATTENTION: The program flash contains 2048K which is mapped into cached
#            memory area as well as into the non-cached memory area. For easy
#            allocation, we divide it into two disjoint partitions of 1024K to
#            ensure that no objects are allocated into the same physical memory
#            cell.

#
# The TC1797 comprises the following memories (differ from the memory layout):
#
# 0x8000.0000,   2MB: Program Flash		(PFLASH0)
# 0x8020.0000,   2MB: Program Flash		(PFLASH1)
# 0x8FE0.0000,  32KB: Data Flash		(DFLASH0)
# 0x8FE1.0000,  32KB: Data Flash		(DFLASH1)
# 0xA000.0000,   2MB: Program Flash  		(PFLASH0, cached)
# 0xA020.0000,   2MB: Program Flash		(PFLASH1, cached)
# 0xAFE0.0000,  32KB: Data Flash    		(DFLASH0)
# 0xAFE1.0000,  32KB: Data Flash    		(DFLASH1)
# 0xC000.0000,  40KB: PMI Scratch-Pad RAM	(SPRAM)
# 0xD000.0000, 124KB: DMI Local Data RAM	(LDRAM)
# 0xD400.0000,  40KB: PMI Scratch-Pad RAM 	(SPRAM)
#

#
# Infineon TriCore TC1797
#
[tc1797]
type               = system


#
# Processor core (ISA TC1.3.1)
#
[CORE0]
type               = core
isa                = TC1.3.1
clockfreq          = 150000000
voltage            = 1.5


#
# Program Flash with cached access (PFLASH; PMU0; L2)
#
[PFLASH-C]
type               = memory
origin             = 0x80100000
length             = 0x100000   # 1024K until partitioning is done automatically
dynamic_allocation = 0
attributes         = RXAC       # read/execute/allocate/cached
cycles             = 6          # WS; Possible values are 1-7
burstcycles        = 1
memory_type        = PFLASH0
sections           = .text_cached
hierarchy          = CORE0 L1-I


#
# L1 instruction cache
#
[L1-I]
type               = cache
cache_type         = I
size               = 16384
associativity      = 2
linesize           = 32
enabled            = 1
shared             = 0
buswidth           = 4
#writethrough       = 1
#writeallocate      = 1
#hitdelay           = 1
#missdelay          = 2
##percent_size       = 42


#
# Data Flash with cached access (DFLASH; Bank0; PMU0; L2)
#
#[DFLASH-C0]
#type               = memory
#origin             = 0x8fe00000
#length             = 0x8000     # 32K
#dynamic_allocation = 0
#attributes         = R          # read
#cycles             = 6
#burstcycles        = 1
#memory_type        = DFLASH
#sections           =
#hierarchy          = CORE0 L1-D


#
# Data Flash with cached access (DFLASH; Bank1; PMU0; L2)
#
#[DFLASH-C1]
#type               = memory
#origin             = 0x8fe10000
#length             = 0x8000     # 32K
#dynamic_allocation = 0
#attributes         = R          # read
#cycles             = 6
#burstcycles        = 1
#memory_type        = DFLASH1
#sections           =
#hierarchy          = CORE0 L1-D


#
# Fixed TC1797 boot ROM
#
[BOOT]
type               = memory
origin             = 0x8fffc000
length             = 0x400
dynamic_allocation = 0
attributes         = R
memory_type        = BROM
cycles             = 1
hierarchy          = CORE0


#
# We define a separate startup section at the beginning of flash memory
# This is required for systems with fixed reset vector like CoMET!
#
[PFLASH-STARTUP]
type               = memory
origin             = 0xa0000000
length             = 0x1000     # 4K startup code
dynamic_allocation = 0
attributes         = RXA        # read/execute
cycles             = 6
memory_type        = PFLASH0
sections           = .startup_code
hierarchy          = CORE0


#
# Program Flash with non-cached access (PFLASH; PMU0; L2)
#
[PFLASH-NC]
type               = memory
origin             = 0xa0001000
length             = 0xFE000    # 1024K until partitioning is done automatically
dynamic_allocation = 0
attributes         = RXA        # read/execute
cycles             = 6
memory_type        = PFLASH1
sections           = .text .init .eh_frame .ctors .dtors
load               = .text_spm .pcptext .pcpdata
hierarchy          = CORE0


#
# Virtual Data Flash with 128kb non-cached access
# ATTENTION: created to supply the same size of Flash like TC1796
#
[DFLASH]
type               = memory
origin             = 0xafe00000
length             = 0x20000    # 128K
dynamic_allocation = 0
attributes         = R          # read
cycles             = 6
memory_type        = DFLASH
sections           = .rodata
load               = .data .data_spm .sdata .zdata
hierarchy          = CORE0


#
# Data Flash with non-cached access (DFLASH; Bank0; PMU0; L2)
#
#[DFLASH-BANK0]
#type               = memory
#origin             = 0xafe00000
#length             = 0x8000     # 32K
#dynamic_allocation = 0
#attributes         = R          # read
#cycles             = 6
#memory_type        = DFLASH
#sections           = .rodata
#hierarchy          = CORE0


#
# Data Flash with non-cached access (DFLASH; Bank1; PMU0; L2)
#
#[DFLASH-BANK1]
#type               = memory
#origin             = 0xafe10000
#length             = 0x8000     # 32K
#dynamic_allocation = 0
#attributes         = R          # read
#cycles             = 6
#memory_type        = DFLASH1
#sections           =
#hierarchy          = CORE0


#
# Program SPM (SPRAM; PMI; L1)
#
[PMI-SRAM]
type               = memory
origin             = 0xc0000000
length             = 0x9c00     # 39K; 1K is reserved for PMI-SYS
dynamic_allocation = 0
attributes         = RWXA       # read/write/execute/allocate
cycles             = 1
memory_type        = SPRAM
sections           = .text_spm
hierarchy          = CORE0


#
# Part of program SPM for system stuff (SPRAM; PMI; L1)
#
[PMI-SYS]
type               = memory
origin             = 0xc0009c00
length             = 0x400      # 1K is used for traptable and inttab
dynamic_allocation = 0
attributes         = RX         # read/execute
cycles             = 0
memory_type        = SPRAM
sections           = .traptab .inttab
hierarchy          = CORE0


# The physical DMI contains 128K LDRAM from which 4KB can be configured as
# cache. For easy allocation, we divide the LDRAM into 88K for free use, 28K
# for the stack and 8K for the context save area.

#
# Context-Save Area, part of scratchpad memory (LDRAM; DMI; L1)
#
[DMI-CSA]
type               = memory
origin             = 0xd0000000
length             = 0x2000     # 8K, allows 128 saved contexts
dynamic_allocation = 1
attributes         = RW         # read/write
cycles             = 0
memory_type        = LDRAM
sections           = .csa
hierarchy          = CORE0


#
# Stack, part of scratchpad memory (LDRAM; DMI; L1)
#
[DMI-SP]
type               = memory
origin             = 0xd0002000
length             = 0x7000     # 28K
dynamic_allocation = 1
attributes         = RW         # read/write
cycles             = 0
memory_type        = LDRAM
sections           = .stack
hierarchy          = CORE0


#
# Local Data RAM (LDRAM; DMI; L1)
#
[DMI-LDRAM]
type               = memory
origin             = 0xd0009000
length             = 0x16000    # 88K
dynamic_allocation = 0
attributes         = RWA        # read/write/allocatable
cycles             = 1
memory_type        = LDRAM
sections           = .data .data_spm .sbss .bss .sdata .zbss .zdata
hierarchy          = CORE0


#
# Memory areas for PCP2 coprocessor
#
[PCP-DATA]
type               = memory
origin             = 0xf0050000
length             = 0x4000
dynamic_allocation = 0
attributes         = RW
cycles             = 0
memory_type        = PERIPHERAL
sections           = .pcpdata
hierarchy          = CORE0


[PCP-TEXT]
type               = memory
origin             = 0xf0060000
length             = 0x4000
dynamic_allocation = 0
attributes         = RX
cycles             = 0
memory_type        = PERIPHERAL
sections           = .pcptext
hierarchy          = CORE0


#
# ELF Section properties
#
[.bss]
type               = section
block              = 2

[.data]
type               = section
block              = 2

[.data_spm]
type               = section
block              = 2

[.rodata]
type               = section
block              = 2
